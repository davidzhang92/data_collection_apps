/*!
 * Built with Duet Design System
 */
import { Component, Element, Event, h, Host, Method, Prop, Watch } from "@stencil/core";
import { inheritGlobalTheme } from "../../common";
import { createID } from "../../utils/create-id";
export class DuetToggle {
  constructor() {
    /**
     * Own Properties
     */
    this.toggleId = createID("DuetToggle");
    /**
     * Theme of the card.
     */
    this.theme = "";
    /**
     * Controls the margin of the component.
     */
    this.margin = "auto";
    /**
     * Aria Details of the component
     */
    this.accessibleDetails = undefined;
    /**
     * String of id's that indicate alternative labels elements
     */
    this.accessibleLabelledBy = undefined;
    /**
     * Aria description the button
     */
    this.accessibleDescription = undefined;
    /**
     * Label for the toggle.
     */
    this.label = "label";
    /**
     * Set whether the input is required or not. Please note that this is necessary for
     * accessible inputs when the user is required to fill them. When using this property
     * you need to also set “novalidate” attribute to your form element to prevent
     * browser from displaying its own validation errors.
     */
    this.required = false;
    /**
     * Makes the input component disabled. This prevents users from being able to
     * interact with the input, and conveys its inactive state to assistive technologies.
     */
    this.disabled = false;
    /**
     * Check state of the checkbox.
     */
    this.checked = false;
    /**
     * Component event handling.
     */
    this.onClick = (ev) => {
      ev.preventDefault();
      this.setFocus();
      this.checked = !this.checked;
    };
  }
  checkedChanged(isChecked) {
    this.duetChange.emit({
      checked: isChecked,
      value: this.value,
      component: "duet-toggle",
    });
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
    if (this.value === undefined) {
      this.value = this.identifier;
    }
  }
  /**
   * Sets focus on the specified `duet-toggle`. Use this method instead of the global
   * `input.focus()`.
   */
  async setFocus(options) {
    this.nativeInput.focus(options);
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    const identifier = this.identifier || this.toggleId;
    return (h(Host, { onClick: this.disabled ? undefined : this.onClick, class: { "duet-m-0": this.margin === "none" } },
      h("div", { class: {
          "duet-toggle": true,
          "duet-theme-turva": this.theme === "turva",
        } },
        h("duet-label", { theme: this.theme, for: identifier }, this.label),
        h("label", { class: "duet-switch", htmlFor: identifier },
          h("input", { type: "checkbox", value: this.value, "aria-controls": this.accessibleControls, "aria-activedescendant": this.accessibleActiveDescendant, "aria-owns": this.accessibleOwns, "aria-describedby": this.accessibleDescribedBy, "aria-labelledby": this.accessibleLabelledBy, "aria-details": this.accessibleDetails, "aria-description": this.accessibleDescription, id: identifier, role: this.role, name: this.name, checked: this.checked, required: this.required, disabled: this.disabled, ref: input => (this.nativeInput = input) }),
          h("div", { class: "duet-slider" })))));
  }
  static get is() { return "duet-toggle"; }
  static get encapsulation() { return "scoped"; }
  static get originalStyleUrls() { return {
    "$": ["duet-toggle.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["duet-toggle.css"]
  }; }
  static get properties() { return {
    "theme": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "DuetTheme",
        "resolved": "\"\" | \"default\" | \"turva\"",
        "references": {
          "DuetTheme": {
            "location": "import",
            "path": "../../common-types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Theme of the card."
      },
      "attribute": "theme",
      "reflect": false,
      "defaultValue": "\"\""
    },
    "margin": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "DuetMargin",
        "resolved": "\"auto\" | \"none\"",
        "references": {
          "DuetMargin": {
            "location": "import",
            "path": "../../common-types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Controls the margin of the component."
      },
      "attribute": "margin",
      "reflect": false,
      "defaultValue": "\"auto\""
    },
    "accessibleActiveDescendant": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Indicates the id of a related component\u2019s visually focused element."
      },
      "attribute": "accessible-active-descendant",
      "reflect": false
    },
    "accessibleControls": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Use this prop to add an aria-controls attribute. Use the attribute to indicate\nthe id of a component controlled by this component."
      },
      "attribute": "accessible-controls",
      "reflect": false
    },
    "accessibleOwns": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Indicates the id of a component owned by the toggle."
      },
      "attribute": "accessible-owns",
      "reflect": false
    },
    "accessibleDescribedBy": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Indicates the id of a component that describes the toggle."
      },
      "attribute": "accessible-described-by",
      "reflect": false
    },
    "accessibleDetails": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Aria Details of the component"
      },
      "attribute": "accessible-details",
      "reflect": false,
      "defaultValue": "undefined"
    },
    "accessibleLabelledBy": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "String of id's that indicate alternative labels elements"
      },
      "attribute": "accessible-labelled-by",
      "reflect": false,
      "defaultValue": "undefined"
    },
    "accessibleDescription": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Aria description the button"
      },
      "attribute": "accessible-description",
      "reflect": false,
      "defaultValue": "undefined"
    },
    "label": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Label for the toggle."
      },
      "attribute": "label",
      "reflect": false,
      "defaultValue": "\"label\""
    },
    "required": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Set whether the input is required or not. Please note that this is necessary for\naccessible inputs when the user is required to fill them. When using this property\nyou need to also set \u201Cnovalidate\u201D attribute to your form element to prevent\nbrowser from displaying its own validation errors."
      },
      "attribute": "required",
      "reflect": false,
      "defaultValue": "false"
    },
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Makes the input component disabled. This prevents users from being able to\ninteract with the input, and conveys its inactive state to assistive technologies."
      },
      "attribute": "disabled",
      "reflect": true,
      "defaultValue": "false"
    },
    "checked": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Check state of the checkbox."
      },
      "attribute": "checked",
      "reflect": true,
      "defaultValue": "false"
    },
    "value": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The value of the checkbox does not mean if it's checked or not, use the checked\nproperty for that."
      },
      "attribute": "value",
      "reflect": true
    },
    "identifier": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Adds a unique identifier for the checkbox."
      },
      "attribute": "identifier",
      "reflect": false
    },
    "name": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Name of the checkbox."
      },
      "attribute": "name",
      "reflect": false
    },
    "role": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Defines a specific role attribute for the input."
      },
      "attribute": "role",
      "reflect": false
    }
  }; }
  static get events() { return [{
      "method": "duetChange",
      "name": "duetChange",
      "bubbles": false,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emitted when the checked property has changed."
      },
      "complexType": {
        "original": "DuetToggleChangeEvent",
        "resolved": "{ component: \"duet-toggle\"; checked: boolean; value: string; }",
        "references": {
          "DuetToggleChangeEvent": {
            "location": "local"
          }
        }
      }
    }]; }
  static get methods() { return {
    "setFocus": {
      "complexType": {
        "signature": "(options?: FocusOptions) => Promise<void>",
        "parameters": [{
            "tags": [],
            "text": ""
          }],
        "references": {
          "Promise": {
            "location": "global"
          },
          "FocusOptions": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Sets focus on the specified `duet-toggle`. Use this method instead of the global\n`input.focus()`.",
        "tags": []
      }
    }
  }; }
  static get elementRef() { return "element"; }
  static get watchers() { return [{
      "propName": "checked",
      "methodName": "checkedChanged"
    }]; }
}
