/*!
 * Built with Duet Design System
 */
import { Component, Element, h, Host, Prop, State } from "@stencil/core";
import { inheritGlobalTheme } from "../../common/themeable-component";
import { createID } from "../../utils/create-id";
/**
 * @slot unnamed default slot - The componentâ€™s primary content. All child nodes that do not have a slot attribute defined are inserted into this primary slot.
 * @slot tooltip - Use to place a tooltip alongside the fieldset label.
 */
export class DuetFieldset {
  constructor() {
    this.errorId = createID("DuetError");
    this.labelId = createID("DuetLabel");
    this.hasTooltip = false;
    /**
     * Theme of the fieldset.
     */
    this.theme = "";
    /**
     * Controls the margin of the component.
     */
    this.margin = "auto";
    /**
     * Visually hide the label, but still show it to screen readers.
     */
    this.labelHidden = false;
    this.checkHasTooltip = () => {
      this.hasTooltip = !!this.element.querySelector("[slot='tooltip']");
    };
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
    this.checkHasTooltip();
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    return (h(Host, { class: { "duet-m-0": this.margin === "none" } },
      h("fieldset", { "aria-labelledby": `${this.labelId} ${this.errorId}`, class: {
          "duet-fieldset": true,
          "duet-theme-turva": this.theme === "turva",
        } },
        h("legend", { id: this.labelId },
          h("span", null, this.label),
          this.caption && h("span", null, this.caption)),
        h("div", { class: {
            "duet-legend-wrapper": true,
            "duet-legend-has-caption": !!this.caption,
            "duet-legend-has-tooltip": this.hasTooltip,
            "duet-legend-hidden": this.labelHidden,
          } },
          h("div", { class: "duet-fieldset-label" },
            h("span", { "aria-hidden": "true" }, this.label),
            h("slot", { onSlotchange: this.checkHasTooltip, name: "tooltip" })),
          this.caption && (h("div", { class: "duet-fieldset-caption", "aria-hidden": "true" },
            h("duet-caption", { margin: "none" }, this.caption)))),
        h("slot", null),
        h("span", { class: "duet-fieldset-help", id: this.errorId, "aria-live": "assertive", "aria-relevant": "additions removals" }, this.error && h("span", null, this.error)))));
  }
  static get is() { return "duet-fieldset"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["duet-fieldset.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["duet-fieldset.css"]
  }; }
  static get properties() { return {
    "theme": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "DuetTheme",
        "resolved": "\"\" | \"default\" | \"turva\"",
        "references": {
          "DuetTheme": {
            "location": "import",
            "path": "../../common-types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Theme of the fieldset."
      },
      "attribute": "theme",
      "reflect": false,
      "defaultValue": "\"\""
    },
    "margin": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "DuetMargin",
        "resolved": "\"auto\" | \"none\"",
        "references": {
          "DuetMargin": {
            "location": "import",
            "path": "../../common-types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Controls the margin of the component."
      },
      "attribute": "margin",
      "reflect": false,
      "defaultValue": "\"auto\""
    },
    "caption": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Additional caption to show next to the label."
      },
      "attribute": "caption",
      "reflect": false
    },
    "label": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": true,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Label/legend displayed for the fieldset."
      },
      "attribute": "label",
      "reflect": false
    },
    "error": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "An error message to be shown next to the label."
      },
      "attribute": "error",
      "reflect": false
    },
    "labelHidden": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Visually hide the label, but still show it to screen readers."
      },
      "attribute": "label-hidden",
      "reflect": false,
      "defaultValue": "false"
    }
  }; }
  static get states() { return {
    "hasTooltip": {}
  }; }
  static get elementRef() { return "element"; }
}
