/*!
 * Built with Duet Design System
 */
import { Component, Element, Event, h, Method, Prop, State } from "@stencil/core";
import { inheritGlobalTheme } from "../../common/themeable-component";
import { createID } from "../../utils/create-id";
import { isArrowDownKey, isArrowLeftKey, isArrowRightKey, isArrowUpKey } from "../../utils/keyboard-utils";
import { getLanguage, getLocaleString } from "../../utils/language-utils";
/**
 * @part ${identifier}-button - piercing selector for styling tab buttons
 * @part ${identifier}-button--selected - piercing selector for styling selected tab button
 */
export class DuetTabGroup {
  constructor() {
    this.id = createID("DuetTabGroup");
    /**
     * State() variables
     * Inlined decorator, alphabetical order.
     */
    this.tabs = [];
    this.selected = 0;
    /**
     * Theme of the component.
     */
    this.theme = "";
    /**
     * Controls whether the tab-group should scroll (by inflection this will disable collapsing to select box on small screens),
     * if this is a number instead of true it will be used as "amount of items to scroll"
     */
    this.scrolls = false;
    /**
     * Whether the tab-group collapses to a select dropwdown in minor breakpoints
     */
    this.collapses = true;
    /**
     * Aria label for the entire tab-group
     */
    this.accessibleLabel = undefined;
    /**
     * Style variation of the tab group.
     */
    this.variation = "default";
    /**
     * The currently active language. This setting changes the accessible labels to match the
     * chosen language.
     * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing
     * @default "fi"
     */
    this.language = getLanguage();
    /**
     * Defaults for Label
     * @default {fi: "Valitse", en: "Choose", sv: "Välja"}
     */
    this.labelDefaults = {
      fi: "Valitse",
      en: "Choose",
      sv: "Välj",
    };
    /**
     * Label for the select element which gets shown on mobile.
     * @default {fi: "Valitse", en: "Choose", sv: "Välja"}
     */
    this.label = getLocaleString(this.labelDefaults, this.language);
    /**
     * Determines whether the label for the select element shown on mobile is visually hidden.
     */
    this.labelHidden = true;
    /**
     * Optional identifier to add to buttons in the tab group
     */
    this.identifier = this.id;
    /**
     * Controls the margin of the component.
     */
    this.margin = "auto";
    /**
     * Controls the padding of the component.
     */
    this.padding = "auto";
    /**
     * Component event handling.
     */
    this.handleKeyDown = ev => {
      let button;
      if (isArrowLeftKey(ev) || isArrowUpKey(ev)) {
        button = ev.target.previousElementSibling;
      }
      else if (isArrowRightKey(ev) || isArrowDownKey(ev)) {
        button = ev.target.nextElementSibling;
      }
      if (button) {
        ev.preventDefault();
        button.click();
        button.focus();
      }
    };
    this.renderTab = () => {
      const renderedTabs = this.tabs.map((element, index) => {
        return (h("button", { role: "tab", id: this.getButtonId(index), "aria-controls": this.getTabId(index), "aria-selected": element.selected ? "true" : "false", "aria-description": this.getAccessibleDescription(index), tabindex: index === 0 ? "0" : "-1", part: `${this.identifier}-button ${element.selected ? `${this.identifier}-button--selected` : ""}`, type: "button", class: {
            "duet-p-0": this.padding === "none",
            "duet-tab-button": true,
            selected: element.selected,
          }, onClick: () => this.openTab(index), onKeyDown: ev => this.handleKeyDown(ev) }, element.label));
      });
      if (this.scrolls) {
        return (h("duet-scrollable", { selected: this.selected, identifier: this.identifier }, renderedTabs));
      }
      return renderedTabs;
    };
  }
  /**
   * Component lifecycle events.
   */
  async connectedCallback() {
    if (typeof MutationObserver !== "undefined") {
      this.mutationO = new MutationObserver(() => {
        this.updateTabs();
      });
      this.mutationO.observe(this.element, {
        attributes: true,
        attributeFilter: ["label"],
        childList: true,
        characterData: true,
        subtree: true,
      });
    }
    await this.updateTabs();
  }
  disconnectedCallback() {
    if (this.mutationO) {
      this.mutationO.disconnect();
      this.mutationO = undefined;
    }
  }
  componentWillLoad() {
    inheritGlobalTheme(this);
  }
  /**
   * This method allows you to open any of the tabs by calling the method and
   * passing the index of the tab. Please note that index starts from zero.
   */
  async openTab(tabIndex) {
    if (tabIndex >= this.tabs.length) {
      throw new Error(`[duet-tabs] Index ${tabIndex} is out of bounds of tabs length`);
    }
    this.selected = tabIndex;
    this.tabs.forEach((tab, i) => {
      tab.selected = i === tabIndex;
    });
    const event = {
      value: tabIndex,
      component: "duet-tab-group",
    };
    this.duetChange.emit(event);
    this.duetTabChange.emit(event);
  }
  /**
   * This method used to refresh the contents of the tab group
   * but is now deprecated as this is done automatically.
   * @deprecated
   */
  async refresh() {
    console.log("[duet-tabs] Refresh method is deprecated and will be removed in the future version.");
  }
  /**
   * Local methods.
   */
  getTabs() {
    const allTabs = Array.from(this.element.querySelectorAll("duet-tab"));
    const localTabs = allTabs.filter(tab => tab.closest("duet-tab-group") === this.element);
    if (localTabs.length === 0) {
      throw new Error("[duet-tabs] Must have at least one tab");
    }
    // filter out any nested tabs
    return localTabs;
  }
  getButtonId(index) {
    return `${this.id}-button-${index}`;
  }
  getTabId(index) {
    return `${this.id}-tab-${index}`;
  }
  getAccessibleDescription(index) {
    const description = this.tabs[index].getAttribute("accessible-description") || null;
    return description;
  }
  async updateTabs() {
    this.tabs = this.getTabs();
    this.tabs.forEach((tab, index) => {
      tab.id = this.getTabId(index);
      tab.setAttribute("aria-labelledby", this.getButtonId(index));
      if (tab.selected) {
        this.selected = index;
      }
    });
    return;
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    return (h("div", { class: {
        "duet-tab-group": true,
        "duet-theme-turva": this.theme === "turva",
        [`duet-tab-variation-${this.variation}`]: true,
        "duet-tab-group-scrolls": this.scrolls,
        "duet-tab-group-collapses": this.collapses,
      }, "aria-label": this.accessibleLabel },
      this.tabs.length > 3 && this.collapses && (h("duet-select", { value: this.selected.toString(), expand: true, label: this.label, labelHidden: this.labelHidden, theme: this.theme, onDuetChange: event => this.openTab(Number(event.detail.value)), items: this.tabs.map((tab, index) => {
          return { label: tab.label, value: index.toString() };
        }) })),
      h("div", { role: "tablist", class: {
          "duet-m-0": this.margin === "none",
          "duet-tab-group-tabs": true,
          "duet-tab-group-hidden": this.tabs.length > 3,
          "duet-tab-group-collapses": this.collapses,
        } }, this.renderTab()),
      h("div", { role: "tabpanel", tabindex: "0", class: { "duet-tab-group-content": true, "duet-m-0": this.margin === "none" } },
        h("slot", null))));
  }
  static get is() { return "duet-tab-group"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["duet-tab-group.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["duet-tab-group.css"]
  }; }
  static get properties() { return {
    "theme": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "DuetTheme",
        "resolved": "\"\" | \"default\" | \"turva\"",
        "references": {
          "DuetTheme": {
            "location": "import",
            "path": "../../common-types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Theme of the component."
      },
      "attribute": "theme",
      "reflect": false,
      "defaultValue": "\"\""
    },
    "scrolls": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Controls whether the tab-group should scroll (by inflection this will disable collapsing to select box on small screens),\nif this is a number instead of true it will be used as \"amount of items to scroll\""
      },
      "attribute": "scrolls",
      "reflect": false,
      "defaultValue": "false"
    },
    "collapses": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Whether the tab-group collapses to a select dropwdown in minor breakpoints"
      },
      "attribute": "collapses",
      "reflect": false,
      "defaultValue": "true"
    },
    "accessibleLabel": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Aria label for the entire tab-group"
      },
      "attribute": "accessible-label",
      "reflect": false,
      "defaultValue": "undefined"
    },
    "variation": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "DuetTabVariation",
        "resolved": "\"default\" | \"plain\"",
        "references": {
          "DuetTabVariation": {
            "location": "local"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Style variation of the tab group."
      },
      "attribute": "variation",
      "reflect": false,
      "defaultValue": "\"default\""
    },
    "language": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "DuetLanguage",
        "resolved": "\"en\" | \"fi\" | \"sv\"",
        "references": {
          "DuetLanguage": {
            "location": "import",
            "path": "../../common-types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [{
            "name": "deprecated",
            "text": "this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing"
          }, {
            "name": "default",
            "text": "\"fi\""
          }],
        "text": "The currently active language. This setting changes the accessible labels to match the\nchosen language."
      },
      "attribute": "language",
      "reflect": false,
      "defaultValue": "getLanguage()"
    },
    "labelDefaults": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "DuetLangObject | string",
        "resolved": "DuetLangObject | string",
        "references": {
          "DuetLangObject": {
            "location": "import",
            "path": "../../utils/language-utils"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [{
            "name": "default",
            "text": "{fi: \"Valitse\", en: \"Choose\", sv: \"V\u00E4lja\"}"
          }],
        "text": "Defaults for Label"
      },
      "attribute": "label-default",
      "reflect": false,
      "defaultValue": "{\n    fi: \"Valitse\",\n    en: \"Choose\",\n    sv: \"V\u00E4lj\",\n  }"
    },
    "label": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [{
            "name": "default",
            "text": "{fi: \"Valitse\", en: \"Choose\", sv: \"V\u00E4lja\"}"
          }],
        "text": "Label for the select element which gets shown on mobile."
      },
      "attribute": "label",
      "reflect": false,
      "defaultValue": "getLocaleString(this.labelDefaults, this.language)"
    },
    "labelHidden": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Determines whether the label for the select element shown on mobile is visually hidden."
      },
      "attribute": "label-hidden",
      "reflect": false,
      "defaultValue": "true"
    },
    "identifier": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Optional identifier to add to buttons in the tab group"
      },
      "attribute": "identifier",
      "reflect": false,
      "defaultValue": "this.id"
    },
    "margin": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "DuetMargin",
        "resolved": "\"auto\" | \"none\"",
        "references": {
          "DuetMargin": {
            "location": "import",
            "path": "../../common-types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Controls the margin of the component."
      },
      "attribute": "margin",
      "reflect": false,
      "defaultValue": "\"auto\""
    },
    "padding": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "DuetPadding",
        "resolved": "\"auto\" | \"none\"",
        "references": {
          "DuetPadding": {
            "location": "import",
            "path": "../../common-types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Controls the padding of the component."
      },
      "attribute": "padding",
      "reflect": false,
      "defaultValue": "\"auto\""
    }
  }; }
  static get states() { return {
    "tabs": {},
    "selected": {}
  }; }
  static get events() { return [{
      "method": "duetChange",
      "name": "duetChange",
      "bubbles": false,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [{
            "name": "deprecated",
            "text": "in favour of more specific duetTabChange event.\nCallback for when the value changed."
          }],
        "text": ""
      },
      "complexType": {
        "original": "DuetTabGroupEvent",
        "resolved": "{ component: \"duet-tab-group\"; value: number; }",
        "references": {
          "DuetTabGroupEvent": {
            "location": "local"
          }
        }
      }
    }, {
      "method": "duetTabChange",
      "name": "duetTabChange",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Event raised when the selected tab is changed"
      },
      "complexType": {
        "original": "DuetTabGroupEvent",
        "resolved": "{ component: \"duet-tab-group\"; value: number; }",
        "references": {
          "DuetTabGroupEvent": {
            "location": "local"
          }
        }
      }
    }]; }
  static get methods() { return {
    "openTab": {
      "complexType": {
        "signature": "(tabIndex: number) => Promise<void>",
        "parameters": [{
            "tags": [],
            "text": ""
          }],
        "references": {
          "Promise": {
            "location": "global"
          },
          "DuetTabGroupEvent": {
            "location": "local"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "This method allows you to open any of the tabs by calling the method and\npassing the index of the tab. Please note that index starts from zero.",
        "tags": []
      }
    },
    "refresh": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "This method used to refresh the contents of the tab group\nbut is now deprecated as this is done automatically.",
        "tags": [{
            "name": "deprecated",
            "text": undefined
          }]
      }
    }
  }; }
  static get elementRef() { return "element"; }
}
