/*!
 * Built with Duet Design System
 */
import arrowUpIcon from "@duetds/icons/lib/assets/action-arrow-up";
import { Component, Element, Event, Fragment, h, Host, Method, Prop } from "@stencil/core";
import { inheritGlobalTheme } from "../../common";
import { createID } from "../../utils/create-id";
import { isKeyboardClick } from "../../utils/keyboard-utils";
import { sanitizeString } from "../../utils/string-utils";
import { getColorByName } from "../../utils/token-utils";
/**
 * @slot unnamed default slot - The component’s primary content. All child nodes that do not have a slot attribute defined are inserted into this primary slot.
 * @slot heading - This is a slot for heading content inside the card component.
 * @slot below-heading - Below heading content.
 * @slot footer - Footer content.
 */
export class DuetCard {
  constructor() {
    this.cardId = createID("DuetCard");
    /**
     * The content for the card heading. If empty, both heading and collapse
     * functionality will be hidden.
     */
    this.heading = "";
    /**
     * Additional content for the card heading. If empty, both heading and collapse
     * functionality will be hidden.
     */
    this.secondaryHeading = "";
    /**
     * Style variation of the card.
     */
    this.variation = "default";
    /**
     * Makes the card expand and collapse when the collapse/expand arrow in the
     * heading is clicked or tapped. This option only works together with the
     * heading option, meaning that you also need to set the heading for this
     * functionality to show up.
     */
    this.collapsible = false;
    /**
     * If the card is collapsible, this property controls whether the card is open or closed.
     */
    this.open = true;
    /**
     * The actual heading level used for the heading in html markup. This setting
     * exists for accessibility reasons. It doesn’t change the style visually.
     */
    this.headingLevel = "h2";
    /**
     * Custom color to be used for the card background, as a design token entered in
     * camelCase or kebab-case. Example: "primary".
     */
    this.background = "gray-lightest";
    /**
     * The padding for the card. Please note that the card padding values don’t directly
     * translate to similar space token names, but instead the card uses it’s own
     * derived defaults.
     */
    this.padding = "small";
    /**
     * Controls the margin of the component.
     */
    this.margin = "auto";
    /**
     * Theme of the card.
     */
    this.theme = "";
    /**
     * Local methods.
     */
    this.togglePanel = (e) => {
      e.preventDefault();
      this.open = !this.open;
      this.duetToggle.emit({
        component: "duet-card",
        originalEvent: e,
      });
    };
    this.handleKeyDown = (e) => {
      if (isKeyboardClick(e)) {
        this.togglePanel(e);
      }
    };
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
    this.hasHeadingSlot = !!this.element.querySelector(":scope > [slot='heading']");
    this.hasFooter = !!this.element.querySelector("[slot='footer']");
  }
  renderHeading() {
    const HeadingTag = sanitizeString(this.headingLevel);
    const headingProps = this.collapsible
      ? {
        role: "button",
        tabindex: "0",
        "aria-controls": this.cardId,
        "aria-expanded": this.open ? "true" : "false",
        onClick: this.togglePanel,
        onKeyDown: this.handleKeyDown,
      }
      : {};
    return (h(HeadingTag, Object.assign({ class: "duet-card-heading" }, headingProps),
      h("div", { class: "duet-card-heading-grid" },
        this.icon && (h(Fragment, null,
          h("duet-icon", { class: "duet-card-icon", name: this.icon, size: "medium", margin: "none", color: "currentColor" }),
          h("duet-spacer", { direction: "horizontal", size: "small" }))),
        h("div", { class: "duet-card-heading-text" }, this.heading ? this.heading : h("slot", { name: "heading" })),
        this.secondaryHeading && (h(Fragment, null,
          h("duet-spacer", { direction: "horizontal", size: "small" }),
          h("div", { class: "duet-card-secondary-heading duet-card-secondary-heading--inline" }, this.secondaryHeading))),
        this.collapsible && (h(Fragment, null,
          h("duet-spacer", { direction: "horizontal", size: "small" }),
          h("duet-icon", { class: "duet-card-caret", icon: arrowUpIcon.svg, size: "small", margin: "none", color: "currentColor" })))),
      this.secondaryHeading && (h("div", { class: "duet-card-secondary-heading duet-card-secondary-heading--new-line" }, this.secondaryHeading)),
      h("slot", { name: "below-heading" })));
  }
  /**
   * Sets focus on the specified `duet-card`. Use this method instead of the global
   * `card.focus()`.
   */
  async setFocus(options) {
    if (this.nativeCard) {
      this.nativeCard.focus(options);
    }
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    const TagName = this.url ? "a" : "div";
    const styles = {
      backgroundColor: getColorByName(this.background),
    };
    return (h(Host, { class: {
        "duet-m-0": this.margin === "none",
        "duet-card-info": this.variation === "info",
      } },
      h(TagName, { href: this.url, style: styles, ref: card => (this.nativeCard = card), "aria-label": this.accessibleLabel, class: {
          "duet-card": true,
          [this.padding]: true,
          [this.variation]: true,
          "duet-p-0": this.padding === "none",
          "duet-theme-turva": this.theme === "turva",
          "duet-card-has-bg": this.background !== "gray-lightest",
          "duet-card-has-icon": !!this.icon,
          "duet-card-collapsed": this.collapsible && !this.open,
        } },
        this.image && (h("div", { class: "duet-card-image-mask" },
          h("img", { src: this.image, class: "duet-card-image", loading: "lazy", alt: "", "aria-hidden": "true" }))),
        (this.heading || this.hasHeadingSlot) && this.renderHeading(),
        h("div", { class: "duet-card-content", id: this.cardId },
          h("slot", null),
          this.hasFooter && (h("div", { class: "duet-card-footer" },
            h("slot", { name: "footer" })))))));
  }
  static get is() { return "duet-card"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["duet-card.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["duet-card.css"]
  }; }
  static get properties() { return {
    "accessibleLabel": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Adds accessible label for the card that is only shown for screen readers.\nTypically, this label text is used when the whole card is made clickable to\ncreate a label text for users who use assistive technology."
      },
      "attribute": "accessible-label",
      "reflect": false
    },
    "heading": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The content for the card heading. If empty, both heading and collapse\nfunctionality will be hidden."
      },
      "attribute": "heading",
      "reflect": false,
      "defaultValue": "\"\""
    },
    "secondaryHeading": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Additional content for the card heading. If empty, both heading and collapse\nfunctionality will be hidden."
      },
      "attribute": "secondary-heading",
      "reflect": false,
      "defaultValue": "\"\""
    },
    "variation": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "DuetCardVariation",
        "resolved": "\"default\" | \"info\" | \"plain\"",
        "references": {
          "DuetCardVariation": {
            "location": "local"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Style variation of the card."
      },
      "attribute": "variation",
      "reflect": false,
      "defaultValue": "\"default\""
    },
    "collapsible": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Makes the card expand and collapse when the collapse/expand arrow in the\nheading is clicked or tapped. This option only works together with the\nheading option, meaning that you also need to set the heading for this\nfunctionality to show up."
      },
      "attribute": "collapsible",
      "reflect": false,
      "defaultValue": "false"
    },
    "open": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "If the card is collapsible, this property controls whether the card is open or closed."
      },
      "attribute": "open",
      "reflect": true,
      "defaultValue": "true"
    },
    "headingLevel": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "DuetHeadingLevel",
        "resolved": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\"",
        "references": {
          "DuetHeadingLevel": {
            "location": "import",
            "path": "../../common-types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The actual heading level used for the heading in html markup. This setting\nexists for accessibility reasons. It doesn\u2019t change the style visually."
      },
      "attribute": "heading-level",
      "reflect": false,
      "defaultValue": "\"h2\""
    },
    "icon": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "DuetIconName",
        "resolved": "string",
        "references": {
          "DuetIconName": {
            "location": "import",
            "path": "../../common-types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Icon to display on the left side of heading. Example: \"form-location\""
      },
      "attribute": "icon",
      "reflect": false
    },
    "image": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Image to display in the card. The image aspect ratio can be anything as\nimages are resized to fit 100% width of the card. Example:\n\"https://cdn.duetds.com/api/assets/illustrations/placeholder-image.jpg\""
      },
      "attribute": "image",
      "reflect": false
    },
    "background": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "DuetColor",
        "resolved": "string",
        "references": {
          "DuetColor": {
            "location": "import",
            "path": "../../common-types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Custom color to be used for the card background, as a design token entered in\ncamelCase or kebab-case. Example: \"primary\"."
      },
      "attribute": "background",
      "reflect": false,
      "defaultValue": "\"gray-lightest\""
    },
    "padding": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "DuetCardPadding",
        "resolved": "\"large\" | \"medium\" | \"none\" | \"small\" | \"x-large\" | \"x-small\"",
        "references": {
          "DuetCardPadding": {
            "location": "local"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The padding for the card. Please note that the card padding values don\u2019t directly\ntranslate to similar space token names, but instead the card uses it\u2019s own\nderived defaults."
      },
      "attribute": "padding",
      "reflect": false,
      "defaultValue": "\"small\""
    },
    "margin": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "DuetMargin",
        "resolved": "\"auto\" | \"none\"",
        "references": {
          "DuetMargin": {
            "location": "import",
            "path": "../../common-types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Controls the margin of the component."
      },
      "attribute": "margin",
      "reflect": false,
      "defaultValue": "\"auto\""
    },
    "theme": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "DuetTheme",
        "resolved": "\"\" | \"default\" | \"turva\"",
        "references": {
          "DuetTheme": {
            "location": "import",
            "path": "../../common-types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Theme of the card."
      },
      "attribute": "theme",
      "reflect": false,
      "defaultValue": "\"\""
    },
    "url": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "A destination to link to, rendered in the href attribute of a link."
      },
      "attribute": "url",
      "reflect": false
    }
  }; }
  static get events() { return [{
      "method": "duetToggle",
      "name": "duetToggle",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Event emitted when opened/closed"
      },
      "complexType": {
        "original": "DuetCardToggleEvent",
        "resolved": "{ component: \"duet-card\"; originalEvent: MouseEvent | KeyboardEvent; }",
        "references": {
          "DuetCardToggleEvent": {
            "location": "local"
          }
        }
      }
    }]; }
  static get methods() { return {
    "setFocus": {
      "complexType": {
        "signature": "(options?: FocusOptions) => Promise<void>",
        "parameters": [{
            "tags": [],
            "text": ""
          }],
        "references": {
          "Promise": {
            "location": "global"
          },
          "FocusOptions": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Sets focus on the specified `duet-card`. Use this method instead of the global\n`card.focus()`.",
        "tags": []
      }
    }
  }; }
  static get elementRef() { return "element"; }
}
