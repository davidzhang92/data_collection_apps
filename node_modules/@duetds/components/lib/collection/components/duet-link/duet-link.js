/*!
 * Built with Duet Design System
 */
import newWindowIcon from "@duetds/icons/lib/assets/action-new-window-small";
import { Build, Component, Fragment, h, Host, Method, Prop } from "@stencil/core";
import { DuetStringsExternalDefaults } from "../../common-strings";
import { inheritGlobalTheme } from "../../common/themeable-component";
import { getLanguage, getLocaleString } from "../../utils/language-utils";
/**
 * @part duet-link - piercing selector for styling the link
 */
export class DuetLink {
  constructor() {
    /**
     * The currently active language. This setting changes the external link
     * accessible label to match the chosen language.
     * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing
     * @default "fi"
     */
    this.language = getLanguage();
    /**
     * Defaults for accessibleLabelExternal
     * @default {fi: "Avautuu uuteen ikkunaan",sv: "Öppnas i nytt fönster",en: "Opens in a new window"}
     */
    this.accessibleLabelExternalDefaults = DuetStringsExternalDefaults;
    /**
     * Adds accessible label for tooltip that is shown in external link (url & external have both been set)
     * @default {fi: "Avautuu uuteen ikkunaan",sv: "Öppnas i nytt fönster",en: "Opens in a new window"}
     */
    this.accessibleLabelExternal = getLocaleString(this.accessibleLabelExternalDefaults);
    /**
     * Theme of the button.
     */
    this.theme = "";
    /**
     * A destination to link to, rendered in the href attribute of a link.
     */
    this.url = "#";
    /**
     * Forces URL to open in a new browser tab. Used together with URL prop.
     */
    this.external = false;
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
  }
  /**
   * Sets focus on the specified `duet-link`. Use this method instead of the global
   * `link.focus()`.
   */
  async setFocus(options) {
    this.nativeLink.focus(options);
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    return (h(Host, null,
      h("a", { href: this.url, class: {
          "duet-link": true,
          "duet-link-is-external": this.external,
          "duet-theme-turva": this.theme === "turva",
        }, target: this.external ? "_blank" : "_self", "aria-label": this.accessibleLabel, id: this.identifier, ref: el => (this.nativeLink = el), part: "duet-link", rel: this.external ? "noopener" : undefined },
        h("slot", null),
        Build.isBrowser && this.external && (h(Fragment, null,
          h("duet-visually-hidden", null, this.accessibleLabelExternal),
          h("span", { class: "duet-link-external" },
            h("duet-icon", { icon: newWindowIcon.svg, size: "xx-small", margin: "none", color: "currentColor" })))))));
  }
  static get is() { return "duet-link"; }
  static get encapsulation() { return "shadow"; }
  static get delegatesFocus() { return true; }
  static get originalStyleUrls() { return {
    "$": ["duet-link.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["duet-link.css"]
  }; }
  static get properties() { return {
    "accessibleLabel": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Adds accessible label for the link that is only shown for screen readers.\nTypically, this label text replaces the visible text on the link for users\nwho use assistive technology."
      },
      "attribute": "accessible-label",
      "reflect": false
    },
    "language": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "DuetLanguage",
        "resolved": "\"en\" | \"fi\" | \"sv\"",
        "references": {
          "DuetLanguage": {
            "location": "import",
            "path": "../../common-types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [{
            "name": "deprecated",
            "text": "this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing"
          }, {
            "name": "default",
            "text": "\"fi\""
          }],
        "text": "The currently active language. This setting changes the external link\naccessible label to match the chosen language."
      },
      "attribute": "language",
      "reflect": false,
      "defaultValue": "getLanguage()"
    },
    "accessibleLabelExternalDefaults": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "DuetLangObject | string",
        "resolved": "DuetLangObject | string",
        "references": {
          "DuetLangObject": {
            "location": "import",
            "path": "../../utils/language-utils"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [{
            "name": "default",
            "text": "{fi: \"Avautuu uuteen ikkunaan\",sv: \"\u00D6ppnas i nytt f\u00F6nster\",en: \"Opens in a new window\"}"
          }],
        "text": "Defaults for accessibleLabelExternal"
      },
      "attribute": "accessible-label-external-default",
      "reflect": false,
      "defaultValue": "DuetStringsExternalDefaults"
    },
    "accessibleLabelExternal": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [{
            "name": "default",
            "text": "{fi: \"Avautuu uuteen ikkunaan\",sv: \"\u00D6ppnas i nytt f\u00F6nster\",en: \"Opens in a new window\"}"
          }],
        "text": "Adds accessible label for tooltip that is shown in external link (url & external have both been set)"
      },
      "attribute": "accessible-label-external",
      "reflect": false,
      "defaultValue": "getLocaleString(this.accessibleLabelExternalDefaults)"
    },
    "identifier": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Adds a unique identifier for the link. Please note that with this particular\ncomponent this id is added inside Shadow DOM. If you need an id on the html\nelement, use regular id attribute instead."
      },
      "attribute": "identifier",
      "reflect": false
    },
    "theme": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "DuetTheme",
        "resolved": "\"\" | \"default\" | \"turva\"",
        "references": {
          "DuetTheme": {
            "location": "import",
            "path": "../../common-types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Theme of the button."
      },
      "attribute": "theme",
      "reflect": false,
      "defaultValue": "\"\""
    },
    "url": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "A destination to link to, rendered in the href attribute of a link."
      },
      "attribute": "url",
      "reflect": true,
      "defaultValue": "\"#\""
    },
    "external": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Forces URL to open in a new browser tab. Used together with URL prop."
      },
      "attribute": "external",
      "reflect": false,
      "defaultValue": "false"
    }
  }; }
  static get methods() { return {
    "setFocus": {
      "complexType": {
        "signature": "(options?: FocusOptions) => Promise<void>",
        "parameters": [{
            "tags": [],
            "text": ""
          }],
        "references": {
          "Promise": {
            "location": "global"
          },
          "FocusOptions": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Sets focus on the specified `duet-link`. Use this method instead of the global\n`link.focus()`.",
        "tags": []
      }
    }
  }; }
}
