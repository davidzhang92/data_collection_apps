/*!
 * Built with Duet Design System
 */
import { Component, Element, h, Method, Prop } from "@stencil/core";
import { inheritGlobalTheme } from "../../common/themeable-component";
import { getLanguage, getLocaleString } from "../../utils/language-utils";
export class DuetNotification {
  constructor() {
    /**
     * The currently active language.
     * Used for announcing unread notifications to screen readers.
     * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing
     * @default "fi"
     */
    this.language = getLanguage();
    /**
     * Property to change accessibleLabelUnread defaults on the component.
     * normally you would handle these strings on an application level and override @accessibleLabelUnread when needed
     */
    this.accessibleLabelUnreadDefaults = {
      en: "Unread",
      fi: "Lukematon",
      sv: "Oläst",
    };
    /**
     * Adds accessible label for tooltip that is shown over unread counter
     * @default { en: "Unread", fi: "Lukematon", sv: "Oläst" }
     */
    this.accessibleLabelUnread = getLocaleString(this.accessibleLabelUnreadDefaults, this.language);
    /**
     * The url to open on notification click.
     */
    this.url = "#";
    /**
     * The date of the notification.
     */
    this.date = "";
    /**
     * Should the notification be visually highlighted?
     */
    this.highlight = false;
    /**
     * Should the link open in a new window?
     */
    this.external = false;
    /**
     * Theme of the notification.
     */
    this.theme = "";
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
  }
  /**
   * Move focus to the notification's link element.
   * Use this method instead of the native `focus()` method.
   * @param options
   */
  async setFocus(options) {
    this.linkElement.focus(options);
  }
  render() {
    return (h("div", { role: "listitem", class: {
        "duet-notification": true,
        "duet-notification-highlight": this.highlight,
        "duet-theme-turva": this.theme === "turva",
      } },
      h("a", { ref: element => (this.linkElement = element), href: this.url, target: this.external ? "_blank" : "_self" },
        h("div", { class: "duet-notification-container" },
          h("div", { class: "duet-notification-badge-container" }, this.highlight && (h("div", { class: "duet-notification-badge" },
            h("duet-visually-hidden", null,
              this.accessibleLabelUnread,
              ":")))),
          h("div", { class: "duet-notification-content" },
            h("slot", null)),
          h("div", { class: "duet-notification-date" }, this.date)))));
  }
  static get is() { return "duet-notification"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["duet-notification.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["duet-notification.css"]
  }; }
  static get properties() { return {
    "language": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "DuetLanguage",
        "resolved": "\"en\" | \"fi\" | \"sv\"",
        "references": {
          "DuetLanguage": {
            "location": "import",
            "path": "../../common-types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [{
            "name": "deprecated",
            "text": "this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing"
          }, {
            "name": "default",
            "text": "\"fi\""
          }],
        "text": "The currently active language.\nUsed for announcing unread notifications to screen readers."
      },
      "attribute": "language",
      "reflect": false,
      "defaultValue": "getLanguage()"
    },
    "accessibleLabelUnreadDefaults": {
      "type": "unknown",
      "mutable": false,
      "complexType": {
        "original": "DuetLangObject",
        "resolved": "DuetLangObject",
        "references": {
          "DuetLangObject": {
            "location": "import",
            "path": "../../utils/language-utils"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Property to change accessibleLabelUnread defaults on the component.\nnormally you would handle these strings on an application level and override @accessibleLabelUnread when needed"
      },
      "defaultValue": "{\n    en: \"Unread\",\n    fi: \"Lukematon\",\n    sv: \"Ol\u00E4st\",\n  }"
    },
    "accessibleLabelUnread": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [{
            "name": "default",
            "text": "{ en: \"Unread\", fi: \"Lukematon\", sv: \"Ol\u00E4st\" }"
          }],
        "text": "Adds accessible label for tooltip that is shown over unread counter"
      },
      "attribute": "accessible-label-unread",
      "reflect": false,
      "defaultValue": "getLocaleString(this.accessibleLabelUnreadDefaults, this.language)"
    },
    "url": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The url to open on notification click."
      },
      "attribute": "url",
      "reflect": false,
      "defaultValue": "\"#\""
    },
    "date": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The date of the notification."
      },
      "attribute": "date",
      "reflect": false,
      "defaultValue": "\"\""
    },
    "highlight": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Should the notification be visually highlighted?"
      },
      "attribute": "highlight",
      "reflect": false,
      "defaultValue": "false"
    },
    "external": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Should the link open in a new window?"
      },
      "attribute": "external",
      "reflect": false,
      "defaultValue": "false"
    },
    "theme": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "DuetTheme",
        "resolved": "\"\" | \"default\" | \"turva\"",
        "references": {
          "DuetTheme": {
            "location": "import",
            "path": "../../common-types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Theme of the notification."
      },
      "attribute": "theme",
      "reflect": false,
      "defaultValue": "\"\""
    }
  }; }
  static get methods() { return {
    "setFocus": {
      "complexType": {
        "signature": "(options?: FocusOptions) => Promise<void>",
        "parameters": [{
            "tags": [{
                "name": "param",
                "text": "options"
              }],
            "text": ""
          }],
        "references": {
          "Promise": {
            "location": "global"
          },
          "FocusOptions": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Move focus to the notification's link element.\nUse this method instead of the native `focus()` method.",
        "tags": [{
            "name": "param",
            "text": "options"
          }]
      }
    }
  }; }
  static get elementRef() { return "element"; }
}
