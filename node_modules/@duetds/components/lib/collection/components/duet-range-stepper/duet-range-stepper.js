/*!
 * Built with Duet Design System
 */
import { Component, Element, Event, h, Prop, Watch } from "@stencil/core";
import { inheritGlobalTheme } from "../../common/themeable-component";
import { createID } from "../../utils/create-id";
import { isArrowDownKey, isArrowKey, isArrowLeftKey, isArrowRightKey, isArrowUpKey, isMinusKey, isPlusKey, } from "../../utils/keyboard-utils";
import { getLocaleString } from "../../utils/language-utils";
/**
 * @part navigation-arrow - this part enables style overrides for the navigation-arrow
 * @part range-numbers - this part enables style overrides for the range-numbers
 */
export class DuetRangeStepper {
  constructor() {
    this.leftBn = createID("duetRangeStepper-left");
    this.rightBn = createID("duetRangeStepper-right");
    /**
     * Theme of the component.
     */
    this.theme = "";
    /**
     * Start value
     * @default 1
     */
    this.stepIndex = 1;
    /**
     * How big is the step
     * @default 50
     */
    this.stepSize = 50;
    /**
     * Total of
     * @default undefined
     */
    this.total = 1000;
    /**
     * Default range stepper labels
     */
    this.ariaLabelsDefaults = {
      en: {
        next_increment: "Next range increment",
        previous_increment: "Previous range increment",
        x_of_y: "{0}–{1} of {2}",
      },
      fi: {
        next_increment: "Seuraava välillä",
        previous_increment: "Edellinen välillä",
        x_of_y: "{0}–{1} / {2}",
      },
      sv: {
        next_increment: "Nästa intervall",
        previous_increment: "Föregående intervall",
        x_of_y: "{0}–{1} av {2}",
      },
    };
    /**
     * Default pagination labels
     */
    this.ariaLabels = getLocaleString(this.ariaLabelsDefaults);
    /**
     * Used to indicate which dom element with ID this element controls
     */
    this.ariaControls = "";
    this.handleClick = (e, direction) => {
      e.preventDefault();
      this.stepIndex += direction;
      this.clampStepIndex();
      this.handleStepClick(e);
    };
  }
  watchStepIndexStateHandler(newValue) {
    if (this.element.shadowRoot.childElementCount > 0) {
      if (newValue <= 1) {
        this.leftBnRef.setAttribute("disabled", "");
        this.rightBnRef.focus();
      }
      else {
        this.leftBnRef.removeAttribute("disabled");
      }
      if (newValue >= this.total / this.stepSize) {
        this.rightBnRef.setAttribute("disabled", "");
        this.leftBnRef.focus();
      }
      else {
        this.rightBnRef.removeAttribute("disabled");
      }
    }
  }
  watchStepSizeStateHandler(newValue, oldValue) {
    if (newValue !== oldValue) {
      if (this.stepIndex * newValue > this.total) {
        this.stepIndex = Math.ceil(this.total / newValue);
      }
    }
  }
  handleStepClick(e) {
    const from = this.stepIndex * this.stepSize - this.stepSize;
    this.duetRangeStepUpdate.emit({
      originalEvent: e,
      component: "duet-range-stepper",
      from: from,
      to: this.getTo(),
      index: this.stepIndex,
    });
  }
  componentWillLoad() {
    inheritGlobalTheme(this);
    this.clampStepIndex();
  }
  componentDidLoad() {
    this.watchStepIndexStateHandler(this.stepIndex);
  }
  clampStepIndex() {
    if (this.stepIndex < 1) {
      this.stepIndex = 1;
    }
    else if (this.stepIndex * this.stepSize > this.total) {
      this.stepIndex = Math.ceil(this.total / this.stepSize);
    }
  }
  getTo() {
    const to = this.stepIndex * this.stepSize;
    const result = to > this.total ? this.total : to;
    return result;
  }
  generateStepSize() {
    // this function uses this.stepIndex and this.range to generate a range of number like 1-100
    // this is used to generate the step size
    let start = Math.floor((this.stepIndex - 1) * this.stepSize);
    //easy fix for starting position
    if (start === 0) {
      start = 1;
    }
    const end = Math.floor(this.stepIndex * this.stepSize);
    return this.ariaLabels.x_of_y
      .replace("{0}", String(start))
      .replace("{1}", String(end))
      .replace("{2}", String(this.total));
  }
  //handle a11y keyboard navigation events
  async onKeyboardDown(e) {
    // handle a11y based keyboard navigation for left/right/up/down
    let next = this.stepIndex;
    let dir = 1;
    if (isArrowLeftKey(e) || isArrowUpKey(e) || isMinusKey(e)) {
      next--;
      dir = -1;
      this.leftBnRef.focus();
    }
    if (isArrowRightKey(e) || isArrowDownKey(e) || isPlusKey(e)) {
      next++;
      dir = 1;
    }
    if (isArrowKey(e)) {
      if (next > 0 && next * this.stepSize <= this.total) {
        this.handleClick(e, dir);
      }
      else {
        //await this.stepperRef.focus()
      }
    }
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    return (h("div", { class: {
        "duet-range-stepper": true,
        "duet-theme-turva": this.theme === "turva",
      }, onKeyDown: e => this.onKeyboardDown(e), "aria-controls": this.ariaControls },
      h("span", { class: "duet-range-step-counter", part: "range-numbers" }, this.generateStepSize()),
      h("duet-action-button", { class: "duet-range-step-button duet-range-step-minus", onClick: e => this.handleClick(e, -1), id: this.leftBn, "aria-label": this.ariaLabels.previous_increment, ref: el => (this.leftBnRef = el), part: "navigation-arrow", iconName: "action-arrow-left-small" }),
      h("duet-action-button", { class: "duet-range-step-button duet-range-step-plus", onClick: e => this.handleClick(e, 1), "aria-label": this.ariaLabels.next_increment, id: this.rightBn, ref: el => (this.rightBnRef = el), part: "navigation-arrow", iconName: "action-arrow-right-small" })));
  }
  static get is() { return "duet-range-stepper"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["duet-range-stepper.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["duet-range-stepper.css"]
  }; }
  static get properties() { return {
    "theme": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "DuetTheme",
        "resolved": "\"\" | \"default\" | \"turva\"",
        "references": {
          "DuetTheme": {
            "location": "import",
            "path": "../../common-types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Theme of the component."
      },
      "attribute": "theme",
      "reflect": false,
      "defaultValue": "\"\""
    },
    "stepIndex": {
      "type": "number",
      "mutable": true,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [{
            "name": "default",
            "text": "1"
          }],
        "text": "Start value"
      },
      "attribute": "step-index",
      "reflect": false,
      "defaultValue": "1"
    },
    "stepSize": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [{
            "name": "default",
            "text": "50"
          }],
        "text": "How big is the step"
      },
      "attribute": "step-size",
      "reflect": false,
      "defaultValue": "50"
    },
    "total": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [{
            "name": "default",
            "text": "undefined"
          }],
        "text": "Total of"
      },
      "attribute": "total",
      "reflect": false,
      "defaultValue": "1000"
    },
    "ariaLabelsDefaults": {
      "type": "unknown",
      "mutable": false,
      "complexType": {
        "original": "DuetLangObject",
        "resolved": "DuetLangObject",
        "references": {
          "DuetLangObject": {
            "location": "import",
            "path": "../../utils/language-utils"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Default range stepper labels"
      },
      "defaultValue": "{\n    en: {\n      next_increment: \"Next range increment\",\n      previous_increment: \"Previous range increment\",\n      x_of_y: \"{0}\u2013{1} of {2}\",\n    },\n    fi: {\n      next_increment: \"Seuraava v\u00E4lill\u00E4\",\n      previous_increment: \"Edellinen v\u00E4lill\u00E4\",\n      x_of_y: \"{0}\u2013{1} / {2}\",\n    },\n    sv: {\n      next_increment: \"N\u00E4sta intervall\",\n      previous_increment: \"F\u00F6reg\u00E5ende intervall\",\n      x_of_y: \"{0}\u2013{1} av {2}\",\n    },\n  }"
    },
    "ariaLabels": {
      "type": "unknown",
      "mutable": false,
      "complexType": {
        "original": "Record<string, string>",
        "resolved": "{ [x: string]: string; }",
        "references": {
          "Record": {
            "location": "global"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Default pagination labels"
      },
      "defaultValue": "getLocaleString(\n    this.ariaLabelsDefaults\n  )"
    },
    "ariaControls": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Used to indicate which dom element with ID this element controls"
      },
      "attribute": "accessible-controls",
      "reflect": false,
      "defaultValue": "\"\""
    }
  }; }
  static get events() { return [{
      "method": "duetRangeStepUpdate",
      "name": "duetRangeStepUpdate",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Event emitted when the step heading is clicked."
      },
      "complexType": {
        "original": "DuetRangeStepperUpdateEvent",
        "resolved": "{ originalEvent: MouseEvent | KeyboardEvent; component: \"duet-range-stepper\"; from: number; to: number; index: number; }",
        "references": {
          "DuetRangeStepperUpdateEvent": {
            "location": "local"
          }
        }
      }
    }]; }
  static get elementRef() { return "element"; }
  static get watchers() { return [{
      "propName": "stepIndex",
      "methodName": "watchStepIndexStateHandler"
    }, {
      "propName": "stepSize",
      "methodName": "watchStepSizeStateHandler"
    }]; }
}
