/*!
 * Built with Duet Design System
 */
import { Component, Element, h, Prop, Watch } from "@stencil/core";
import { inheritGlobalTheme } from "../../common/themeable-component";
import { watchForOptions } from "../../utils/watch-options";
export class DuetList {
  constructor() {
    /**
     * Theme of the list.
     */
    this.theme = "";
    /**
     * Controls the margin of the component.
     */
    this.margin = "auto";
    /**
     * Controls the padding of the component.
     */
    this.padding = "auto";
    /**
     * Adjusts the alignment of the list items on mobile breakpoint.
     */
    this.mobile = "left";
    /**
     * Switch the breakpoint used to trigger the content stacking. These match to
     * similar media query tokens: $media-query-small and $media-query-large.
     */
    this.breakpoint = "small";
    /**
     * Style variation of the list.
     */
    this.variation = "default";
    /**
     * Set the column width of the first column in percentages.
     */
    this.labelWidth = "30";
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
  }
  async connectedCallback() {
    const el = this.element;
    this.mutationO = watchForOptions(el, "duet-list-item", () => {
      this.updateListItems();
    });
    this.updateListItems();
  }
  disconnectedCallback() {
    if (this.mutationO) {
      this.mutationO.disconnect();
      this.mutationO = undefined;
    }
  }
  /**
   * Local methods
   */
  toggleClass(elem, className, force) {
    if (force) {
      elem.classList.add(className);
    }
    else {
      elem.classList.remove(className);
    }
  }
  async updateListItems() {
    const items = Array.from(this.element.querySelectorAll("duet-list-item"));
    items.forEach(item => {
      // Use classes to apply styles for SSR compatibility
      item.classList.add(`duet-list-width-${this.labelWidth}`);
      item.classList.add(`duet-list-variation-${this.variation}`);
      // If padding is set to 0
      this.toggleClass(item, "duet-p-0", this.padding === "none");
      // If text is centered for mobile
      this.toggleClass(item, "duet-list-mobile-center", this.mobile === "center");
      // If breakpoint is adjusted
      this.toggleClass(item, "duet-list-breakpoint-large", this.breakpoint === "large");
      // Create zebra striping if striped variation is used
      this.toggleClass(item, "duet-list-striped", this.variation === "striped");
      // Finally apply turva theme if necessary
      this.toggleClass(item, "duet-theme-turva", this.theme === "turva");
    });
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    return (h("dl", { class: { "duet-list-component": true, "duet-m-0": this.margin === "none" } },
      h("slot", null)));
  }
  static get is() { return "duet-list"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["duet-list.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["duet-list.css"]
  }; }
  static get properties() { return {
    "theme": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "DuetTheme",
        "resolved": "\"\" | \"default\" | \"turva\"",
        "references": {
          "DuetTheme": {
            "location": "import",
            "path": "../../common-types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Theme of the list."
      },
      "attribute": "theme",
      "reflect": false,
      "defaultValue": "\"\""
    },
    "margin": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "DuetMargin",
        "resolved": "\"auto\" | \"none\"",
        "references": {
          "DuetMargin": {
            "location": "import",
            "path": "../../common-types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Controls the margin of the component."
      },
      "attribute": "margin",
      "reflect": false,
      "defaultValue": "\"auto\""
    },
    "padding": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "DuetPadding",
        "resolved": "\"auto\" | \"none\"",
        "references": {
          "DuetPadding": {
            "location": "import",
            "path": "../../common-types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Controls the padding of the component."
      },
      "attribute": "padding",
      "reflect": false,
      "defaultValue": "\"auto\""
    },
    "mobile": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "DuetListMobileAlignment",
        "resolved": "\"center\" | \"left\"",
        "references": {
          "DuetListMobileAlignment": {
            "location": "local"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Adjusts the alignment of the list items on mobile breakpoint."
      },
      "attribute": "mobile",
      "reflect": false,
      "defaultValue": "\"left\""
    },
    "breakpoint": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "DuetListBreakpoint",
        "resolved": "\"large\" | \"small\"",
        "references": {
          "DuetListBreakpoint": {
            "location": "local"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Switch the breakpoint used to trigger the content stacking. These match to\nsimilar media query tokens: $media-query-small and $media-query-large."
      },
      "attribute": "breakpoint",
      "reflect": false,
      "defaultValue": "\"small\""
    },
    "variation": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "DuetListVariation",
        "resolved": "\"default\" | \"striped\"",
        "references": {
          "DuetListVariation": {
            "location": "local"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Style variation of the list."
      },
      "attribute": "variation",
      "reflect": false,
      "defaultValue": "\"default\""
    },
    "labelWidth": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "DuetListLabelWidth",
        "resolved": "\"30\" | \"50\" | \"70\"",
        "references": {
          "DuetListLabelWidth": {
            "location": "local"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Set the column width of the first column in percentages."
      },
      "attribute": "label-width",
      "reflect": false,
      "defaultValue": "\"30\""
    }
  }; }
  static get elementRef() { return "element"; }
  static get watchers() { return [{
      "propName": "theme",
      "methodName": "updateListItems"
    }, {
      "propName": "padding",
      "methodName": "updateListItems"
    }, {
      "propName": "mobile",
      "methodName": "updateListItems"
    }, {
      "propName": "breakpoint",
      "methodName": "updateListItems"
    }, {
      "propName": "variation",
      "methodName": "updateListItems"
    }, {
      "propName": "labelWidth",
      "methodName": "updateListItems"
    }]; }
}
