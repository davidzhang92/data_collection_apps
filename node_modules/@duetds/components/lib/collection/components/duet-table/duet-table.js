/*!
 * Built with Duet Design System
 */
import { mediaQueryLarge, mediaQueryMedium, mediaQuerySmall, mediaQueryXLarge, mediaQueryXxLarge, mediaQueryXxxLarge, sizeHeader, sizeNavigation, } from "@duetds/tokens";
import { Build, Component, Element, h, Host, Prop, State } from "@stencil/core";
import { inheritGlobalTheme } from "../../common/themeable-component";
import { debounce } from "../../utils/js-utils";
// remove wrapping speech marks.
// media query tokens are wrapped in speech marks,
// which need to be removed before use with matchMedia.
const unwrap = (str) => str.substring(1, str.length - 1);
const breakpointToToken = {
  none: "all",
  "none-scrollable": "all",
  small: unwrap(mediaQuerySmall),
  medium: unwrap(mediaQueryMedium),
  large: unwrap(mediaQueryLarge),
  "x-large": unwrap(mediaQueryXLarge),
  "xx-large": unwrap(mediaQueryXxLarge),
  "xxx-large": unwrap(mediaQueryXxxLarge),
};
const stickyTopValues = {
  none: 0,
  "with-links": parseFloat(sizeNavigation) * 16,
  "without-links": parseFloat(sizeHeader) * 16,
};
/**
 * @slot dot-menu- If this slot is populated - the content will be displayed together with a ... type menu to the far right in the tsble header
 * @slot header - Header slot for the table
 * @slot footer - Footer slot for the table
 */
export class DuetTable {
  constructor() {
    /**
     * Tracks whether the breakpoint is matched. This is set to true by default so that JavaScript disabled in SSR mode we get accessible table data first.
     */
    this.matchesBreakpoint = true;
    /**
     * Controls the margin of the component.
     */
    this.margin = "auto";
    /**
     * Style variation of the table.
     */
    this.variation = "striped";
    /**
     * Controls whether the table has a sticky header.
     * Sticky headers are not compatible with breakpoint="none-scrollable".
     */
    this.sticky = false;
    /**
     * Adjust the distance from top of the viewport (in pixels) when the
     * table header becomes sticky.
     */
    this.stickyDistance = "with-links";
    /**
     * By default the table is responsive - it will be flattened at narrow viewport widths.
     * This prop controls the breakpoint at which the table should be rendered as a _regular_ table.
     * Set to "none" to disable the responsive functionality.
     * Set to "none-scrollable" to disable responsive functionality _and_ allow horizontal scrolling -
     * this is useful for comparison tables where it's important to maintain column and row layout.
     */
    this.breakpoint = "small";
    this.handleMediaQueryChange = (mq) => {
      this.matchesBreakpoint = mq.matches;
    };
  }
  connectedCallback() {
    if (Build.isServer) {
      return;
    }
    this.mq = matchMedia(breakpointToToken[this.breakpoint]);
    this.mq.addEventListener("change", debounce(this.handleMediaQueryChange, 50));
    this.handleMediaQueryChange(this.mq);
    this.observer = new MutationObserver(() => debounce(this.copyHeadingsToCells(), 50));
    this.observer.observe(this.element, {
      childList: true,
      subtree: true,
    });
  }
  componentWillLoad() {
    inheritGlobalTheme(this);
    this.copyHeadingsToCells();
    if (this.sticky && this.breakpoint === "none-scrollable") {
      console.warn(`[DUET WARNING]: sticky and breakpoint="none-scrollable" are incompatible. Scrollable takes precedence`);
    }
    if (this.sticky) {
      const stickyTop = stickyTopValues[this.stickyDistance];
      const headingElements = this.element.querySelectorAll("thead th");
      headingElements.forEach(th => (th.style.top = `${stickyTop}px`));
    }
  }
  componentDidLoad() {
    if (Build.isServer) {
      return;
    }
    // this clears all pending mutations,
    // that way we avoid dealing with any initial changes
    // and only get genuine mutations as rows are added/removed
    this.observer ? this.observer.takeRecords() : null;
  }
  disconnectedCallback() {
    if (Build.isServer) {
      return;
    }
    this.observer.disconnect();
    this.observer = null;
    this.mq.removeListener(this.handleMediaQueryChange);
    this.mq = null;
    this.matchesBreakpoint = true;
  }
  /**
   * Local methods.
   */
  copyHeadingsToCells() {
    const headingElements = this.element.querySelectorAll("thead th");
    const rowElements = this.element.querySelectorAll("tbody tr");
    const headings = Array.from(headingElements).map(th => th.textContent.trim());
    rowElements.forEach(tr => {
      tr.querySelectorAll("td").forEach((td, i) => {
        if (headings[i]) {
          td.dataset.heading = headings[i];
        }
      });
    });
  }
  render() {
    return (h(Host, { class: {
        [`duet-table-${this.variation}`]: true,
        "duet-table-flattened": !this.matchesBreakpoint,
        // sticky only valid when in regular table layout
        "duet-table-sticky": this.matchesBreakpoint && this.sticky,
        "duet-table-scrollable": this.breakpoint === "none-scrollable",
        "duet-m-0": this.margin === "none",
        "duet-theme-turva": this.theme === "turva",
      } },
      h("slot", null)));
  }
  static get is() { return "duet-table"; }
  static get originalStyleUrls() { return {
    "$": ["duet-table.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["duet-table.css"]
  }; }
  static get properties() { return {
    "theme": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "DuetTheme",
        "resolved": "\"\" | \"default\" | \"turva\"",
        "references": {
          "DuetTheme": {
            "location": "import",
            "path": "../../common-types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Theme of the table."
      },
      "attribute": "theme",
      "reflect": false
    },
    "margin": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "DuetMargin",
        "resolved": "\"auto\" | \"none\"",
        "references": {
          "DuetMargin": {
            "location": "import",
            "path": "../../common-types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Controls the margin of the component."
      },
      "attribute": "margin",
      "reflect": false,
      "defaultValue": "\"auto\""
    },
    "variation": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "DuetTableVariant",
        "resolved": "\"fixed\" | \"plain\" | \"striped\"",
        "references": {
          "DuetTableVariant": {
            "location": "local"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Style variation of the table."
      },
      "attribute": "variation",
      "reflect": false,
      "defaultValue": "\"striped\""
    },
    "sticky": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Controls whether the table has a sticky header.\nSticky headers are not compatible with breakpoint=\"none-scrollable\"."
      },
      "attribute": "sticky",
      "reflect": false,
      "defaultValue": "false"
    },
    "stickyDistance": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "DuetTableStickyDistance",
        "resolved": "\"none\" | \"with-links\" | \"without-links\"",
        "references": {
          "DuetTableStickyDistance": {
            "location": "local"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Adjust the distance from top of the viewport (in pixels) when the\ntable header becomes sticky."
      },
      "attribute": "sticky-distance",
      "reflect": false,
      "defaultValue": "\"with-links\""
    },
    "breakpoint": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "DuetTableBreakpoint",
        "resolved": "\"large\" | \"medium\" | \"none\" | \"none-scrollable\" | \"small\" | \"x-large\" | \"xx-large\" | \"xxx-large\"",
        "references": {
          "DuetTableBreakpoint": {
            "location": "local"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "By default the table is responsive - it will be flattened at narrow viewport widths.\nThis prop controls the breakpoint at which the table should be rendered as a _regular_ table.\nSet to \"none\" to disable the responsive functionality.\nSet to \"none-scrollable\" to disable responsive functionality _and_ allow horizontal scrolling -\nthis is useful for comparison tables where it's important to maintain column and row layout."
      },
      "attribute": "breakpoint",
      "reflect": false,
      "defaultValue": "\"small\""
    }
  }; }
  static get states() { return {
    "matchesBreakpoint": {}
  }; }
  static get elementRef() { return "element"; }
}
