import { EventEmitter } from "../../stencil-public-runtime";
import { DuetHeadingLevel, DuetMargin, DuetTheme } from "../../common-types";
import { ThemeableComponent } from "../../common/themeable-component";
export declare type DuetCollapsibleWeight = "semibold" | "normal";
export declare type DuetCollapsibleHeadingFontSize = "x-small" | "small" | "medium" | "large" | "x-large" | "xx-large" | "xxx-large" | "xxxx-large" | undefined;
export declare type DuetCollapsibleToggleEvent = {
  component: "duet-collapsible";
  originalEvent: KeyboardEvent | MouseEvent;
};
/**
 * @part duet-collapsible-heading-content - piercing selector for styling the heading content
 * @part duet-collapsible-content - piercing selector for styling the content
 */
export declare class DuetCollapsible implements ThemeableComponent {
  /**
   * Own Properties
   */
  private nativeButton?;
  private id;
  /**
   * Reference to host HTML element.
   */
  element: HTMLElement;
  /**
   * Theme of the collapsible.
   */
  theme: DuetTheme;
  /**
   * The content for the collapsible heading.
   */
  heading: string;
  /**
   * The font weight of the heading
   */
  headingWeight: DuetCollapsibleWeight;
  /**
   * Custom headingSize to be used for font size of heading, as a design token entered
   * in kebab-case x-small -> font-size-x-small.
   * Example:
   * # 12px (0.75rem)  ------  +2px   (x-small)
   * # 14px (0.875rem) ------  +2px   (small)
   * # 16px (1rem)     ------  +2px   (medium)
   * # 20px (1.25rem)  ------  +4px   (large)
   * # 24px (1.5rem)   ------  +4px   (x-large)
   * # 36px (2.25rem)  ------  +12px  (xx-large)
   * # 48px (3rem)     ------  +12px  (xxx-large)
   * # 72px (4.5rem)   ------  +24px  (xxxx-large)
   */
  headingSize: DuetCollapsibleHeadingFontSize;
  /**
   * The actual heading level used for the heading in html markup. This setting
   * exists for accessibility reasons. It doesnâ€™t change the style visually.
   * only variations of h1-h6 area accepted
   */
  headingLevel: DuetHeadingLevel | undefined;
  /**
   * Controls the margin of the component.
   */
  margin: DuetMargin;
  /**
   * Is the component expanded or collapsed.
   */
  open: boolean;
  /**
   * Event emitted when opened/closed
   */
  duetToggle: EventEmitter<DuetCollapsibleToggleEvent>;
  /**
   * Component lifecycle events.
   */
  componentWillLoad(): void;
  private handleKeyDown;
  private getFontSizeFromTokens;
  private getEquivalentIconSize;
  private handleClick;
  /**
   * Sets focus on the specified `duet-collapsible`. Use this method instead of the global
   * `collapsible.focus()`.
   */
  setFocus(options?: FocusOptions): Promise<void>;
  /**
   * render() function
   * Always the last one in the class.
   */
  render(): any;
}
