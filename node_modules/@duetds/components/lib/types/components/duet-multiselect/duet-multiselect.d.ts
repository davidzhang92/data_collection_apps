import { EventEmitter } from "../../stencil-public-runtime";
import { DuetMargin, DuetTheme, DuetTooltipDirection } from "../../common-types";
import { ThemeableComponent } from "../../common/themeable-component";
export declare type DuetMultiselectItem = {
  label: string;
  value: string;
  disabled?: boolean;
};
export declare type DuetMultiselectEvent = {
  originalEvent?: Event;
  component: "duet-multiselect";
  value: DuetMultiselectItem[];
};
export declare class DuetMultiselect implements ThemeableComponent {
  /**
   * Own Properties
   */
  private errorId;
  private labelId;
  private topCaptionId;
  private isCaptionVisible;
  private selectedLangObject;
  /**
   * Reference to host HTML element.
   */
  element: HTMLElement;
  private multiselectElement;
  /**
   * State() variables
   * Inlined decorator, alphabetical order.
   */
  processedItems: DuetMultiselectItem[];
  checkboxesVisible: boolean;
  activeDescendant: string;
  /**
   * Controls the margin of the component.
   */
  margin: DuetMargin;
  /**
   * Display the select in error state along with an error message.
   */
  error: string;
  /**
   * Expands the input to fill 100% of the container width.
   */
  expand: boolean;
  /**
   * Value of multiselect
   */
  value: DuetMultiselectItem[];
  /**
   * Theme of the select.
   */
  theme: DuetTheme;
  /**
   * Visually hide the label, but still show it to screen readers.
   */
  labelHidden: boolean;
  /**
   * Adds a unique identifier for the select.
   */
  identifier: string;
  /**
   * Hint text to display.
   */
  placeholder: string;
  /**
   * Caption (underneath label) that can be set as a way of adding extra information
   */
  caption: string;
  /**
   * An array of items to choose from
   */
  items: string | DuetMultiselectItem[];
  /**
   * Makes the select component disabled. This prevents users from being able
   * to interact with the select, and conveys its inactive state to assistive
   * technologies.
   */
  disabled: boolean;
  /**
   * Label for the select.
   */
  label: string;
  /**
   * Tooltip to display next to the label of the input.
   */
  tooltip: string;
  /**
   * With direction setting you can force the tooltip to always open towards left
   * or right instead of automatically determining the direction.
   */
  tooltipDirection: DuetTooltipDirection;
  /**
   * Callback for when the value changed.
   */
  duetChange: EventEmitter<DuetMultiselectEvent>;
  /**
   * Emitted when the select has focus.
   */
  duetFocus: EventEmitter<DuetMultiselectEvent>;
  /**
   * Emitted when the select loses focus.
   */
  duetBlur: EventEmitter<DuetMultiselectEvent>;
  /**
   * Component lifecycle events.
   */
  componentWillLoad(): void;
  /**
   * Component event handling.
   */
  private onClick;
  private onChange;
  private onBlur;
  private onFocus;
  private onMultiselectKeyDown;
  private onMultiselectInputKeyDown;
  private onCheckboxKeyDown;
  private toggleCheckboxes;
  private toggleCheckbox;
  /**
   * Sets focus on the specified `duet-multiselect`. Use this method instead of the global
   * `multiselect.focus()`.
   */
  setFocus(options?: FocusOptions): Promise<void>;
  /**
   * Local methods.
   */
  private refresh;
  private getOptionIdentifier;
  /**
   * render() function
   * Always the last one in the class.
   */
  render(): any;
}
