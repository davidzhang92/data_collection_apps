/*!
 * Built with Duet Design System
 */
import { p as proxyCustomElement, H, h } from './p-df05a117.js';
import { i as inheritGlobalTheme } from './p-4ebf1618.js';
import { g as getColorByName } from './p-86faf728.js';

const duetParagraphCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;position:relative;display:block;width:100%}.duet-paragraph{margin-bottom:16px !important;display:block;width:100%;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:1rem;font-style:normal;font-weight:400;font-variant-numeric:tabular-nums;-webkit-hyphens:auto;hyphens:auto;line-height:1.5;color:#00294d}.duet-paragraph.duet-p-0{padding:0 !important}.duet-paragraph.duet-m-0{margin:0 !important}.duet-paragraph.duet-theme-turva{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:#171c3a}.duet-paragraph.duet-paragraph-small{font-size:0.875rem}.duet-paragraph.duet-paragraph-semi-bold{font-weight:600}.duet-paragraph.duet-paragraph-bold{font-weight:700}.duet-paragraph.duet-m-0{margin:0 !important}.duet-paragraph.intro{font-size:2.7vw;margin-bottom:28px !important;-webkit-hyphens:inherit;hyphens:inherit}@media (max-width: 37.037037037rem){.duet-paragraph.intro{font-size:1rem}}@media (min-width: 46.2962962963rem){.duet-paragraph.intro{font-size:1.25rem}}.duet-paragraph.intro.duet-m-0{margin:0 !important}::slotted(a){font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-style:normal;font-weight:400;color:#0077b3;text-decoration:underline;transition:300ms ease}::slotted(a).duet-theme-turva{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:#c60c30}::slotted(a):hover{color:#004d80;text-decoration:none}::slotted(a):hover.duet-theme-turva{color:#940925}::slotted(a):active{opacity:0.75;transition:none}";

const DuetParagraph = /*@__PURE__*/ proxyCustomElement(class extends H {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    /**
     * Theme of the paragraph.
     */
    this.theme = "";
    /**
     * Controls the margin of the component.
     */
    this.margin = "auto";
    /**
     * Controls the size of the paragraph.
     */
    this.size = "medium";
    /**
     * Controls the Font-Weight of the paragraph.
     */
    this.weight = undefined;
    /**
     * Style variation of the paragraph.
     */
    this.variation = "default";
    /**
     * Custom color to be used for text, as a design token entered in camelCase or kebab-case.
     * Example: "color-primary".
     */
    this.color = "";
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    const color = getColorByName(this.color);
    return (h("p", { class: {
        "duet-paragraph": true,
        "duet-paragraph-small": this.size === "small",
        "duet-paragraph-semi-bold": this.weight === "semi-bold",
        "duet-paragraph-bold": this.weight === "bold",
        "duet-m-0": this.margin === "none",
        [this.variation]: true,
        "duet-theme-turva": this.theme === "turva",
      }, style: { color }, part: "duet-paragraph" }, h("slot", null)));
  }
  get element() { return this; }
  static get style() { return duetParagraphCss; }
}, [1, "duet-paragraph", {
    "theme": [1025],
    "margin": [1],
    "size": [1],
    "weight": [1],
    "variation": [1],
    "color": [1]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["duet-paragraph"];
  components.forEach(tagName => { switch (tagName) {
    case "duet-paragraph":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DuetParagraph);
      }
      break;
  } });
}

export { DuetParagraph as D, defineCustomElement as d };
