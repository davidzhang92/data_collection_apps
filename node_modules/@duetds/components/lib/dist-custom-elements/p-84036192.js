/*!
 * Built with Duet Design System
 */
import { p as proxyCustomElement, H, h, F as Fragment, b as Host } from './p-df05a117.js';
import { a as actionNewWindowSmall } from './p-f11208c3.js';
import { D as DuetStringsExternalDefaults } from './p-76f00bd5.js';
import { i as inheritGlobalTheme } from './p-4ebf1618.js';
import { a as getLanguage, g as getLocaleString } from './p-ede854e1.js';
import { d as defineCustomElement$2 } from './p-983633e4.js';
import { d as defineCustomElement$1 } from './p-14799264.js';

const duetLinkCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;display:inline}.duet-link{display:inline;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-style:normal;font-weight:400;color:#0077b3;text-decoration:underline;border-radius:4px;transition:300ms ease}.duet-link:focus{outline:0;box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px #0077b3}.duet-theme-turva .duet-link:focus,.duet-link:focus.duet-theme-turva{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px #171c3a}.duet-link.duet-theme-turva{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:#c60c30}.duet-link:hover{color:#004d80;text-decoration:none}.duet-link:hover.duet-theme-turva{color:#940925}.duet-link:active{opacity:0.75;transition:none}.duet-link-external{margin-left:4px}";

const DuetLink = /*@__PURE__*/ proxyCustomElement(class extends H {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    /**
     * The currently active language. This setting changes the external link
     * accessible label to match the chosen language.
     * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing
     * @default "fi"
     */
    this.language = getLanguage();
    /**
     * Defaults for accessibleLabelExternal
     * @default {fi: "Avautuu uuteen ikkunaan",sv: "Öppnas i nytt fönster",en: "Opens in a new window"}
     */
    this.accessibleLabelExternalDefaults = DuetStringsExternalDefaults;
    /**
     * Adds accessible label for tooltip that is shown in external link (url & external have both been set)
     * @default {fi: "Avautuu uuteen ikkunaan",sv: "Öppnas i nytt fönster",en: "Opens in a new window"}
     */
    this.accessibleLabelExternal = getLocaleString(this.accessibleLabelExternalDefaults);
    /**
     * Theme of the button.
     */
    this.theme = "";
    /**
     * A destination to link to, rendered in the href attribute of a link.
     */
    this.url = "#";
    /**
     * Forces URL to open in a new browser tab. Used together with URL prop.
     */
    this.external = false;
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
  }
  /**
   * Sets focus on the specified `duet-link`. Use this method instead of the global
   * `link.focus()`.
   */
  async setFocus(options) {
    this.nativeLink.focus(options);
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    return (h(Host, null, h("a", { href: this.url, class: {
        "duet-link": true,
        "duet-link-is-external": this.external,
        "duet-theme-turva": this.theme === "turva",
      }, target: this.external ? "_blank" : "_self", "aria-label": this.accessibleLabel, id: this.identifier, ref: el => (this.nativeLink = el), part: "duet-link", rel: this.external ? "noopener" : undefined }, h("slot", null), this.external && (h(Fragment, null, h("duet-visually-hidden", null, this.accessibleLabelExternal), h("span", { class: "duet-link-external" }, h("duet-icon", { icon: actionNewWindowSmall.svg, size: "xx-small", margin: "none", color: "currentColor" })))))));
  }
  static get delegatesFocus() { return true; }
  static get style() { return duetLinkCss; }
}, [17, "duet-link", {
    "accessibleLabel": [1, "accessible-label"],
    "language": [1025],
    "accessibleLabelExternalDefaults": [1, "accessible-label-external-default"],
    "accessibleLabelExternal": [1, "accessible-label-external"],
    "identifier": [1],
    "theme": [1025],
    "url": [513],
    "external": [4],
    "setFocus": [64]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["duet-link", "duet-icon", "duet-visually-hidden"];
  components.forEach(tagName => { switch (tagName) {
    case "duet-link":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DuetLink);
      }
      break;
    case "duet-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
    case "duet-visually-hidden":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}

export { DuetLink as D, defineCustomElement as d };
