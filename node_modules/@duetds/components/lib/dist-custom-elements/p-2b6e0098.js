/*!
 * Built with Duet Design System
 */
import { p as proxyCustomElement, H, h } from './p-df05a117.js';
import { i as inheritGlobalTheme } from './p-4ebf1618.js';
import { w as watchForOptions } from './p-12721178.js';

const duetListCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;display:block;width:100%}.duet-list-component{margin-bottom:16px !important;width:100%}.duet-list-component.duet-p-0{padding:0 !important}.duet-list-component.duet-m-0{margin:0 !important}";

const DuetList = /*@__PURE__*/ proxyCustomElement(class extends H {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    /**
     * Theme of the list.
     */
    this.theme = "";
    /**
     * Controls the margin of the component.
     */
    this.margin = "auto";
    /**
     * Controls the padding of the component.
     */
    this.padding = "auto";
    /**
     * Adjusts the alignment of the list items on mobile breakpoint.
     */
    this.mobile = "left";
    /**
     * Switch the breakpoint used to trigger the content stacking. These match to
     * similar media query tokens: $media-query-small and $media-query-large.
     */
    this.breakpoint = "small";
    /**
     * Style variation of the list.
     */
    this.variation = "default";
    /**
     * Set the column width of the first column in percentages.
     */
    this.labelWidth = "30";
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
  }
  async connectedCallback() {
    const el = this.element;
    this.mutationO = watchForOptions(el, "duet-list-item", () => {
      this.updateListItems();
    });
    this.updateListItems();
  }
  disconnectedCallback() {
    if (this.mutationO) {
      this.mutationO.disconnect();
      this.mutationO = undefined;
    }
  }
  /**
   * Local methods
   */
  toggleClass(elem, className, force) {
    if (force) {
      elem.classList.add(className);
    }
    else {
      elem.classList.remove(className);
    }
  }
  async updateListItems() {
    const items = Array.from(this.element.querySelectorAll("duet-list-item"));
    items.forEach(item => {
      // Use classes to apply styles for SSR compatibility
      item.classList.add(`duet-list-width-${this.labelWidth}`);
      item.classList.add(`duet-list-variation-${this.variation}`);
      // If padding is set to 0
      this.toggleClass(item, "duet-p-0", this.padding === "none");
      // If text is centered for mobile
      this.toggleClass(item, "duet-list-mobile-center", this.mobile === "center");
      // If breakpoint is adjusted
      this.toggleClass(item, "duet-list-breakpoint-large", this.breakpoint === "large");
      // Create zebra striping if striped variation is used
      this.toggleClass(item, "duet-list-striped", this.variation === "striped");
      // Finally apply turva theme if necessary
      this.toggleClass(item, "duet-theme-turva", this.theme === "turva");
    });
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    return (h("dl", { class: { "duet-list-component": true, "duet-m-0": this.margin === "none" } }, h("slot", null)));
  }
  get element() { return this; }
  static get watchers() { return {
    "theme": ["updateListItems"],
    "padding": ["updateListItems"],
    "mobile": ["updateListItems"],
    "breakpoint": ["updateListItems"],
    "variation": ["updateListItems"],
    "labelWidth": ["updateListItems"]
  }; }
  static get style() { return duetListCss; }
}, [1, "duet-list", {
    "theme": [1025],
    "margin": [1],
    "padding": [1],
    "mobile": [1],
    "breakpoint": [1],
    "variation": [1],
    "labelWidth": [1, "label-width"]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["duet-list"];
  components.forEach(tagName => { switch (tagName) {
    case "duet-list":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DuetList);
      }
      break;
  } });
}

export { DuetList as D, defineCustomElement as d };
