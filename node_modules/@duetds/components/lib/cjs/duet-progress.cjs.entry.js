/*!
 * Built with Duet Design System
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-d380d72b.js');
const themeableComponent = require('./themeable-component-fdeaef9f.js');
const createId = require('./create-id-c3b984b1.js');
const languageUtils = require('./language-utils-4f62a7db.js');
require('./string-utils-5cadd058.js');

const duetProgressCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;width:100%;height:inherit}.duet-progress{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;display:block;width:100%;min-height:1px;}.duet-progress .progress-bar{position:relative;display:block;width:100%;height:inherit;min-height:1px;background-color:#f3f9fc;border-radius:0;box-shadow:none}.duet-theme-turva .duet-progress .progress-bar{background-color:#fcf3f4}.duet-progress .progress-bar>span{display:block;height:inherit;text-indent:-9999px;background-color:#0077b3;border-radius:0}.duet-theme-turva .duet-progress .progress-bar>span{background-color:#c60c30}.duet-progress progress[value]{display:flex;width:100%;height:inherit;min-height:1px;color:#0077b3;border:0 none;-webkit-appearance:none;-moz-appearance:none;appearance:none}.duet-theme-turva .duet-progress progress[value]{color:#c60c30}.duet-progress progress[value]::-webkit-progress-bar{background-color:#f3f9fc;border-radius:0}.duet-theme-turva .duet-progress progress[value]::-webkit-progress-bar{background-color:#fcf3f4}.duet-progress progress[value]::-webkit-progress-value{background-color:#0077b3;background-size:35px 20px, 100% 100%, 100% 100%;border-radius:0;-webkit-animation:animate-stripes 5s linear infinite;animation:animate-stripes 5s linear infinite}.duet-theme-turva .duet-progress progress[value]::-webkit-progress-value{background-color:#c60c30}.duet-progress progress[value] ::-moz-progress-bar{background-color:#f3f9fc}.duet-theme-turva .duet-progress progress[value] ::-moz-progress-bar{background-color:#fcf3f4}";

const DuetProgress = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    /**
     * Own Properties
     */
    this.progressId = createId.createID("DuetProgress");
    this.progressLabelId = createId.createID("DuetProgressLabel");
    /**
     * Aria Details of the component
     */
    this.accessibleDetails = undefined;
    /**
     * String of id's that indicate alternative labels elements
     */
    this.accessibleLabelledBy = undefined;
    /**
     * Aria description the button
     */
    this.accessibleDescription = undefined;
    /**
     * Defaults for accessibleLabel
     */
    this.accessibleLabelUploadDefaults = {
      fi: ["lähetys valmis", "lähetys käynnissä"],
      sv: ["Uppladdningen är klar", "Uppladdning pågår"],
      en: ["upload completed", "upload in progress"],
    };
    /**
     * Adds accessible label for upload in progress and upload complete states
     * @default {fi: ["lähetys valmis", "lähetys käynnissä"],sv: ["Uppladdningen är klar", "Uppladdning pågår"], en:  ["completed", "in progress"]}
     */
    this.accessibleLabelUpload = languageUtils.getLocaleString(this.accessibleLabelUploadDefaults);
    /**
     * Progress of the bar, a value from 0-100
     */
    this.progress = 0;
    /**
     * Height of progressbar
     */
    this.height = "10px";
    /**
     * Theme of the input.
     */
    this.theme = "";
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    themeableComponent.inheritGlobalTheme(this);
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    return (index.h(index.Host, null, index.h("div", { "aria-live": this.accessibleLabel ? "polite" : "off", "aria-hidden": this.accessibleLabel ? "false" : "true", "aria-atomic": "true", style: {
        height: this.height,
      }, id: this.progressId, class: {
        "duet-progress": true,
        "duet-progress-done": this.progress === 100,
        "duet-progress-start": this.progress === 0,
        "duet-progress-inprogress": this.progress < 99 && this.progress !== 0,
        "duet-theme-turva": this.theme === "turva",
      } }, index.h("duet-visually-hidden", null, index.h("label", { htmlFor: this.progressLabelId }, this.progress !== 0 && (index.h("span", null, this.accessibleLabel, ", ", this.accessibleLabelUpload[this.progress < 99 ? 1 : 0])))), this.caption && (index.h("div", { class: "duet-progress-caption" }, index.h("span", null, this.caption))), index.h("progress", { id: this.progressLabelId, "aria-describedby": this.accessibleDescribedBy, "aria-labelledby": this.accessibleLabelledBy, "aria-details": this.accessibleDetails, "aria-description": this.accessibleDescription, role: "progressbar", value: this.progress, max: "100", "aria-valuemin": "0", "aria-valuemax": "100" }, index.h("div", { class: "progress-bar" }, index.h("span", { style: { width: `${this.progress}%;` } }, "Progress: ", this.progress, "%"))))));
  }
  get element() { return index.getElement(this); }
};
DuetProgress.style = duetProgressCss;

exports.duet_progress = DuetProgress;
