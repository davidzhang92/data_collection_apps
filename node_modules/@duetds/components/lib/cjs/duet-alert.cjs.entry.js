/*!
 * Built with Duet Design System
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-d380d72b.js');
const themeableComponent = require('./themeable-component-fdeaef9f.js');
const createId = require('./create-id-c3b984b1.js');
const languageUtils = require('./language-utils-4f62a7db.js');
require('./string-utils-5cadd058.js');

const duetAlertCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;display:block;width:100%;max-height:999px;border-radius:4px;transition:opacity 300ms ease, visibility 300ms ease, transform 300ms ease, max-height 300ms ease}:host(:focus){outline:0}:host(.user-is-tabbing:focus){border-radius:4px;box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px #0077b3}:host(.user-is-tabbing.duet-theme-turva:focus){box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px #171c3a}:host(.duet-alert-is-dismissed){max-height:0;visibility:hidden;opacity:0;transform:scale(0.98)}:host(.duet-alert-is-dismissed) .duet-alert{margin:0 !important}.duet-alert{margin-bottom:16px !important;position:relative;width:100%;padding:16px;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:1rem;font-weight:400;line-height:1.25;color:#00294d;background:#f2f8fb;border:1px solid #0077b3;border-radius:4px;transition:margin 100ms 300ms ease}.duet-alert.duet-p-0{padding:0 !important}.duet-alert.duet-m-0{margin:0 !important}.duet-alert.duet-theme-turva{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:#171c3a;background:#f3f4f5;border-color:#171c3a}.duet-alert.warning{background:#fffbf4;border-color:#f7b228}.duet-alert.warning.duet-theme-turva{background:#fffaf3;border-color:#faa40f}.duet-alert.danger{background:#fdf4f7;border-color:#de2362}.duet-alert.danger.duet-theme-turva{background:#fdf4f3;border-color:#e02a0d}.duet-alert.success{background:#f2f9f7;border-color:#00875a}.duet-alert.success.duet-theme-turva{background:#f3f9f6;border-color:#08874e}.duet-alert-dismiss{position:absolute;top:2px;right:2px}.duet-alert-container{display:inline-flex;align-items:center;justify-content:center;width:100%;margin:0 auto !important}.duet-alert-container span{width:100%}.duet-alert-has-icon .duet-alert-container{margin-top:2px !important}.duet-alert-icon{display:inline-block;align-self:center;width:20px;min-width:20px;height:20px;margin:0 16px 0 0 !important}.duet-alert-icon duet-icon{width:20px;height:20px}.duet-alert-is-dismissible{padding:16px 48px 16px 16px;text-align:left}.duet-alert-is-dismissible .duet-alert-container{text-align:left}";

const DuetAlert = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.duetDismiss = index.createEvent(this, "duetDismiss", 7);
    this.descriptiveId = createId.createID("DuetAlert");
    /**
     * Theme of the card.
     */
    this.theme = "";
    /**
     * State() variables
     * Inlined decorator, alphabetical order.
     */
    this.isDismissed = false;
    /**
     * Property to change languageDefaults on the component.
     * normally you would handle these strings on an application level and override @accessibleLabel when needed
     * @default {fi: "Sulje viesti", sv: "Stäng meddelandet", en: "Close the message"}
     */
    this.accessibleLabelDefaults = {
      fi: "Sulje viesti",
      sv: "Stäng meddelandet",
      en: "Close the message",
    };
    /**
     * Adds accessible label for the dismissible alert close button.
     * @default {fi: "Sulje viesti", sv: "Stäng meddelandet", en: "Close the message"}
     */
    this.accessibleLabel = languageUtils.getLocaleString(this.accessibleLabelDefaults);
    /**
     * Enable or disabled announcements by assistive technologies.
     */
    this.announcements = true;
    /**
     * Icon to display to the left of the content.
     */
    this.icon = "";
    /**
     * Controls the margin of the component.
     */
    this.margin = "auto";
    /**
     * Controls the padding of the component.
     */
    this.padding = "auto";
    /**
     * Style variation of the alert.
     */
    this.variation = "default";
    /**
     * Should a button be rendered to dismiss the alert?
     */
    this.dismissible = false;
    this.handleDismiss = (ev) => {
      this.isDismissed = true;
      this.duetDismiss.emit({
        component: "duet-alert",
        originalEvent: ev,
      });
    };
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    themeableComponent.inheritGlobalTheme(this);
  }
  componentDidLoad() {
    if (this.autoDismiss) {
      this.timeoutID = setTimeout(() => this.handleDismiss(), this.autoDismiss);
    }
  }
  disconnectedCallback() {
    if (this.timeoutID) {
      clearTimeout(this.timeoutID);
    }
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    const closeColor = this.theme === "turva" ? "secondary-turva" : "secondary";
    const role = this.variation === "danger" || this.variation === "warning" ? "alert" : "status";
    return (index.h(index.Host, { class: { "duet-theme-turva": this.theme === "turva", "duet-alert-is-dismissed": this.isDismissed }, role: this.announcements ? role : undefined }, index.h("div", { class: {
        "duet-alert": true,
        "duet-alert-has-icon": !!this.icon,
        "duet-alert-is-dismissible": this.dismissible,
        "duet-p-0": this.padding === "none",
        "duet-m-0": this.margin === "none",
        [this.variation]: true,
        "duet-theme-turva": this.theme === "turva",
      } }, index.h("div", { class: "duet-alert-container" }, this.icon && (index.h("div", { class: "duet-alert-icon" }, index.h("duet-icon", { size: "auto", name: this.icon, color: "currentColor" }))), index.h("span", { id: this.descriptiveId }, index.h("slot", null))), this.dismissible && (index.h("div", { class: "duet-alert-dismiss" }, index.h("duet-button", { variation: "plain", accessibleLabel: this.accessibleLabel, accessibleDescribedBy: this.descriptiveId, color: closeColor, iconSize: "medium", icon: "navigation-close", iconOnly: true, margin: "none", theme: this.theme, onClick: this.handleDismiss, fixed: true }))))));
  }
};
DuetAlert.style = duetAlertCss;

exports.duet_alert = DuetAlert;
