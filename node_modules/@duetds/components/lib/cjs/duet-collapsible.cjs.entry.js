/*!
 * Built with Duet Design System
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-d380d72b.js');
const actionArrowDownSmall = require('./action-arrow-down-small-ef77a2d1.js');
const tokens = require('./tokens-4c69b122.js');
const themeableComponent = require('./themeable-component-fdeaef9f.js');
const createId = require('./create-id-c3b984b1.js');
const keyboardUtils = require('./keyboard-utils-bb32119b.js');
const stringUtils = require('./string-utils-5cadd058.js');

const duetCollapsibleCss = "*.sc-duet-collapsible,*.sc-duet-collapsible::after,*.sc-duet-collapsible::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}.sc-duet-collapsible-h{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;margin-bottom:16px !important;display:block;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:1rem;font-weight:600;line-height:1.5;color:#00294d}.duet-theme-turva.sc-duet-collapsible-h{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:#171c3a}.duet-m-0.sc-duet-collapsible-h{margin:0 !important}.duet-collapsible-content.sc-duet-collapsible{display:none;padding-left:18px;margin-top:8px;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:1rem;font-weight:400;font-variant-numeric:tabular-nums;-webkit-hyphens:auto;hyphens:auto;line-height:1.5;color:#00294d}@media (max-width: 35.9375em){.duet-collapsible-content.sc-duet-collapsible{font-size:0.875rem}}.duet-collapsible-content.duet-theme-turva.sc-duet-collapsible{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:#171c3a}[open].sc-duet-collapsible-h .duet-collapsible-content.sc-duet-collapsible{display:block}.duet-collapsible-heading.sc-duet-collapsible{-webkit-user-select:none;user-select:none;display:flex;align-items:center;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:1rem;font-weight:600;line-height:1.5;color:#00294d;cursor:pointer;border-radius:4px}.duet-collapsible-heading.duet-collapsible-normal-weight.sc-duet-collapsible{font-weight:400}.duet-collapsible-heading.duet-theme-turva.sc-duet-collapsible{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:#171c3a}.duet-collapsible-heading.sc-duet-collapsible .duet-collapsible-heading-content.sc-duet-collapsible{flex:1}.duet-collapsible-heading.sc-duet-collapsible:focus{outline:0}.user-is-tabbing.sc-duet-collapsible-h .duet-collapsible-heading.sc-duet-collapsible:focus{border-radius:4px;box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px #0077b3}.user-is-tabbing.duet-theme-turva.sc-duet-collapsible-h .duet-collapsible-heading.sc-duet-collapsible:focus{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px #171c3a}.duet-collapsible-heading-icon.sc-duet-collapsible{margin-right:8px !important;display:flex;align-items:center;justify-content:center;color:#00294d;transition:transform 300ms ease}.duet-collapsible-heading-icon.sc-duet-collapsible:last-child,.duet-collapsible-heading-icon.sc-duet-collapsible:last-of-type{margin-right:0 !important}[aria-expanded=true].sc-duet-collapsible .duet-collapsible-heading-icon.sc-duet-collapsible{transform:rotate(180deg)}";

const DuetCollapsible = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.duetToggle = index.createEvent(this, "duetToggle", 7);
    this.id = createId.createID("DuetCollapsible");
    /**
     * Theme of the collapsible.
     */
    this.theme = "";
    /**
     * The content for the collapsible heading.
     */
    this.heading = "";
    /**
     * The font weight of the heading
     */
    this.headingWeight = "semibold";
    /**
     * Custom headingSize to be used for font size of heading, as a design token entered
     * in kebab-case x-small -> font-size-x-small.
     * Example:
     * # 12px (0.75rem)  ------  +2px   (x-small)
     * # 14px (0.875rem) ------  +2px   (small)
     * # 16px (1rem)     ------  +2px   (medium)
     * # 20px (1.25rem)  ------  +4px   (large)
     * # 24px (1.5rem)   ------  +4px   (x-large)
     * # 36px (2.25rem)  ------  +12px  (xx-large)
     * # 48px (3rem)     ------  +12px  (xxx-large)
     * # 72px (4.5rem)   ------  +24px  (xxxx-large)
     */
    this.headingSize = undefined;
    /**
     * The actual heading level used for the heading in html markup. This setting
     * exists for accessibility reasons. It doesnâ€™t change the style visually.
     * only variations of h1-h6 area accepted
     */
    this.headingLevel = undefined;
    /**
     * Controls the margin of the component.
     */
    this.margin = "auto";
    /**
     * Is the component expanded or collapsed.
     */
    this.open = false;
    this.handleKeyDown = (e) => {
      if (keyboardUtils.isKeyboardClick(e)) {
        this.handleClick(e);
      }
    };
    this.getFontSizeFromTokens = (fontSize = this.headingSize) => {
      if (!fontSize) {
        return tokens.font_size_medium;
      }
      else {
        const searchRegExp = /-/g;
        const fontSizeReplaced = fontSize.replace(searchRegExp, "_");
        return tokens.tokens[`font_size_${fontSizeReplaced}`];
      }
    };
    this.getEquivalentIconSize = (fontSize = this.headingSize) => {
      switch (fontSize) {
        case "x-small":
          return "xx-small";
        case "small":
          return "xx-small";
        case "medium":
          return "xx-small";
        case "large":
          return "x-small";
        case "x-large":
          return "small";
        case "xx-large":
          return "medium";
        case "xxx-large":
          return "x-large";
        case "xxxx-large":
          return "xxx-large";
        default:
          // default size
          return "xx-small";
      }
    };
    this.handleClick = (e) => {
      e.preventDefault();
      this.open = !this.open;
      this.duetToggle.emit({
        component: "duet-collapsible",
        originalEvent: e,
      });
    };
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    themeableComponent.inheritGlobalTheme(this);
  }
  /**
   * Sets focus on the specified `duet-collapsible`. Use this method instead of the global
   * `collapsible.focus()`.
   */
  async setFocus(options) {
    if (this.nativeButton) {
      this.element.classList.add("user-is-tabbing");
      this.nativeButton.focus(options);
    }
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    const HeadingTagName = this.headingLevel ? stringUtils.sanitizeString(this.headingLevel) : "div";
    return (index.h(index.Host, { class: { "duet-m-0": this.margin === "none" } }, index.h(HeadingTagName, { class: {
        "duet-collapsible-heading": true,
        "duet-theme-turva": this.theme === "turva",
        "duet-collapsible-normal-weight": this.headingWeight === "normal",
      }, style: { "font-size": this.getFontSizeFromTokens() }, role: "button", tabindex: "0", ref: button => (this.nativeButton = button), "aria-expanded": this.open ? "true" : "false", "aria-controls": this.id, onClick: this.handleClick, onKeyDown: this.handleKeyDown }, index.h("div", { class: "duet-collapsible-heading-icon" }, index.h("duet-icon", { margin: "none", color: this.theme === "turva" ? "secondary-turva" : "secondary", size: this.getEquivalentIconSize(), icon: actionArrowDownSmall.actionArrowDownSmall.svg })), index.h("div", { class: "duet-collapsible-heading-content", part: "duet-collapsible-heading-content" }, this.heading)), index.h("div", { id: this.id, class: { "duet-collapsible-content": true, "duet-theme-turva": this.theme === "turva" }, part: "duet-collapsible-content" }, index.h("slot", null))));
  }
  get element() { return index.getElement(this); }
};
DuetCollapsible.style = duetCollapsibleCss;

exports.duet_collapsible = DuetCollapsible;
