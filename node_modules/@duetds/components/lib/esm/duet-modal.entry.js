/*!
 * Built with Duet Design System
 */
import { r as registerInstance, c as createEvent, h, g as getElement } from './index-81967d12.js';
import { d as disableBodyScroll, e as enableBodyScroll } from './bodyScrollLock.es6-61b5e9a4.js';
import { i as inheritGlobalTheme } from './themeable-component-cb76be7c.js';
import { c as createID } from './create-id-981107da.js';
import { f as focusElement, F as FocusGuard } from './focus-utils-f6146965.js';
import { f as isEscapeKey } from './keyboard-utils-88ea1007.js';
import { a as getLanguage, g as getLocaleString } from './language-utils-bf701d37.js';
import './string-utils-5954f458.js';

const duetModalCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}.duet-modal-overlay{position:fixed;top:0;right:0;bottom:0;left:0;z-index:900;max-height:100vh;overflow-y:auto;visibility:hidden;background:rgba(0, 41, 77, 0.85);opacity:0;transition:300ms ease;transition-delay:200ms}.duet-modal-overlay.duet-theme-turva{background:rgba(23, 28, 58, 0.85)}.duet-modal-overlay.duet-modal-active{visibility:visible;opacity:1;transition:300ms ease;transition-delay:0s}.duet-modal-overlay.duet-disable-transitions{transition:none}::slotted(img){width:100%}.duet-modal-inner{display:flex;align-items:center;width:100%;min-height:100%;padding:20px 16px}@media (min-width: 36em){.duet-modal-inner{padding:48px 16px}}@media (max-width: 35.9375em){.duet-modal-inner.duet-modal-large{padding-right:0;padding-left:0}}.duet-modal{position:relative;width:100%;max-width:686px;margin:auto;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-weight:400;font-variant-numeric:tabular-nums;line-height:1.5;color:#00294d;background:white;border-radius:4px;opacity:0;transition:300ms ease;transition-delay:0ms;transform:scale(0.96)}.duet-theme-turva .duet-modal{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:#171c3a}.duet-modal-active .duet-modal{opacity:1;transition:300ms ease;transition-delay:200ms;transform:none}.duet-disable-transitions .duet-modal{transition:none}.duet-modal.small{max-width:545px}.duet-modal.large{max-width:100%}@media (min-width: 36em){.duet-modal.large{max-width:1110px}}.duet-modal:focus{outline:0}.duet-modal-body{width:100%;padding:36px 28px}.duet-modal-body.duet-modal-gutter-small{padding:36px 20px}.duet-modal-body.duet-modal-gutter-large{padding:48px 36px}@media (max-width: 22.5em){.duet-modal-body{padding:36px 20px}.duet-modal-body.duet-modal-gutter-large{padding:48px 28px}}@media (max-width: 35.9375em){.duet-modal-body{padding:36px 20px}.duet-modal-body.duet-modal-gutter-large{padding:48px 36px}}@media (min-width: 36em){.duet-modal-body{padding:36px}.duet-modal-body.duet-modal-gutter-large{padding:28px 72px}}@media (min-width: 48em){.duet-modal-body{padding:36px 72px}.duet-modal-body.duet-modal-gutter-large{padding:36px 72px}}@media (min-width: 76.25em){.duet-modal-body{padding:36px 48px 48px}.duet-modal-body.duet-modal-gutter-large{padding:48px 94px}.small .duet-modal-body{padding:36px 48px}}.duet-modal-header{text-align:center}.duet-modal-close{position:absolute;top:12px;right:12px}.duet-modal-heading{width:100%;padding-right:60px;overflow:hidden;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:1.25rem;font-style:normal;font-weight:600;font-variant-numeric:tabular-nums;line-height:1.25;color:#00294d;text-decoration:none;text-overflow:ellipsis;letter-spacing:-0.01rem;white-space:nowrap}.duet-modal-heading.duet-p-0{padding:0 !important}.duet-modal-heading.duet-m-0{margin:0 !important}";

// The transition below is slightly higher than the actual CSS transition as VoiceOver on
// iOS has otherwise problems moving the focus from modal back to the original element.
// This issue is similar to what we’ve seen in Duet Date Picker + iOS VoiceOver.
const TRANSITION_MS = 600;
const DuetModal = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.duetOpen = createEvent(this, "duetOpen", 7);
    this.duetClose = createEvent(this, "duetClose", 7);
    this.duetBeforeClose = createEvent(this, "duetBeforeClose", 7);
    var _a, _b;
    /**
     * Own Properties.
     */
    this.modalId = createID("DuetModal");
    this.slotDefaultId = createID("DuetModal-default-slot");
    this.isAndroidDevice = ((_b = (_a = navigator === null || navigator === void 0 ? void 0 : navigator.userAgent) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.indexOf("android")) > -1 || null;
    this.isSafariBrowser = /^((?!chrome|android).)*safari/i.test(navigator === null || navigator === void 0 ? void 0 : navigator.userAgent);
    this.handleAndroidResizeEvents = () => {
      if (document.activeElement.tagName == "INPUT") {
        window.setTimeout(function () {
          var _a;
          try {
            //@ts-ignore
            (_a = document === null || document === void 0 ? void 0 : document.activeElement) === null || _a === void 0 ? void 0 : _a.scrollIntoViewIfNeeded(true);
          }
          catch (e) {
            //dev-null any errors here
          }
        }, 100);
      }
    };
    /**
     * State() variables
     * Inlined decorator, alphabetical order.
     */
    this.open = false;
    /**
     * The currently active language. This setting also changes the logo to match
     * the chosen language.
     * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing
     * @default "fi"
     */
    this.language = getLanguage();
    /**
     * Defaults for accessibleCloseLabel
     * @default {fi: "Sulje ikkuna", sv: "Stäng fönstret", en: "Close the dialog", }
     */
    this.accessibleCloseLabelDefaults = {
      fi: "Sulje ikkuna",
      sv: "Stäng fönstret",
      en: "Close the dialog",
    };
    /**
     * Adds accessible label for the close icon that is only shown for screen
     * readers. This property is always required to create an accessibly interface!
     * Swedish translation for this property is “Stäng fönstret”.
     * @default {fi: "Sulje ikkuna", sv: "Stäng fönstret", en: "Close the dialog", }
     */
    this.accessibleCloseLabel = getLocaleString(this.accessibleCloseLabelDefaults, this.language);
    /**
     * Size of the modal window.
     */
    this.size = "medium";
    /**
     * Details of the component
     */
    this.accessibleDetails = undefined;
    /**
     * Aria description the button
     */
    this.accessibleDescription = undefined;
    /**
     * Size of the modal window.
     */
    this.gutterSize = "medium";
    /**
     * Theme of the modal.
     */
    this.theme = "";
    /**
     * Accessible heading displayed in the modal. The modal marks this as the
     * label of the modal when used. This helps screen reader users which is
     * why this is a required property.
     */
    this.heading = "";
    /**
     * Accessible heading size
     */
    this.headingLevel = "h3";
    /**
     * Icon to display above the heading (from Duet’s icons). Example:
     * "form-location"
     */
    this.icon = "";
    /**
     * Custom color to be used for the icon, as a design token entered in camelCase
     * or kebab-case. Example: "primary".
     */
    this.color = "";
    /**
     * Use this property when you need to have the modal dialog initially active.
     */
    this.active = false;
    /**
     * Use this property when you want the modal to close when clicked outside of modal.
     */
    this.closeOnBlur = false;
  }
  openChanged() {
    if (this.open) {
      if (this.modalEl && this.modalEl.scrollTop) {
        this.modalEl.scrollTop = 0;
      }
      this.focusedElBeforeOpen = document.activeElement;
      disableBodyScroll(this.modalEl, { reserveScrollBarGap: true });
      setTimeout(() => {
        this.buttonEl.setFocus();
      }, TRANSITION_MS);
      setTimeout(() => {
        this.modalEl.classList.add("duet-disable-transitions");
      }, TRANSITION_MS + 200);
      // fix for android devices where scrolling and softKeyboards MAY be
      // acting weird when the modal contains an input field
      if (this.isAndroidDevice) {
        window.addEventListener("resize", this.handleAndroidResizeEvents);
      }
      this.duetOpen.emit();
    }
    else {
      this.modalEl.classList.remove("duet-disable-transitions");
      enableBodyScroll(this.modalEl);
      this.duetClose.emit();
      setTimeout(() => {
        focusElement(this.focusedElBeforeOpen);
      }, TRANSITION_MS);
      if (this.isAndroidDevice) {
        window.removeEventListener("resize", this.handleAndroidResizeEvents);
      }
    }
  }
  activeChanged() {
    this.open = this.active;
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
  }
  componentDidLoad() {
    if (this.active) {
      // This specific line below can’t be moved to componentWillLoad()
      // as it breaks body scroll enabling.
      this.open = true;
      this.modalEl.classList.add("duet-disable-transitions");
    }
  }
  disconnectedCallback() {
    enableBodyScroll(this.modalEl);
  }
  /**
   * Component event handling.
   */
  handleKeyUp(ev) {
    if (this.open) {
      // When Esc is pressed the modal should be closed
      if (isEscapeKey(ev)) {
        this.closeModal(ev);
      }
    }
  }
  /**
   * Shows the modal dialog. Additionally saves the element that triggered
   * the modal so that focus can be moved back to this specific element when
   * the modal dialog is closed.
   */
  async show() {
    this.open = true;
  }
  /**
   * Hides the modal dialog and puts focus back to the original element
   * that triggered the modal (if we’re still in the same view).
   */
  async hide() {
    this.open = false;
  }
  /**
   * Local methods.
   */
  closeModal(ev) {
    this.duetBeforeClose.emit({
      originalEvent: ev,
      component: "duet-modal",
    });
    // Make sure the event wasn’t prevented previously
    if (!ev.defaultPrevented) {
      setTimeout(() => {
        this.hide();
      }, 1);
    }
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    let iconColor = "primary";
    let closeColor = "secondary";
    if (this.theme === "turva") {
      iconColor = "primary-turva";
      closeColor = "secondary-turva";
    }
    return (h("div", { ref: modal => (this.modalEl = modal), "aria-labelledby": this.heading ? this.modalId : false, "aria-details": this.accessibleDetails, "aria-description": this.accessibleDescription, "aria-describedby": this.accessibleDescribedBy ? `${this.slotDefaultId} ${this.accessibleDescribedBy}` : this.slotDefaultId, role: "dialog", "aria-modal": this.isSafariBrowser ? false : true, tabindex: "-1", "aria-flowto": this.slotDefaultId, class: {
        "duet-modal-overlay": true,
        "duet-theme-turva": this.theme === "turva",
        "duet-modal-active": this.open,
      } }, h(FocusGuard, { moveFocusTo: this.buttonEl }), h("div", { class: {
        "duet-modal-inner": true,
        "duet-modal-large": this.size === "large",
      }, role: "document", onClick: e => {
        if (this.closeOnBlur) {
          this.closeModal(e);
        }
      } }, h("div", { class: { "duet-modal": true, [this.size]: true }, onClick: e => {
        if (this.closeOnBlur) {
          e.stopPropagation();
        }
      } }, h("duet-spacer", null), h("div", { class: "duet-modal-close" }, h("duet-button", { ref: button => (this.buttonEl = button), variation: "plain", accessibleLabel: this.accessibleCloseLabel, color: closeColor, iconSize: "large", icon: "navigation-close", iconOnly: true, margin: "none", theme: this.theme, onClick: ev => this.closeModal(ev), fixed: true })), h("div", { class: {
        "duet-modal-body": true,
        "duet-modal-gutter-small": this.gutterSize === "small",
        "duet-modal-gutter-medium": this.gutterSize === "medium",
        "duet-modal-gutter-large": this.gutterSize === "large",
      } }, h("div", { class: "duet-modal-header" }, h("span", { class: "duet-modal-inner-slot-top" }, h("slot", { name: "top" })), this.icon && h("duet-icon", { name: this.icon, size: "xx-large", color: this.color || iconColor }), this.heading && (h("duet-heading", { level: this.headingLevel, theme: this.theme, id: this.modalId }, this.heading))), h("span", { class: "duet-modal-inner-slot-default", id: this.slotDefaultId }, h("slot", null))))), h(FocusGuard, { moveFocusTo: this.buttonEl })));
  }
  get element() { return getElement(this); }
  static get watchers() { return {
    "open": ["openChanged"],
    "active": ["activeChanged"]
  }; }
};
DuetModal.style = duetModalCss;

export { DuetModal as duet_modal };
