/*!
 * Built with Duet Design System
 */
import { r as registerInstance, c as createEvent, h, F as Fragment, H as Host, g as getElement } from './index-81967d12.js';
import { i as inheritGlobalTheme } from './themeable-component-cb76be7c.js';
import { c as createID } from './create-id-981107da.js';
import { d as debounce } from './js-utils-fa98b8cd.js';
import { j as isArrowKey, k as isNumber, d as isArrowLeftKey, b as isArrowUpKey, a as isArrowRightKey, c as isArrowDownKey, l as isMinusKey, m as isPlusKey } from './keyboard-utils-88ea1007.js';
import { g as getLocaleString } from './language-utils-bf701d37.js';
import './string-utils-5954f458.js';

const shouldDisplayNavigation = (visibleItems, total, take) => {
  if (visibleItems * 2 > total / take) {
    return false;
  }
  return true;
};

const duetPaginationCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;display:inline-block;margin:0 auto}.duet-pagination-nav{position:relative}.duet-pagination ::part(button){border:0}.duet-pagination,.duet-pagination li{display:flex;flex-wrap:wrap;gap:0.1rem;align-items:center}.duet-pagination-item-is-active .duet-pagination-page-number{border-bottom-color:inherit;border-bottom-style:solid;border-bottom-width:2px}.duet-pagination duet-button{width:30px;min-width:36px;font-weight:600;text-decoration:none;border-left-width:0}.duet-pagination-overlay{position:absolute;top:1rem;z-index:300;width:100%;text-align:center}.duet-pagination.duet-pagination-is-dimmed{opacity:0.5}";

const DuetPagination = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.duetPageChange = createEvent(this, "duetPageChange", 3);
    this.listId = createID("duet-pagination-list");
    this.numbersStore = "";
    /**
     * State() variables
     * @internal
     */
    this.totalPages = 10;
    /**
     * State() variables
     * @internal
     */
    this.internalSectionIndex = 0;
    /**
     * Theme of the pagination.
     */
    this.theme = "";
    /**
     * Characters to use for the jump buttons.
     */
    this.jumpString = "...";
    /**
     * Variation of the paginator (compact and default supported)
     */
    this.variation = "default";
    /**
     * Described By id
     */
    this.accessibleDescribedBy = undefined;
    /**
     * Details of the component
     */
    this.accessibleDetails = undefined;
    /**
     * String of id's that indicate alternative labels elements
     */
    this.accessibleLabelledBy = undefined;
    /**
     * Aria description the button
     */
    this.accessibleDescription = undefined;
    /**
     * Default pagination labels
     */
    this.accessibleLabelsDefaults = {
      en: {
        next_page: "Next page",
        previous_page: "Previous page",
        first_page: "First page",
        last_page: "Last page",
        jump_to: "Jump to page",
        go_to: "Go to page",
        description: "You may use arrow keys to select page number, or enter a page number when this element is in focus to jump to a page",
        pagination_label: "Pagination, choose a number to jump to a page",
        prev_section: "Show previous {0} page numbers, screen reader user should use arrowkeys to navigate",
        next_section: "Show next {0} page numbers, screen reader user should use arrowkeys to navigate",
      },
      fi: {
        next_page: "Seuraava sivu",
        previous_page: "Edellinen sivu",
        first_page: "Ensimmäinen sivu",
        last_page: "Viimeinen sivu",
        jump_to: "Siirry sivulle",
        go_to: "Siirry sivulle",
        description: "Voit käyttää nuolinäppäimiä sivunumeron valitsemiseen, tai kirjoittaa sivunumeron, jos tämä elementti on aktiivinen, siirtymään sivulle",
        pagination_label: "Sivutus, valitse sivunumero siirtyäksesi sivulle",
        prev_section: "Näytä edelliset {0} sivunumerot, käyttäjän pitää käyttää nuolinäppäimiä navigoidaksesi",
        next_section: "Näytä seuraavat {0} sivunumerot, käyttäjän pitää käyttää nuolinäppäimiä navigoidaksesi",
      },
      sv: {
        next_page: "Nästa sida",
        previous_page: "Föregående sida",
        first_page: "Första sidan",
        last_page: "Sista sidan",
        jump_to: "Hoppa till sida",
        go_to: "Hoppa till sida",
        description: "Du kan använda piltangenterna för att välja sida, eller skriva in sida när elementet är i fokus för att hoppa till en sida",
        pagination_label: "Sidutning, välj en siffra för att hoppa till en sida",
        prev_section: "Visa föregående {0} sidnummer, skrivbordsläsare ska använda piltangenterna för att navigera",
        next_section: "Visa nästa {0} sidnummer, skrivbordsläsare ska använda piltangenterna för att navigera",
      },
    };
    /**
     * Default pagination labels
     */
    this.accessibleLabels = getLocaleString(this.accessibleLabelsDefaults);
    /**
     * The size of the take, when paginating.
     */
    this.take = 5;
    /**
     * Amount of visible page numbers to show
     */
    this.visibleItems = 5;
    /**
     * The total size of the paginating data
     */
    this.total = 1000;
    /**
     * Used to indicate which dom element with ID this element controls
     */
    this.ariaControls = "";
    /**
     * The current page
     */
    this.current = 1;
    /**
     * Private methods.
     */
    // called from the watcher and used to make sure any changed to current also updates the internal section index
    this.actionChain = async (after, before) => {
      if (after === 0) {
        this.current = 1;
      }
      else if (before !== after) {
        const calculatedSectionIndex = Math.ceil(after / this.visibleItems) - 1;
        if (calculatedSectionIndex !== this.internalSectionIndex) {
          this.internalSectionIndex = calculatedSectionIndex;
          await this.setFocus();
        }
      }
      return true;
    };
    //helper to emit relevant page events
    this.emitPageEvent = debounce((ev, passedPage) => {
      const page = Number(passedPage || this.current);
      this.duetPageChange.emit({
        component: "duet-pagination",
        from: page * this.take,
        to: page * this.take + this.take,
        current: page,
        take: this.take,
        type: "page",
        originalEvent: ev,
      });
    }, 100);
    // this will return the entered number, or the current page if the user presses enter
    this.getEnteredNumber = debounce(ev => {
      this.emitPageEvent(ev, this.numbersStore);
      this.current = Number(this.numbersStore);
      this.numbersStore = "";
      this.duetPageChange.emit({
        component: "duet-pagination",
        from: this.current * this.take,
        to: this.current * this.take + this.take,
        current: this.current,
        take: this.take,
        type: "jump",
        originalEvent: ev,
      });
    }, 500);
  }
  watchPropTotalHandler( /*newValue: boolean, oldValue: boolean*/) {
    this.calculatePageTake();
    return true;
  }
  watchStateHandler(newValue, oldValue) {
    return this.actionChain(newValue, oldValue);
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    // we want to keep the internal current index in sync with the current prop, but take advantage of the multiple with 0 for the first iteration
    this.internalSectionIndex = Math.ceil(this.current / this.visibleItems) - 1;
    this.calculatePageTake();
    inheritGlobalTheme(this);
  }
  componentWillRender() {
    if (this.internalSectionIndex !== 0 && this.internalSectionIndex !== this.totalPages) {
      this.calculatePageTake();
    }
  }
  componentDidRender() {
    this.setFocus();
  }
  //get totalpages from visible and total
  calculatePageTake() {
    this.totalPages = Math.ceil(this.total / this.take);
  }
  //set update current when mouse click on page number
  async onMouseHandler(e, dir) {
    e.preventDefault();
    e.stopPropagation();
    this.current = this.current + dir;
    this.emitPageEvent(e);
  }
  //handle a11y keyboard navigation events
  async onKeyboardDown(e) {
    let next = this.current;
    // handle a11y based keyboard navigation for left/right/up/down
    if (isArrowLeftKey(e) || isArrowUpKey(e)) {
      next--;
    }
    if (isArrowRightKey(e) || isArrowDownKey(e)) {
      next++;
    }
    if (isArrowKey(e)) {
      if (next <= this.totalPages) {
        this.current = next;
        this.emitPageEvent(e);
      }
    }
    //handle the jump feature, where numbers can be entered
    if (isNumber(e) && this.shouldDisplayNavigation()) {
      this.numbersStore = this.numbersStore + e.key;
      if (Number(this.numbersStore) > this.totalPages) {
        this.numbersStore = this.totalPages + "";
      }
      this.getEnteredNumber(e);
    }
  }
  // utility to set focus on active button
  async setFocus() {
    const currentDomElement = this.nativeNav.querySelector(`li.duet-pagination-item-is-active duet-button`);
    currentDomElement && (await currentDomElement.setFocus());
  }
  //handles click on page numbers
  pageClickHandler(e) {
    e.preventDefault();
    const clickedId = Number(e.target.getAttribute("data-id"));
    this.current = clickedId;
    this.emitPageEvent({}, clickedId);
  }
  //handles click on the next section buttons
  sectionClickHandler(e, direction) {
    e.preventDefault();
    let next = this.internalSectionIndex + direction;
    const takePerVisibleItems = this.take * this.visibleItems;
    if (next * takePerVisibleItems > this.total) {
      next = this.internalSectionIndex;
    }
    const newSection = next;
    this.internalSectionIndex = newSection >= 0 ? newSection : 0;
  }
  //handles click on the jump (1)button
  jumpToStart(e) {
    e.preventDefault();
    this.internalSectionIndex = 0;
    this.current = 1;
    this.emitPageEvent(e);
  }
  //handles click on the jump (total) button
  jumpToEnd(e) {
    e.preventDefault();
    this.internalSectionIndex = Math.ceil(this.totalPages / this.take - 1);
    this.current = this.totalPages;
    this.emitPageEvent(e);
  }
  // render the individual page numbers
  renderPageNumbers() {
    const items = [];
    let i = this.internalSectionIndex * this.visibleItems;
    do {
      i++;
      if (i > this.totalPages) {
        break;
      }
      items.push(h("li", { class: {
          "duet-pagination-item": true,
          "duet-pagination-item-is-active": i === this.current,
        }, role: "menuitem" }, h("duet-button", { class: {
          "duet-pagination-link": true,
        }, color: i !== this.current ? "secondary" : "primary", "data-id": i, "center-text": true, variation: "plain", margin: "none", accessibleLabel: `${this.accessibleLabels.go_to} ${i}`, onClick: e => this.pageClickHandler(e) }, h("div", { class: "duet-pagination-page-number", "aria-hidden": true }, i))));
    } while (i < this.visibleItems + this.internalSectionIndex * this.visibleItems);
    return items;
  }
  shouldDisplayNavigation() {
    if (this.variation !== "compact") {
      return shouldDisplayNavigation(this.visibleItems, this.total, this.take);
    }
    return false;
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    return (h(Host, { onKeyDown: e => this.onKeyboardDown(e) }, h("nav", { role: "navigation", "aria-labelledby": this.accessibleLabelledBy ? `${this.accessibleLabelledBy} ${this.listId}` : this.listId, "aria-describedby": this.accessibleDescribedBy ? `${this.accessibleDescribedBy} ${this.listId}` : this.listId, "aria-descriptions": this.accessibleDescription, "aria-details": this.accessibleDetails, ref: el => (this.nativeNav = el), "aria-controls": this.ariaControls, class: {
        "duet-pagination-nav": true,
        [`duet-pagination-variation-${this.variation}`]: true,
      } }, this.numbersStore !== "" && (h("div", { "aria-live": "assertive", "aria-relevant": "text", class: "duet-pagination-overlay", "aria-label": `${this.accessibleLabels.jump_to} ${this.numbersStore}`, part: "navigation-overlay" }, h("duet-badge", null, "jump to page : ", this.numbersStore))), h("ol", { id: this.listId, class: {
        "duet-pagination": true,
        "duet-pagination-is-dimmed": this.numbersStore !== "",
      }, role: "menubar", "aria-label": this.accessibleLabels.pagination_label, "aria-description": this.accessibleLabels.description }, h("li", { class: {
        "duet-pagination-page-button": true,
        "duet-pagination-button-first": true,
      }, role: "menuitem", part: "navigation-arrow" }, h("duet-action-button", { disabled: this.internalSectionIndex === 0 && this.current <= 1, "data-direction": "back", onClick: e => this.onMouseHandler(e, -1), "aria-label": this.accessibleLabels.previous_page, "icon-name": "action-arrow-left-small" })), this.internalSectionIndex !== 0 && this.shouldDisplayNavigation() && (h(Fragment, null, h("li", { class: "duet-pagination-item", role: "menuitem", part: "navigation-jump" }, h("duet-button", { class: "duet-pagination-link duet-pagination-link-jump-back", "center-text": "true", variation: "plain", color: "secondary", margin: "none", accessibleLabel: this.accessibleLabels.first_page, onClick: e => this.jumpToStart(e) }, h("div", { class: "duet-pagination-page-number" }, "1"))), h("li", { class: "duet-pagination-item", role: "menuitem", part: "navigation-section" }, h("duet-button", { class: "duet-pagination-link duet-pagination-link-dots-back", "center-text": "true", color: "secondary", variation: "plain", margin: "none", accessibleLabel: this.accessibleLabels.prev_section.replace("{0}", `${this.visibleItems}`), onClick: e => this.sectionClickHandler(e, -1) }, h("div", { class: "duet-pagination-page-number", "aria-hidden": "true" }, "..."))))), this.renderPageNumbers(), this.internalSectionIndex * (this.visibleItems + 2) < this.totalPages && this.shouldDisplayNavigation() && (h(Fragment, null, h("li", { class: "duet-pagination-item", role: "menuitem", part: "navigation-section" }, h("duet-button", { class: "duet-pagination-link duet-pagination-link-dots-forward", "center-text": "true", color: "secondary", variation: "plain", margin: "none", accessibleLabel: this.accessibleLabels.next_section.replace("{0}", `${this.visibleItems}`), onClick: e => this.sectionClickHandler(e, 1) }, h("div", { class: "duet-pagination-page-number", "aria-hidden": "true" }, "..."))), h("li", { class: "duet-pagination-item", role: "menuitem", part: "navigation-jump" }, h("duet-button", { class: "duet-pagination-link duet-pagination-link-jump-forward", "center-text": "true", color: "secondary", variation: "plain", margin: "none", accessibleLabel: this.accessibleLabels.last_page, onClick: e => this.jumpToEnd(e) }, h("div", { class: "duet-pagination-page-number" }, this.totalPages))))), h("li", { class: {
        "duet-pagination-page-button": true,
        "duet-pagination-button-last": true,
      }, role: "menuitem", part: "navigation-arrow" }, h("duet-action-button", { disabled: this.current === this.totalPages &&
        this.internalSectionIndex === Math.ceil(this.totalPages / this.visibleItems) - 1, class: "duet-date-dialog-next", "aria-label": this.accessibleLabels.next_page, onClick: e => this.onMouseHandler(e, 1), "icon-name": "action-arrow-right-small" }))))));
  }
  get element() { return getElement(this); }
  static get watchers() { return {
    "total": ["watchPropTotalHandler"],
    "current": ["watchStateHandler"]
  }; }
};
DuetPagination.style = duetPaginationCss;

const duetRangeStepperCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;display:inline-block;margin:0 auto}.duet-range-stepper{display:flex;flex-wrap:wrap;gap:0;align-items:baseline;justify-content:center;min-width:30px;min-height:30px;font-weight:600;text-decoration:none;border-left-width:0}.duet-range-stepper{white-space:nowrap}.duet-range-stepper .duet-range-step-counter{font-weight:600;color:#00294d}.duet-range-stepper ::part(button){border:0}";

const DuetRangeStepper = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.duetRangeStepUpdate = createEvent(this, "duetRangeStepUpdate", 7);
    this.leftBn = createID("duetRangeStepper-left");
    this.rightBn = createID("duetRangeStepper-right");
    /**
     * Theme of the component.
     */
    this.theme = "";
    /**
     * Start value
     * @default 1
     */
    this.stepIndex = 1;
    /**
     * How big is the step
     * @default 50
     */
    this.stepSize = 50;
    /**
     * Total of
     * @default undefined
     */
    this.total = 1000;
    /**
     * Default range stepper labels
     */
    this.ariaLabelsDefaults = {
      en: {
        next_increment: "Next range increment",
        previous_increment: "Previous range increment",
        x_of_y: "{0}–{1} of {2}",
      },
      fi: {
        next_increment: "Seuraava välillä",
        previous_increment: "Edellinen välillä",
        x_of_y: "{0}–{1} / {2}",
      },
      sv: {
        next_increment: "Nästa intervall",
        previous_increment: "Föregående intervall",
        x_of_y: "{0}–{1} av {2}",
      },
    };
    /**
     * Default pagination labels
     */
    this.ariaLabels = getLocaleString(this.ariaLabelsDefaults);
    /**
     * Used to indicate which dom element with ID this element controls
     */
    this.ariaControls = "";
    this.handleClick = (e, direction) => {
      e.preventDefault();
      this.stepIndex += direction;
      this.clampStepIndex();
      this.handleStepClick(e);
    };
  }
  watchStepIndexStateHandler(newValue) {
    if (this.element.shadowRoot.childElementCount > 0) {
      if (newValue <= 1) {
        this.leftBnRef.setAttribute("disabled", "");
        this.rightBnRef.focus();
      }
      else {
        this.leftBnRef.removeAttribute("disabled");
      }
      if (newValue >= this.total / this.stepSize) {
        this.rightBnRef.setAttribute("disabled", "");
        this.leftBnRef.focus();
      }
      else {
        this.rightBnRef.removeAttribute("disabled");
      }
    }
  }
  watchStepSizeStateHandler(newValue, oldValue) {
    if (newValue !== oldValue) {
      if (this.stepIndex * newValue > this.total) {
        this.stepIndex = Math.ceil(this.total / newValue);
      }
    }
  }
  handleStepClick(e) {
    const from = this.stepIndex * this.stepSize - this.stepSize;
    this.duetRangeStepUpdate.emit({
      originalEvent: e,
      component: "duet-range-stepper",
      from: from,
      to: this.getTo(),
      index: this.stepIndex,
    });
  }
  componentWillLoad() {
    inheritGlobalTheme(this);
    this.clampStepIndex();
  }
  componentDidLoad() {
    this.watchStepIndexStateHandler(this.stepIndex);
  }
  clampStepIndex() {
    if (this.stepIndex < 1) {
      this.stepIndex = 1;
    }
    else if (this.stepIndex * this.stepSize > this.total) {
      this.stepIndex = Math.ceil(this.total / this.stepSize);
    }
  }
  getTo() {
    const to = this.stepIndex * this.stepSize;
    const result = to > this.total ? this.total : to;
    return result;
  }
  generateStepSize() {
    // this function uses this.stepIndex and this.range to generate a range of number like 1-100
    // this is used to generate the step size
    let start = Math.floor((this.stepIndex - 1) * this.stepSize);
    //easy fix for starting position
    if (start === 0) {
      start = 1;
    }
    const end = Math.floor(this.stepIndex * this.stepSize);
    return this.ariaLabels.x_of_y
      .replace("{0}", String(start))
      .replace("{1}", String(end))
      .replace("{2}", String(this.total));
  }
  //handle a11y keyboard navigation events
  async onKeyboardDown(e) {
    // handle a11y based keyboard navigation for left/right/up/down
    let next = this.stepIndex;
    let dir = 1;
    if (isArrowLeftKey(e) || isArrowUpKey(e) || isMinusKey(e)) {
      next--;
      dir = -1;
      this.leftBnRef.focus();
    }
    if (isArrowRightKey(e) || isArrowDownKey(e) || isPlusKey(e)) {
      next++;
      dir = 1;
    }
    if (isArrowKey(e)) {
      if (next > 0 && next * this.stepSize <= this.total) {
        this.handleClick(e, dir);
      }
    }
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    return (h("div", { class: {
        "duet-range-stepper": true,
        "duet-theme-turva": this.theme === "turva",
      }, onKeyDown: e => this.onKeyboardDown(e), "aria-controls": this.ariaControls }, h("span", { class: "duet-range-step-counter", part: "range-numbers" }, this.generateStepSize()), h("duet-action-button", { class: "duet-range-step-button duet-range-step-minus", onClick: e => this.handleClick(e, -1), id: this.leftBn, "aria-label": this.ariaLabels.previous_increment, ref: el => (this.leftBnRef = el), part: "navigation-arrow", iconName: "action-arrow-left-small" }), h("duet-action-button", { class: "duet-range-step-button duet-range-step-plus", onClick: e => this.handleClick(e, 1), "aria-label": this.ariaLabels.next_increment, id: this.rightBn, ref: el => (this.rightBnRef = el), part: "navigation-arrow", iconName: "action-arrow-right-small" })));
  }
  get element() { return getElement(this); }
  static get watchers() { return {
    "stepIndex": ["watchStepIndexStateHandler"],
    "stepSize": ["watchStepSizeStateHandler"]
  }; }
};
DuetRangeStepper.style = duetRangeStepperCss;

export { DuetPagination as duet_pagination, DuetRangeStepper as duet_range_stepper };
