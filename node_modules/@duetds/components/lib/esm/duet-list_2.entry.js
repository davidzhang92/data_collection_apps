/*!
 * Built with Duet Design System
 */
import { r as registerInstance, h, g as getElement, H as Host } from './index-81967d12.js';
import { i as inheritGlobalTheme } from './themeable-component-cb76be7c.js';
import { w as watchForOptions } from './watch-options-dd55bce8.js';

const duetListCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;display:block;width:100%}.duet-list-component{margin-bottom:16px !important;width:100%}.duet-list-component.duet-p-0{padding:0 !important}.duet-list-component.duet-m-0{margin:0 !important}";

const DuetList = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /**
     * Theme of the list.
     */
    this.theme = "";
    /**
     * Controls the margin of the component.
     */
    this.margin = "auto";
    /**
     * Controls the padding of the component.
     */
    this.padding = "auto";
    /**
     * Adjusts the alignment of the list items on mobile breakpoint.
     */
    this.mobile = "left";
    /**
     * Switch the breakpoint used to trigger the content stacking. These match to
     * similar media query tokens: $media-query-small and $media-query-large.
     */
    this.breakpoint = "small";
    /**
     * Style variation of the list.
     */
    this.variation = "default";
    /**
     * Set the column width of the first column in percentages.
     */
    this.labelWidth = "30";
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
  }
  async connectedCallback() {
    const el = this.element;
    this.mutationO = watchForOptions(el, "duet-list-item", () => {
      this.updateListItems();
    });
    this.updateListItems();
  }
  disconnectedCallback() {
    if (this.mutationO) {
      this.mutationO.disconnect();
      this.mutationO = undefined;
    }
  }
  /**
   * Local methods
   */
  toggleClass(elem, className, force) {
    if (force) {
      elem.classList.add(className);
    }
    else {
      elem.classList.remove(className);
    }
  }
  async updateListItems() {
    const items = Array.from(this.element.querySelectorAll("duet-list-item"));
    items.forEach(item => {
      // Use classes to apply styles for SSR compatibility
      item.classList.add(`duet-list-width-${this.labelWidth}`);
      item.classList.add(`duet-list-variation-${this.variation}`);
      // If padding is set to 0
      this.toggleClass(item, "duet-p-0", this.padding === "none");
      // If text is centered for mobile
      this.toggleClass(item, "duet-list-mobile-center", this.mobile === "center");
      // If breakpoint is adjusted
      this.toggleClass(item, "duet-list-breakpoint-large", this.breakpoint === "large");
      // Create zebra striping if striped variation is used
      this.toggleClass(item, "duet-list-striped", this.variation === "striped");
      // Finally apply turva theme if necessary
      this.toggleClass(item, "duet-theme-turva", this.theme === "turva");
    });
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    return (h("dl", { class: { "duet-list-component": true, "duet-m-0": this.margin === "none" } }, h("slot", null)));
  }
  get element() { return getElement(this); }
  static get watchers() { return {
    "theme": ["updateListItems"],
    "padding": ["updateListItems"],
    "mobile": ["updateListItems"],
    "breakpoint": ["updateListItems"],
    "variation": ["updateListItems"],
    "labelWidth": ["updateListItems"]
  }; }
};
DuetList.style = duetListCss;

const duetListItemCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;display:flex;flex-flow:row;width:100%;overflow:visible;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:1rem;font-style:normal;font-weight:400;font-variant-numeric:tabular-nums;line-height:1.25;color:#00294d}@media (max-width: 35.9375em){:host{flex-wrap:wrap}}:host dt,:host dd{margin-inline-start:0;-webkit-hyphens:auto;hyphens:auto;text-align:left;word-break:break-all;word-break:break-word}@media (max-width: 35.9375em){:host dt,:host dd{flex:inherit;flex-basis:100% !important;width:100%;padding-bottom:4px !important}}:host dt{padding:16px !important;font-weight:600}@media (max-width: 35.9375em){:host dt{padding-bottom:4px !important}}.duet-theme-turva :host dt{font-weight:700}:host dd{padding:16px !important;margin-left:auto;text-align:left}@media (max-width: 35.9375em){:host dd{padding-top:0 !important}}:host(:not(.duet-list-striped)) dt{padding:8px !important;padding-left:0 !important}@media (max-width: 35.9375em){:host(:not(.duet-list-striped)) dt{padding-bottom:4px !important}}:host(:not(.duet-list-striped)) dd{padding:8px !important;padding-left:0 !important}@media (max-width: 35.9375em){:host(:not(.duet-list-striped)) dd{padding-top:0 !important}}:host(.duet-theme-turva){font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:#171c3a}:host(.duet-list-striped:nth-child(odd)) dt,:host(.duet-list-striped:nth-child(odd)) dd{background:#f5f8fa}:host(.duet-list-striped.duet-theme-turva:nth-child(odd)) dt,:host(.duet-list-striped.duet-theme-turva:nth-child(odd)) dd{background:#f5f5f7}:host(.duet-list-width-30) dt{flex-basis:33%}:host(.duet-list-width-30) dd{flex-basis:67%}:host(.duet-list-width-50) dt{flex-basis:47%}:host(.duet-list-width-50) dd{flex-basis:53%}:host(.duet-list-width-70) dt{flex-basis:65%}:host(.duet-list-width-70) dd{flex-basis:35%}:host(.duet-p-0) dt,:host(.duet-p-0) dd{padding-top:0 !important;padding-bottom:4px !important}@media (max-width: 35.9375em){:host(.duet-list-mobile-center) dt,:host(.duet-list-mobile-center) dd{text-align:center}}@media (max-width: 61.9375em){:host(.duet-list-breakpoint-large){flex-wrap:wrap}:host(.duet-list-breakpoint-large) dt,:host(.duet-list-breakpoint-large) dd{flex:inherit;flex-basis:100% !important;width:100%;padding-bottom:4px !important}:host(.duet-list-breakpoint-large) dd{padding-top:0 !important}}:host(.duet-list-breakpoint-large.duet-list-striped) dd{padding-bottom:16px !important}@media (max-width: 61.9375em){:host(.duet-list-breakpoint-large.duet-list-mobile-center) dt,:host(.duet-list-breakpoint-large.duet-list-mobile-center) dd{text-align:center !important}}";

const DuetListItem = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    return (h(Host, null, h("dt", null, h("slot", { name: "label" })), h("dd", null, h("slot", { name: "value" }))));
  }
};
DuetListItem.style = duetListItemCss;

export { DuetList as duet_list, DuetListItem as duet_list_item };
