/*!
 * Built with Duet Design System
 */
import { r as registerInstance, h, H as Host, g as getElement } from './index-81967d12.js';
import { i as inheritGlobalTheme } from './themeable-component-cb76be7c.js';
import { c as createID } from './create-id-981107da.js';
import { a as getLanguage, g as getLocaleString } from './language-utils-bf701d37.js';
import './string-utils-5954f458.js';

const duetTooltipCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;position:relative;z-index:200;display:inline-flex;width:auto;margin-top:-16px !important;margin-left:-3px !important;-webkit-tap-highlight-color:transparent}.duet-tooltip{position:absolute;right:-21px;bottom:100%;z-index:950;display:block;width:282px;min-height:48px;max-height:340px;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:0.875rem;font-weight:400;line-height:1.25;color:#00294d;visibility:hidden;background:white;border:1px solid #e1e3e6;border-radius:4px;box-shadow:0 2px 10px 0 rgba(0, 41, 77, 0.07);opacity:0;transition:300ms ease;transform:scale(0.9) translateZ(0) translateY(20px);transform-origin:100% 100%}.duet-tooltip.duet-theme-turva{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:#171c3a;border-color:#e4e4e6;box-shadow:0 2px 10px 0 rgba(117, 117, 117, 0.13)}.duet-tooltip::after{position:absolute;right:22px;bottom:-20px;z-index:200;width:0;height:0;content:\"\";border:10px solid transparent;border-top:10px solid white}.duet-tooltip::before{position:absolute;right:21px;bottom:-22px;z-index:100;width:0;height:0;content:\"\";border:11px solid transparent;border-top:11px solid #e1e3e6}.duet-theme-turva .duet-tooltip::before{border-top:11px solid #e4e4e6}.duet-tooltip.duet-tooltip-down{top:100%;bottom:auto;transform:scale(0.9) translateZ(0) translateY(-20px);transform-origin:100% 0}.duet-tooltip.duet-tooltip-down::after{top:-20px;bottom:auto;border:10px solid transparent;border-bottom:10px solid white}.duet-tooltip.duet-tooltip-down::before{top:-22px;bottom:auto;border:11px solid transparent;border-bottom:11px solid #e1e3e6}.duet-theme-turva .duet-tooltip.duet-tooltip-down::before{border-bottom:11px solid #e4e4e6}.duet-tooltip.duet-tooltip-left{right:-21px !important;transform-origin:100% 100% !important}.duet-tooltip.duet-tooltip-left::after{right:22px !important;transform:none !important}.duet-tooltip.duet-tooltip-left::before{right:21px !important;transform:none !important}.duet-tooltip.duet-tooltip-right{right:auto !important;left:-9px !important;transform-origin:100% 100% !important}.duet-tooltip.duet-tooltip-right::after{right:auto !important;left:22px !important;transform:none !important}.duet-tooltip.duet-tooltip-right::before{right:auto !important;left:21px !important;transform:none !important}.duet-tooltip.duet-tooltip-has-label{right:auto !important;left:0;width:282px !important;transform-origin:0 0 !important}.duet-tooltip.duet-tooltip-has-label::after{right:auto !important;left:1px !important;transform:none !important}.duet-tooltip.duet-tooltip-has-label::before{right:auto !important;left:0 !important;transform:none !important}.duet-tooltip.duet-tooltip-active{visibility:visible;opacity:1;transition-property:transform, opacity;transform:scale(1.0001) translateZ(0) translateY(-8px)}.duet-tooltip.duet-tooltip-active.duet-tooltip-down{transform:scale(1.0001) translateZ(0) translateY(8px)}.duet-tooltip-button{z-index:100;display:inline-block;align-items:center;justify-content:center;min-width:48px;height:48px;padding:0 !important;margin-right:-12px;line-height:normal !important;color:#0077b3;white-space:nowrap;cursor:pointer;background:transparent !important;border-radius:4px}.duet-tooltip-button.duet-theme-turva{color:#c60c30}.duet-tooltip-button:hover{color:#004d80}.duet-tooltip-button:hover.duet-theme-turva{color:#940925}.duet-tooltip-button:focus{background:transparent !important;outline:0}:host(.user-is-tabbing) .duet-tooltip-button:focus{background:transparent !important;box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px #0077b3 !important}:host(.user-is-tabbing) .duet-tooltip-button.duet-theme-turva:focus{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px #171c3a !important}.duet-tooltip-button svg{width:20px;height:20px;pointer-events:none}.duet-tooltip-button-has-label{margin-right:0}.duet-tooltip-scrollable{padding:20px !important;width:100%;max-height:250px;padding-right:25px !important;overflow-y:auto;-webkit-hyphens:auto;hyphens:auto;border-radius:4px;-webkit-overflow-scrolling:touch}.duet-tooltip-scrollable:focus{outline:none}:host(.user-is-tabbing) .duet-tooltip-scrollable:focus{box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px #0077b3}:host(.user-is-tabbing) .duet-theme-turva .duet-tooltip-scrollable:focus{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px #171c3a}.duet-tooltip-scrollable::-webkit-scrollbar{width:4px}.duet-tooltip-scrollable::-webkit-scrollbar-track{border-radius:4px}.duet-tooltip-scrollable::-webkit-scrollbar-thumb{background:#e1e3e6;border-radius:4px}.duet-theme-turva .duet-tooltip-scrollable::-webkit-scrollbar-thumb{background:#e4e4e6}.duet-tooltip-label{position:relative;z-index:100;display:inline-block;max-width:calc(100% - 30px);margin-left:12px !important;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:1rem;font-weight:600;line-height:1.25;text-align:left;white-space:normal;vertical-align:top}.duet-theme-turva .duet-tooltip-label{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"}.duet-tooltip-close{position:absolute;top:8px;right:8px;display:flex;align-items:center;justify-content:center;width:17px;height:17px;min-height:0 !important;padding:0 !important;margin:0 !important;line-height:normal;color:#00294d;cursor:pointer;background:#f5f8fa;border-radius:50%;-webkit-appearance:none;appearance:none}.duet-tooltip-close:focus{outline:none;box-shadow:0 0 0 2px #0077b3}.duet-theme-turva .duet-tooltip-close:focus{color:#171c3a;box-shadow:0 0 0 2px #171c3a}@media (min-width: 48em){.duet-tooltip.duet-mq-medium{right:-148px;width:320px;transform-origin:50% 100%}.duet-tooltip.duet-mq-medium::after{right:50%;transform:translateX(50%)}.duet-tooltip.duet-mq-medium::before{right:50%;transform:translateX(50%)}.duet-tooltip.duet-mq-medium.duet-tooltip-down{transform-origin:50% 0}}@media (min-width: 62em){.duet-tooltip.duet-mq-large{right:-148px;width:320px;transform-origin:50% 100%}.duet-tooltip.duet-mq-large::after{right:50%;transform:translateX(50%)}.duet-tooltip.duet-mq-large::before{right:50%;transform:translateX(50%)}.duet-tooltip.duet-mq-large.duet-tooltip-down{transform-origin:50% 0}}";

const DuetTooltip = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /**
     * Own Properties.
     */
    this.tooltipId = createID("DuetTooltip");
    this.lastScrollTop = 0;
    /**
     * State() variables
     * Inlined decorator, alphabetical order.
     */
    this.openDown = false;
    /**
     * Theme of the tooltip.
     */
    this.theme = "";
    /**
     * The currently active language. This setting changes the accessible labels to match the
     * chosen language.
     * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing
     * @default "fi"
     */
    this.language = getLanguage();
    /**
     * Default language strings for the accessibleLabel
     * @default {fi: "Näytä lisätietoja", en: "See more information", sv: "Se mer information"}
     */
    this.accessibleLabelDefault = {
      fi: "Näytä lisätietoja",
      en: "Show more information",
      sv: "Visa mer tilläggsuppgifter",
    };
    /**
     * Adds accessible label for the info icon that is only shown for screen
     * readers. This property is always required to create an accessible interface!
     * @default {fi: "Näytä lisätietoja", en: "See more information", sv: "Se mer information"}
     */
    this.accessibleLabel = getLocaleString(this.accessibleLabelDefault, this.language);
    /**
     * Default language strings for the accessibleCloseLabel
     * @default {fi: "Sulje lisätiedot", en: "Close details", sv: "Stäng detaljer"}
     */
    this.accessibleCloseLabelDefault = {
      fi: "Sulje lisätiedot",
      en: "Close details",
      sv: "Stäng tilläggsuppgifter",
    };
    /**
     * Adds accessible label for the close icon that is only shown for screen
     * readers. This property is always required to create an accessibly interface!
     * @default {fi: "Sulje lisätiedot", en: "Close details", sv: "Stäng detaljer"}
     */
    this.accessibleCloseLabel = getLocaleString(this.accessibleCloseLabelDefault, this.language);
    /**
     * Label of the tooltip. If used, replaces the accessibleLabel option.
     */
    this.label = "";
    /**
     * Adjust the responsive breakpoint where tooltip starts opening towards left.
     */
    this.breakpoint = "medium";
    /**
     * With direction setting you can force the tooltip to always open towards left
     * or right instead of automatically determining the direction.
     */
    this.direction = "auto";
    /**
     * Adjust the vertical positioning of the tooltip toggle in pixels. Can be a
     * negative value as well. E.g. "-13px".
     */
    this.positionVertical = "0";
    /**
     * Adjust the horizontal positioning of the tooltip toggle in pixels. Can be a
     * negative value as well. E.g. "-13px".
     */
    this.positionHorizontal = "0";
    /**
     * Toggle whether the tooltip is initially visible or not. This property should
     * not be used in production in most cases.
     */
    this.active = false;
    /**
     * Local methods
     */
    this.openTooltip = () => {
      this.focusTarget = "tooltip";
      this.active = true;
    };
    this.closeTooltip = (moveFocusToButton = false) => {
      if (moveFocusToButton) {
        this.focusTarget = "trigger";
      }
      this.active = false;
    };
    this.toggleOpen = () => {
      this.active ? this.closeTooltip() : this.openTooltip();
    };
    this.handleFocusOut = (e) => {
      if (!this.active) {
        return;
      }
      const relatedTarget = e.relatedTarget;
      if (
      // if we don't know where focus went
      relatedTarget == null ||
        // if focus is within the tooltip itself
        this.element.shadowRoot.contains(relatedTarget) ||
        // if focus is within the tooltip light DOM
        this.element.contains(relatedTarget)) {
        // then we can skip closing
        return;
      }
      this.closeTooltip();
    };
    this.handleKeyDown = (e) => {
      const isEscapeKey = e.keyCode === 27;
      const isTabbingOut = e.target === this.scrollableEl && e.shiftKey && e.keyCode === 9;
      if (isEscapeKey || isTabbingOut) {
        this.closeTooltip(true);
      }
    };
    this.handleCloseClick = () => {
      this.closeTooltip(true);
    };
    this.isElementInViewport = (el) => {
      if (!el) {
        return false;
      }
      var rect = el.getBoundingClientRect();
      return (
      // This takes the possible Nav component into account
      rect.top >= 100 &&
        rect.left >= 0 &&
        rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
        rect.right <= (window.innerWidth || document.documentElement.clientWidth));
    };
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
  }
  componentDidUpdate() {
    switch (this.focusTarget) {
      case "tooltip":
        this.scrollableEl.focus({ preventScroll: true });
        break;
      case "trigger":
        this.buttonEl.focus({ preventScroll: true });
        break;
    }
    this.focusTarget = null;
  }
  /**
   * Component event handling.
   */
  onScroll() {
    clearTimeout(this.scrollTimer);
    this.scrollTimer = setTimeout(() => {
      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      if (!this.isElementInViewport(this.tooltipEl)) {
        this.openDown = scrollTop > this.lastScrollTop;
      }
      this.lastScrollTop = Math.max(0, scrollTop);
    }, 100);
  }
  handleDocumentClick(e) {
    if (!this.active) {
      return;
    }
    const path = e.composedPath();
    const isClickOutside = path.every(el => el !== this.element);
    if (isClickOutside) {
      this.closeTooltip();
    }
  }
  async handleActiveChange(newActiveValue) {
    if (newActiveValue) {
      this.openDown = !this.isElementInViewport(this.tooltipEl);
    }
    else {
      setTimeout(() => (this.openDown = false), 300);
    }
  }
  /**
   * render() function.
   * Always the last one in the class.
   */
  render() {
    const tooltipStyles = {
      transform: `translateY(${this.positionVertical}) translateX(${this.positionHorizontal})`,
      // This is needed to that the active tooltip stacks on
      // top of other tooltips and the header.
      zIndex: this.active ? "201" : "",
    };
    return (h(Host, { style: tooltipStyles }, h("button", { ref: element => (this.buttonEl = element), "aria-controls": this.tooltipId, "aria-expanded": this.active ? "true" : "false", onClick: this.toggleOpen, type: "button", class: {
        "duet-tooltip-button": true,
        "duet-tooltip-button-has-label": !!this.label,
        "duet-theme-turva": this.theme === "turva",
      } }, h("svg", { "aria-hidden": "true", role: "img", fill: "currentColor", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg" }, h("path", { d: "m13.5 17.25c-1.241 0-2.25-1.009-2.25-2.25v-3.75h-.75c-.414 0-.75-.336-.75-.75s.336-.75.75-.75h.75c.827 0 1.5.673 1.5 1.5v3.75c0 .414.336.75.75.75h.75c.414 0 .75.336.75.75s-.336.75-.75.75z" }), h("circle", { cx: "11.625", cy: "7.125", r: "1.125" }), h("path", { d: "m12 24c-6.617 0-12-5.383-12-12s5.383-12 12-12 12 5.383 12 12-5.383 12-12 12zm0-22.5c-5.79 0-10.5 4.71-10.5 10.5s4.71 10.5 10.5 10.5 10.5-4.71 10.5-10.5-4.71-10.5-10.5-10.5z" })), this.label ? (h("span", { class: "duet-tooltip-label" }, this.label)) : (h("duet-visually-hidden", null, this.accessibleInputLabel
      ? `${this.accessibleInputLabel}, ${this.accessibleLabel}`
      : this.accessibleLabel))), h("div", { ref: element => (this.tooltipEl = element), class: {
        "duet-tooltip": true,
        "duet-mq-large": this.breakpoint === "large",
        "duet-mq-medium": this.breakpoint === "medium",
        "duet-theme-turva": this.theme === "turva",
        "duet-tooltip-down": this.openDown,
        "duet-tooltip-has-label": !!this.label,
        "duet-tooltip-left": this.direction === "left",
        "duet-tooltip-right": this.direction === "right",
        "duet-tooltip-active": this.active === true,
      }, onClick: e => e.stopPropagation(), onKeyDown: this.handleKeyDown, onFocusout: this.handleFocusOut }, h("div", { ref: element => (this.scrollableEl = element), class: "duet-tooltip-scrollable", tabindex: "0", id: this.tooltipId }, h("slot", null)), h("button", { type: "button", class: "duet-tooltip-close", onClick: this.handleCloseClick }, h("duet-icon", { name: "navigation-close-small", margin: "none", color: "currentColor", size: "xxx-small" }), h("duet-visually-hidden", null, this.accessibleCloseLabel)))));
  }
  get element() { return getElement(this); }
  static get watchers() { return {
    "active": ["handleActiveChange"]
  }; }
};
DuetTooltip.style = duetTooltipCss;

export { DuetTooltip as duet_tooltip };
