import * as tslib_1 from 'tslib';
import { Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, NgZone, HostListener, Directive, NgModule } from '@angular/core';
import { fromEvent } from 'rxjs';
import { defineCustomElements } from '@duetds/components/lib/loader';
import { NG_VALUE_ACCESSOR } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var proxyInputs = (/**
 * @param {?} Cmp
 * @param {?} inputs
 * @return {?}
 */
function (Cmp, inputs) {
    /** @type {?} */
    var Prototype = Cmp.prototype;
    inputs.forEach((/**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        Object.defineProperty(Prototype, item, {
            get: /**
             * @return {?}
             */
            function () { return this.el[item]; },
            set: /**
             * @param {?} val
             * @return {?}
             */
            function (val) {
                var _this = this;
                this.z.runOutsideAngular((/**
                 * @return {?}
                 */
                function () { return (_this.el[item] = val); }));
            }
        });
    }));
});
/** @type {?} */
var proxyMethods = (/**
 * @param {?} Cmp
 * @param {?} methods
 * @return {?}
 */
function (Cmp, methods) {
    /** @type {?} */
    var Prototype = Cmp.prototype;
    methods.forEach((/**
     * @param {?} methodName
     * @return {?}
     */
    function (methodName) {
        Prototype[methodName] = (/**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var args = arguments;
            return this.z.runOutsideAngular((/**
             * @return {?}
             */
            function () { return _this.el[methodName].apply(_this.el, args); }));
        });
    }));
});
/** @type {?} */
var proxyOutputs = (/**
 * @param {?} instance
 * @param {?} el
 * @param {?} events
 * @return {?}
 */
function (instance, el, events) {
    events.forEach((/**
     * @param {?} eventName
     * @return {?}
     */
    function (eventName) { return instance[eventName] = fromEvent(el, eventName); }));
})
// tslint:disable-next-line: only-arrow-functions
;
// tslint:disable-next-line: only-arrow-functions
/**
 * @param {?} opts
 * @return {?}
 */
function ProxyCmp(opts) {
    /** @type {?} */
    var decorator = (/**
     * @param {?} cls
     * @return {?}
     */
    function (cls) {
        if (opts.inputs) {
            proxyInputs(cls, opts.inputs);
        }
        if (opts.methods) {
            proxyMethods(cls, opts.methods);
        }
        return cls;
    });
    return decorator;
}
var DuetActionButton = /** @class */ (function () {
    function DuetActionButton(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetActionEvent']);
    }
    DuetActionButton.decorators = [
        { type: Component, args: [{ selector: 'duet-action-button', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleLabelledBy', 'accessibleLabels', 'accessibleLabelsDefaults', 'accessibleTitle', 'actionId', 'actionMeta', 'actionName', 'background', 'color', 'disabled', 'iconColor', 'iconName', 'iconSize', 'theme'] },] },
    ];
    /** @nocollapse */
    DuetActionButton.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetActionButton = tslib_1.__decorate([
        ProxyCmp({ inputs: ['accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleLabelledBy', 'accessibleLabels', 'accessibleLabelsDefaults', 'accessibleTitle', 'actionId', 'actionMeta', 'actionName', 'background', 'color', 'disabled', 'iconColor', 'iconName', 'iconSize', 'theme'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetActionButton);
    return DuetActionButton;
}());
var DuetAlert = /** @class */ (function () {
    function DuetAlert(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetDismiss']);
    }
    DuetAlert.decorators = [
        { type: Component, args: [{ selector: 'duet-alert', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleLabel', 'accessibleLabelDefaults', 'announcements', 'autoDismiss', 'dismissible', 'icon', 'margin', 'padding', 'theme', 'variation'] },] },
    ];
    /** @nocollapse */
    DuetAlert.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetAlert = tslib_1.__decorate([
        ProxyCmp({ inputs: ['accessibleLabel', 'accessibleLabelDefaults', 'announcements', 'autoDismiss', 'dismissible', 'icon', 'margin', 'padding', 'theme', 'variation'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetAlert);
    return DuetAlert;
}());
var DuetBadge = /** @class */ (function () {
    function DuetBadge(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    DuetBadge.decorators = [
        { type: Component, args: [{ selector: 'duet-badge', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['margin', 'theme', 'variation'] },] },
    ];
    /** @nocollapse */
    DuetBadge.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetBadge = tslib_1.__decorate([
        ProxyCmp({ inputs: ['margin', 'theme', 'variation'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetBadge);
    return DuetBadge;
}());
var DuetBreadcrumb = /** @class */ (function () {
    function DuetBreadcrumb(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    DuetBreadcrumb.decorators = [
        { type: Component, args: [{ selector: 'duet-breadcrumb', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleLabel', 'href', 'icon', 'theme'] },] },
    ];
    /** @nocollapse */
    DuetBreadcrumb.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetBreadcrumb = tslib_1.__decorate([
        ProxyCmp({ inputs: ['accessibleLabel', 'href', 'icon', 'theme'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetBreadcrumb);
    return DuetBreadcrumb;
}());
var DuetBreadcrumbs = /** @class */ (function () {
    function DuetBreadcrumbs(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    DuetBreadcrumbs.decorators = [
        { type: Component, args: [{ selector: 'duet-breadcrumbs', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['theme'] },] },
    ];
    /** @nocollapse */
    DuetBreadcrumbs.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetBreadcrumbs = tslib_1.__decorate([
        ProxyCmp({ inputs: ['theme'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetBreadcrumbs);
    return DuetBreadcrumbs;
}());
var DuetButton = /** @class */ (function () {
    function DuetButton(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetFocus', 'duetBlur']);
    }
    DuetButton.decorators = [
        { type: Component, args: [{ selector: 'duet-button', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleExpanded', 'accessibleLabel', 'accessibleLabelExternal', 'accessibleLabelExternalDefaults', 'accessibleLabelledBy', 'accessibleOwns', 'accessiblePopup', 'accessiblePressed', 'centerText', 'color', 'disabled', 'expand', 'external', 'fixed', 'icon', 'iconOnly', 'iconRight', 'iconSize', 'identifier', 'language', 'loading', 'margin', 'name', 'negative', 'padding', 'size', 'submit', 'theme', 'url', 'value', 'variation', 'wrapping'] },] },
    ];
    /** @nocollapse */
    DuetButton.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetButton = tslib_1.__decorate([
        ProxyCmp({ inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleExpanded', 'accessibleLabel', 'accessibleLabelExternal', 'accessibleLabelExternalDefaults', 'accessibleLabelledBy', 'accessibleOwns', 'accessiblePopup', 'accessiblePressed', 'centerText', 'color', 'disabled', 'expand', 'external', 'fixed', 'icon', 'iconOnly', 'iconRight', 'iconSize', 'identifier', 'language', 'loading', 'margin', 'name', 'negative', 'padding', 'size', 'submit', 'theme', 'url', 'value', 'variation', 'wrapping'], 'methods': ['setFocus'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetButton);
    return DuetButton;
}());
var DuetCaption = /** @class */ (function () {
    function DuetCaption(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    DuetCaption.decorators = [
        { type: Component, args: [{ selector: 'duet-caption', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['margin', 'selected', 'size', 'theme'] },] },
    ];
    /** @nocollapse */
    DuetCaption.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetCaption = tslib_1.__decorate([
        ProxyCmp({ inputs: ['margin', 'selected', 'size', 'theme'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetCaption);
    return DuetCaption;
}());
var DuetCard = /** @class */ (function () {
    function DuetCard(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetToggle']);
    }
    DuetCard.decorators = [
        { type: Component, args: [{ selector: 'duet-card', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleLabel', 'background', 'collapsible', 'heading', 'headingLevel', 'icon', 'image', 'margin', 'open', 'padding', 'secondaryHeading', 'theme', 'url', 'variation'] },] },
    ];
    /** @nocollapse */
    DuetCard.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetCard = tslib_1.__decorate([
        ProxyCmp({ inputs: ['accessibleLabel', 'background', 'collapsible', 'heading', 'headingLevel', 'icon', 'image', 'margin', 'open', 'padding', 'secondaryHeading', 'theme', 'url', 'variation'], 'methods': ['setFocus'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetCard);
    return DuetCard;
}());
var DuetCheckbox = /** @class */ (function () {
    function DuetCheckbox(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetChange', 'duetFocus', 'duetBlur']);
    }
    DuetCheckbox.decorators = [
        { type: Component, args: [{ selector: 'duet-checkbox', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleIndex', 'accessibleLabelledBy', 'accessibleOwns', 'accessibleSelected', 'checked', 'disabled', 'identifier', 'label', 'labelHidden', 'margin', 'name', 'required', 'role', 'theme', 'value'] },] },
    ];
    /** @nocollapse */
    DuetCheckbox.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetCheckbox = tslib_1.__decorate([
        ProxyCmp({ inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleIndex', 'accessibleLabelledBy', 'accessibleOwns', 'accessibleSelected', 'checked', 'disabled', 'identifier', 'label', 'labelHidden', 'margin', 'name', 'required', 'role', 'theme', 'value'], 'methods': ['setFocus'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetCheckbox);
    return DuetCheckbox;
}());
var DuetChoice = /** @class */ (function () {
    function DuetChoice(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetChange', 'duetFocus', 'duetBlur']);
    }
    DuetChoice.decorators = [
        { type: Component, args: [{ selector: 'duet-choice', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleLabelInfoButton', 'accessibleLabelInfoButtonDefaults', 'accessibleLabelledBy', 'accessibleOwns', 'caption', 'checked', 'collapsible', 'disabled', 'expand', 'icon', 'identifier', 'infoLabel', 'infoLabelDefaults', 'label', 'margin', 'name', 'padding', 'required', 'theme', 'type', 'value'] },] },
    ];
    /** @nocollapse */
    DuetChoice.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetChoice = tslib_1.__decorate([
        ProxyCmp({ inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleLabelInfoButton', 'accessibleLabelInfoButtonDefaults', 'accessibleLabelledBy', 'accessibleOwns', 'caption', 'checked', 'collapsible', 'disabled', 'expand', 'icon', 'identifier', 'infoLabel', 'infoLabelDefaults', 'label', 'margin', 'name', 'padding', 'required', 'theme', 'type', 'value'], 'methods': ['setFocus'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetChoice);
    return DuetChoice;
}());
var DuetChoiceGroup = /** @class */ (function () {
    function DuetChoiceGroup(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    DuetChoiceGroup.decorators = [
        { type: Component, args: [{ selector: 'duet-choice-group', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['caption', 'direction', 'disabled', 'error', 'label', 'labelHidden', 'margin', 'name', 'responsive', 'theme', 'tooltip', 'tooltipDirection', 'value'] },] },
    ];
    /** @nocollapse */
    DuetChoiceGroup.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetChoiceGroup = tslib_1.__decorate([
        ProxyCmp({ inputs: ['caption', 'direction', 'disabled', 'error', 'label', 'labelHidden', 'margin', 'name', 'responsive', 'theme', 'tooltip', 'tooltipDirection', 'value'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetChoiceGroup);
    return DuetChoiceGroup;
}());
var DuetCollapsible = /** @class */ (function () {
    function DuetCollapsible(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetToggle']);
    }
    DuetCollapsible.decorators = [
        { type: Component, args: [{ selector: 'duet-collapsible', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['heading', 'headingLevel', 'headingSize', 'headingWeight', 'margin', 'open', 'theme'] },] },
    ];
    /** @nocollapse */
    DuetCollapsible.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetCollapsible = tslib_1.__decorate([
        ProxyCmp({ inputs: ['heading', 'headingLevel', 'headingSize', 'headingWeight', 'margin', 'open', 'theme'], 'methods': ['setFocus'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetCollapsible);
    return DuetCollapsible;
}());
var DuetCombobox = /** @class */ (function () {
    function DuetCombobox(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetChange']);
    }
    DuetCombobox.decorators = [
        { type: Component, args: [{ selector: 'duet-combobox', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleLabelDefaults', 'accessibleLabels', 'force', 'formatter', 'items', 'theme', 'value'] },] },
    ];
    /** @nocollapse */
    DuetCombobox.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetCombobox = tslib_1.__decorate([
        ProxyCmp({ inputs: ['accessibleLabelDefaults', 'accessibleLabels', 'force', 'formatter', 'items', 'theme', 'value'], 'methods': ['formatItem'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetCombobox);
    return DuetCombobox;
}());
var DuetCookieConsent = /** @class */ (function () {
    function DuetCookieConsent(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetCookieConsent']);
    }
    DuetCookieConsent.decorators = [
        { type: Component, args: [{ selector: 'duet-cookie-consent', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleLabel', 'theme'] },] },
    ];
    /** @nocollapse */
    DuetCookieConsent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetCookieConsent = tslib_1.__decorate([
        ProxyCmp({ inputs: ['accessibleLabel', 'theme'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetCookieConsent);
    return DuetCookieConsent;
}());
var DuetDatePicker = /** @class */ (function () {
    function DuetDatePicker(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetChange', 'duetBlur', 'duetFocus']);
    }
    DuetDatePicker.decorators = [
        { type: Component, args: [{ selector: 'duet-date-picker', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleOwns', 'caption', 'direction', 'disabled', 'echoPlaceholder', 'error', 'expand', 'identifier', 'incrementYears', 'label', 'labelHidden', 'language', 'margin', 'max', 'min', 'name', 'placeholder', 'placeholderDefaults', 'required', 'role', 'theme', 'tooltip', 'tooltipDirection', 'validity', 'value'] },] },
    ];
    /** @nocollapse */
    DuetDatePicker.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetDatePicker = tslib_1.__decorate([
        ProxyCmp({ inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleOwns', 'caption', 'direction', 'disabled', 'echoPlaceholder', 'error', 'expand', 'identifier', 'incrementYears', 'label', 'labelHidden', 'language', 'margin', 'max', 'min', 'name', 'placeholder', 'placeholderDefaults', 'required', 'role', 'theme', 'tooltip', 'tooltipDirection', 'validity', 'value'], 'methods': ['setFocus', 'show', 'hide'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetDatePicker);
    return DuetDatePicker;
}());
var DuetDivider = /** @class */ (function () {
    function DuetDivider(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    DuetDivider.decorators = [
        { type: Component, args: [{ selector: 'duet-divider', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['margin', 'theme'] },] },
    ];
    /** @nocollapse */
    DuetDivider.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetDivider = tslib_1.__decorate([
        ProxyCmp({ inputs: ['margin', 'theme'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetDivider);
    return DuetDivider;
}());
var DuetEditableTable = /** @class */ (function () {
    function DuetEditableTable(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetTableToggle', 'duetMenuClick']);
    }
    DuetEditableTable.decorators = [
        { type: Component, args: [{ selector: 'duet-editable-table', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleRole', 'actions', 'breakpoint', 'columns', 'groupId', 'margin', 'rows', 'sortable', 'sticky', 'stickyDistance', 'theme', 'variation'] },] },
    ];
    /** @nocollapse */
    DuetEditableTable.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetEditableTable = tslib_1.__decorate([
        ProxyCmp({ inputs: ['accessibleRole', 'actions', 'breakpoint', 'columns', 'groupId', 'margin', 'rows', 'sortable', 'sticky', 'stickyDistance', 'theme', 'variation'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetEditableTable);
    return DuetEditableTable;
}());
var DuetEmptyState = /** @class */ (function () {
    function DuetEmptyState(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    DuetEmptyState.decorators = [
        { type: Component, args: [{ selector: 'duet-empty-state', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['icon', 'size', 'theme'] },] },
    ];
    /** @nocollapse */
    DuetEmptyState.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetEmptyState = tslib_1.__decorate([
        ProxyCmp({ inputs: ['icon', 'size', 'theme'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetEmptyState);
    return DuetEmptyState;
}());
var DuetFieldset = /** @class */ (function () {
    function DuetFieldset(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    DuetFieldset.decorators = [
        { type: Component, args: [{ selector: 'duet-fieldset', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['caption', 'error', 'label', 'labelHidden', 'margin', 'theme'] },] },
    ];
    /** @nocollapse */
    DuetFieldset.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetFieldset = tslib_1.__decorate([
        ProxyCmp({ inputs: ['caption', 'error', 'label', 'labelHidden', 'margin', 'theme'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetFieldset);
    return DuetFieldset;
}());
var DuetFooter = /** @class */ (function () {
    function DuetFooter(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetChange', 'duetLogoClick', 'duetMenuClick', 'duetItemClick', 'duetAnalytics', 'duetEvent']);
    }
    DuetFooter.decorators = [
        { type: Component, args: [{ selector: 'duet-footer', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleLabelExternal', 'accessibleLabelExternalDefaults', 'items', 'language', 'logoHref', 'margin', 'menu', 'theme', 'variation'] },] },
    ];
    /** @nocollapse */
    DuetFooter.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetFooter = tslib_1.__decorate([
        ProxyCmp({ inputs: ['accessibleLabelExternal', 'accessibleLabelExternalDefaults', 'items', 'language', 'logoHref', 'margin', 'menu', 'theme', 'variation'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetFooter);
    return DuetFooter;
}());
var DuetGrid = /** @class */ (function () {
    function DuetGrid(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    DuetGrid.decorators = [
        { type: Component, args: [{ selector: 'duet-grid', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['alignment', 'breakpoint', 'direction', 'distribution', 'mobile', 'responsive'] },] },
    ];
    /** @nocollapse */
    DuetGrid.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetGrid = tslib_1.__decorate([
        ProxyCmp({ inputs: ['alignment', 'breakpoint', 'direction', 'distribution', 'mobile', 'responsive'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetGrid);
    return DuetGrid;
}());
var DuetGridItem = /** @class */ (function () {
    function DuetGridItem(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    DuetGridItem.decorators = [
        { type: Component, args: [{ selector: 'duet-grid-item', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['fill', 'margin', 'maxWidth', 'minWidth', 'theme'] },] },
    ];
    /** @nocollapse */
    DuetGridItem.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetGridItem = tslib_1.__decorate([
        ProxyCmp({ inputs: ['fill', 'margin', 'maxWidth', 'minWidth', 'theme'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetGridItem);
    return DuetGridItem;
}());
var DuetHeader = /** @class */ (function () {
    function DuetHeader(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetChange', 'duetSessionClick', 'duetSearchClick', 'duetUserClick', 'duetLanguageSelect', 'duetLogoClick', 'duetBackClick', 'duetContactClick', 'duetItemClick', 'duetSkipClick', 'duetAnalytics', 'duetMobileNavToggle', 'duetEvent']);
    }
    DuetHeader.decorators = [
        { type: Component, args: [{ selector: 'duet-header', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleI18nLabels', 'accessibleI18nLabelsDefaults', 'accessibleLabel', 'accessibleLabelDefaults', 'accessibleLabelExternal', 'accessibleLabelExternalDefaults', 'back', 'contact', 'contactItems', 'currentHref', 'items', 'language', 'languageItems', 'logoHref', 'region', 'search', 'session', 'skipToId', 'theme', 'user'] },] },
    ];
    /** @nocollapse */
    DuetHeader.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetHeader = tslib_1.__decorate([
        ProxyCmp({ inputs: ['accessibleI18nLabels', 'accessibleI18nLabelsDefaults', 'accessibleLabel', 'accessibleLabelDefaults', 'accessibleLabelExternal', 'accessibleLabelExternalDefaults', 'back', 'contact', 'contactItems', 'currentHref', 'items', 'language', 'languageItems', 'logoHref', 'region', 'search', 'session', 'skipToId', 'theme', 'user'], 'methods': ['closeMenus', 'setFocus'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetHeader);
    return DuetHeader;
}());
var DuetHeading = /** @class */ (function () {
    function DuetHeading(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    DuetHeading.decorators = [
        { type: Component, args: [{ selector: 'duet-heading', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['border', 'color', 'hyphenate', 'level', 'margin', 'theme', 'visualLevel', 'weight'] },] },
    ];
    /** @nocollapse */
    DuetHeading.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetHeading = tslib_1.__decorate([
        ProxyCmp({ inputs: ['border', 'color', 'hyphenate', 'level', 'margin', 'theme', 'visualLevel', 'weight'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetHeading);
    return DuetHeading;
}());
var DuetHero = /** @class */ (function () {
    function DuetHero(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetClick', 'duetAnalytics']);
    }
    DuetHero.decorators = [
        { type: Component, args: [{ selector: 'duet-hero', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleLabelExternal', 'accessibleLabelExternalDefaults', 'actions', 'back', 'buttonData', 'buttonId', 'buttonLabel', 'buttonUrl', 'categoryIcon', 'categoryIconColor', 'description', 'heading', 'icon', 'iconRight', 'iconSize', 'image', 'language', 'leftAlign', 'level', 'listItems', 'preHeading', 'textCenter', 'theme', 'variation'] },] },
    ];
    /** @nocollapse */
    DuetHero.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetHero = tslib_1.__decorate([
        ProxyCmp({ inputs: ['accessibleLabelExternal', 'accessibleLabelExternalDefaults', 'actions', 'back', 'buttonData', 'buttonId', 'buttonLabel', 'buttonUrl', 'categoryIcon', 'categoryIconColor', 'description', 'heading', 'icon', 'iconRight', 'iconSize', 'image', 'language', 'leftAlign', 'level', 'listItems', 'preHeading', 'textCenter', 'theme', 'variation'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetHero);
    return DuetHero;
}());
var DuetIcon = /** @class */ (function () {
    function DuetIcon(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    DuetIcon.decorators = [
        { type: Component, args: [{ selector: 'duet-icon', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['background', 'color', 'icon', 'margin', 'name', 'outline', 'responsive', 'size', 'src', 'theme'] },] },
    ];
    /** @nocollapse */
    DuetIcon.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetIcon = tslib_1.__decorate([
        ProxyCmp({ inputs: ['background', 'color', 'icon', 'margin', 'name', 'outline', 'responsive', 'size', 'src', 'theme'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetIcon);
    return DuetIcon;
}());
var DuetInput = /** @class */ (function () {
    function DuetInput(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetInput', 'duetChange', 'duetBlur', 'duetClear', 'duetFocus']);
    }
    DuetInput.decorators = [
        { type: Component, args: [{ selector: 'duet-input', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleActiveDescendant', 'accessibleAutocomplete', 'accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleExpanded', 'accessibleHasPopup', 'accessibleLabelledBy', 'accessibleOwns', 'autoComplete', 'caption', 'clear', 'component', 'debounce', 'disabled', 'disallowPattern', 'echoPlaceholder', 'error', 'expand', 'icon', 'identifier', 'label', 'labelHidden', 'margin', 'maxlength', 'minlength', 'name', 'numericKeyboard', 'pattern', 'placeholder', 'required', 'role', 'theme', 'tooltip', 'tooltipDirection', 'type', 'value', 'variation'] },] },
    ];
    /** @nocollapse */
    DuetInput.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetInput = tslib_1.__decorate([
        ProxyCmp({ inputs: ['accessibleActiveDescendant', 'accessibleAutocomplete', 'accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleExpanded', 'accessibleHasPopup', 'accessibleLabelledBy', 'accessibleOwns', 'autoComplete', 'caption', 'clear', 'component', 'debounce', 'disabled', 'disallowPattern', 'echoPlaceholder', 'error', 'expand', 'icon', 'identifier', 'label', 'labelHidden', 'margin', 'maxlength', 'minlength', 'name', 'numericKeyboard', 'pattern', 'placeholder', 'required', 'role', 'theme', 'tooltip', 'tooltipDirection', 'type', 'value', 'variation'], 'methods': ['setFocus', 'resetCursor', 'clearInput'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetInput);
    return DuetInput;
}());
var DuetLabel = /** @class */ (function () {
    function DuetLabel(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    DuetLabel.decorators = [
        { type: Component, args: [{ selector: 'duet-label', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['for', 'margin', 'size', 'theme'] },] },
    ];
    /** @nocollapse */
    DuetLabel.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetLabel = tslib_1.__decorate([
        ProxyCmp({ inputs: ['for', 'margin', 'size', 'theme'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetLabel);
    return DuetLabel;
}());
var DuetLayout = /** @class */ (function () {
    function DuetLayout(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    DuetLayout.decorators = [
        { type: Component, args: [{ selector: 'duet-layout', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['center', 'margin', 'middle', 'sticky', 'stickyDistance', 'tabs'] },] },
    ];
    /** @nocollapse */
    DuetLayout.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetLayout = tslib_1.__decorate([
        ProxyCmp({ inputs: ['center', 'margin', 'middle', 'sticky', 'stickyDistance', 'tabs'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetLayout);
    return DuetLayout;
}());
var DuetLink = /** @class */ (function () {
    function DuetLink(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    DuetLink.decorators = [
        { type: Component, args: [{ selector: 'duet-link', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleLabel', 'accessibleLabelExternal', 'accessibleLabelExternalDefaults', 'external', 'identifier', 'language', 'theme', 'url'] },] },
    ];
    /** @nocollapse */
    DuetLink.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetLink = tslib_1.__decorate([
        ProxyCmp({ inputs: ['accessibleLabel', 'accessibleLabelExternal', 'accessibleLabelExternalDefaults', 'external', 'identifier', 'language', 'theme', 'url'], 'methods': ['setFocus'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetLink);
    return DuetLink;
}());
var DuetList = /** @class */ (function () {
    function DuetList(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    DuetList.decorators = [
        { type: Component, args: [{ selector: 'duet-list', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['breakpoint', 'labelWidth', 'margin', 'mobile', 'padding', 'theme', 'variation'] },] },
    ];
    /** @nocollapse */
    DuetList.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetList = tslib_1.__decorate([
        ProxyCmp({ inputs: ['breakpoint', 'labelWidth', 'margin', 'mobile', 'padding', 'theme', 'variation'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetList);
    return DuetList;
}());
var DuetListItem = /** @class */ (function () {
    function DuetListItem(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    DuetListItem.decorators = [
        { type: Component, args: [{ selector: 'duet-list-item', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>' },] },
    ];
    /** @nocollapse */
    DuetListItem.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    return DuetListItem;
}());
var DuetLogo = /** @class */ (function () {
    function DuetLogo(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    DuetLogo.decorators = [
        { type: Component, args: [{ selector: 'duet-logo', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['href', 'inverse', 'language', 'margin', 'size', 'theme'] },] },
    ];
    /** @nocollapse */
    DuetLogo.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetLogo = tslib_1.__decorate([
        ProxyCmp({ inputs: ['href', 'inverse', 'language', 'margin', 'size', 'theme'], 'methods': ['setFocus'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetLogo);
    return DuetLogo;
}());
var DuetModal = /** @class */ (function () {
    function DuetModal(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetOpen', 'duetClose', 'duetBeforeClose']);
    }
    DuetModal.decorators = [
        { type: Component, args: [{ selector: 'duet-modal', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleCloseLabel', 'accessibleCloseLabelDefaults', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleLabelledBy', 'active', 'closeOnBlur', 'color', 'gutterSize', 'heading', 'headingLevel', 'icon', 'language', 'size', 'theme'] },] },
    ];
    /** @nocollapse */
    DuetModal.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetModal = tslib_1.__decorate([
        ProxyCmp({ inputs: ['accessibleCloseLabel', 'accessibleCloseLabelDefaults', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleLabelledBy', 'active', 'closeOnBlur', 'color', 'gutterSize', 'heading', 'headingLevel', 'icon', 'language', 'size', 'theme'], 'methods': ['show', 'hide'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetModal);
    return DuetModal;
}());
var DuetMultiselect = /** @class */ (function () {
    function DuetMultiselect(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetChange', 'duetFocus', 'duetBlur']);
    }
    DuetMultiselect.decorators = [
        { type: Component, args: [{ selector: 'duet-multiselect', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['caption', 'disabled', 'error', 'expand', 'identifier', 'items', 'label', 'labelHidden', 'margin', 'placeholder', 'theme', 'tooltip', 'tooltipDirection', 'value'] },] },
    ];
    /** @nocollapse */
    DuetMultiselect.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetMultiselect = tslib_1.__decorate([
        ProxyCmp({ inputs: ['caption', 'disabled', 'error', 'expand', 'identifier', 'items', 'label', 'labelHidden', 'margin', 'placeholder', 'theme', 'tooltip', 'tooltipDirection', 'value'], 'methods': ['setFocus'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetMultiselect);
    return DuetMultiselect;
}());
var DuetNotification = /** @class */ (function () {
    function DuetNotification(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    DuetNotification.decorators = [
        { type: Component, args: [{ selector: 'duet-notification', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleLabelUnread', 'accessibleLabelUnreadDefaults', 'date', 'external', 'highlight', 'language', 'theme', 'url'] },] },
    ];
    /** @nocollapse */
    DuetNotification.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetNotification = tslib_1.__decorate([
        ProxyCmp({ inputs: ['accessibleLabelUnread', 'accessibleLabelUnreadDefaults', 'date', 'external', 'highlight', 'language', 'theme', 'url'], 'methods': ['setFocus'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetNotification);
    return DuetNotification;
}());
var DuetNotificationDrawer = /** @class */ (function () {
    function DuetNotificationDrawer(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    DuetNotificationDrawer.decorators = [
        { type: Component, args: [{ selector: 'duet-notification-drawer', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleLabelNotifications', 'accessibleLabelNotificationsDefaults', 'badge', 'direction', 'icon', 'label', 'language', 'theme'] },] },
    ];
    /** @nocollapse */
    DuetNotificationDrawer.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetNotificationDrawer = tslib_1.__decorate([
        ProxyCmp({ inputs: ['accessibleLabelNotifications', 'accessibleLabelNotificationsDefaults', 'badge', 'direction', 'icon', 'label', 'language', 'theme'], 'methods': ['setFocus', 'open', 'close'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetNotificationDrawer);
    return DuetNotificationDrawer;
}());
var DuetNumberInput = /** @class */ (function () {
    function DuetNumberInput(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetChange', 'duetInput', 'duetBlur', 'duetFocus']);
    }
    DuetNumberInput.decorators = [
        { type: Component, args: [{ selector: 'duet-number-input', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleActiveDescendant', 'accessibleAdd', 'accessibleAddDefaults', 'accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleLabelledBy', 'accessibleLive', 'accessibleLiveDefaults', 'accessibleLiveEnabled', 'accessibleOwns', 'accessibleSubtract', 'accessibleSubtractDefaults', 'disabled', 'error', 'expand', 'identifier', 'label', 'labelDefaults', 'labelHidden', 'language', 'locale', 'margin', 'max', 'min', 'name', 'required', 'role', 'rounding', 'step', 'theme', 'tooltip', 'unit', 'value'] },] },
    ];
    /** @nocollapse */
    DuetNumberInput.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetNumberInput = tslib_1.__decorate([
        ProxyCmp({ inputs: ['accessibleActiveDescendant', 'accessibleAdd', 'accessibleAddDefaults', 'accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleLabelledBy', 'accessibleLive', 'accessibleLiveDefaults', 'accessibleLiveEnabled', 'accessibleOwns', 'accessibleSubtract', 'accessibleSubtractDefaults', 'disabled', 'error', 'expand', 'identifier', 'label', 'labelDefaults', 'labelHidden', 'language', 'locale', 'margin', 'max', 'min', 'name', 'required', 'role', 'rounding', 'step', 'theme', 'tooltip', 'unit', 'value'], 'methods': ['setFocus'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetNumberInput);
    return DuetNumberInput;
}());
var DuetPagination = /** @class */ (function () {
    function DuetPagination(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetPageChange']);
    }
    DuetPagination.decorators = [
        { type: Component, args: [{ selector: 'duet-pagination', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleLabelledBy', 'accessibleLabels', 'accessibleLabelsDefaults', 'ariaControls', 'current', 'jumpString', 'take', 'theme', 'total', 'variation', 'visibleItems'] },] },
    ];
    /** @nocollapse */
    DuetPagination.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetPagination = tslib_1.__decorate([
        ProxyCmp({ inputs: ['accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleLabelledBy', 'accessibleLabels', 'accessibleLabelsDefaults', 'ariaControls', 'current', 'jumpString', 'take', 'theme', 'total', 'variation', 'visibleItems'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetPagination);
    return DuetPagination;
}());
var DuetParagraph = /** @class */ (function () {
    function DuetParagraph(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    DuetParagraph.decorators = [
        { type: Component, args: [{ selector: 'duet-paragraph', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['color', 'margin', 'size', 'theme', 'variation', 'weight'] },] },
    ];
    /** @nocollapse */
    DuetParagraph.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetParagraph = tslib_1.__decorate([
        ProxyCmp({ inputs: ['color', 'margin', 'size', 'theme', 'variation', 'weight'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetParagraph);
    return DuetParagraph;
}());
var DuetProgress = /** @class */ (function () {
    function DuetProgress(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    DuetProgress.decorators = [
        { type: Component, args: [{ selector: 'duet-progress', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleLabel', 'accessibleLabelUpload', 'accessibleLabelUploadDefaults', 'accessibleLabelledBy', 'caption', 'height', 'progress', 'theme'] },] },
    ];
    /** @nocollapse */
    DuetProgress.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetProgress = tslib_1.__decorate([
        ProxyCmp({ inputs: ['accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleLabel', 'accessibleLabelUpload', 'accessibleLabelUploadDefaults', 'accessibleLabelledBy', 'caption', 'height', 'progress', 'theme'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetProgress);
    return DuetProgress;
}());
var DuetRadio = /** @class */ (function () {
    function DuetRadio(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetChange', 'duetFocus', 'duetBlur']);
    }
    DuetRadio.decorators = [
        { type: Component, args: [{ selector: 'duet-radio', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleIndex', 'accessibleLabelledBy', 'accessibleOwns', 'blockEvents', 'checked', 'disabled', 'identifier', 'label', 'margin', 'name', 'required', 'role', 'theme', 'value'] },] },
    ];
    /** @nocollapse */
    DuetRadio.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetRadio = tslib_1.__decorate([
        ProxyCmp({ inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleIndex', 'accessibleLabelledBy', 'accessibleOwns', 'blockEvents', 'checked', 'disabled', 'identifier', 'label', 'margin', 'name', 'required', 'role', 'theme', 'value'], 'methods': ['setFocus'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetRadio);
    return DuetRadio;
}());
var DuetRadioGroup = /** @class */ (function () {
    function DuetRadioGroup(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    DuetRadioGroup.decorators = [
        { type: Component, args: [{ selector: 'duet-radio-group', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['caption', 'direction', 'disabled', 'error', 'label', 'labelHidden', 'margin', 'name', 'responsive', 'theme', 'tooltip', 'tooltipDirection', 'value'] },] },
    ];
    /** @nocollapse */
    DuetRadioGroup.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetRadioGroup = tslib_1.__decorate([
        ProxyCmp({ inputs: ['caption', 'direction', 'disabled', 'error', 'label', 'labelHidden', 'margin', 'name', 'responsive', 'theme', 'tooltip', 'tooltipDirection', 'value'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetRadioGroup);
    return DuetRadioGroup;
}());
var DuetRangeSlider = /** @class */ (function () {
    function DuetRangeSlider(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetChange', 'duetInput']);
    }
    DuetRangeSlider.decorators = [
        { type: Component, args: [{ selector: 'duet-range-slider', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleOwns', 'debounce', 'disabled', 'expand', 'identifier', 'label', 'labelHidden', 'locale', 'margin', 'max', 'min', 'name', 'required', 'step', 'theme', 'unit', 'value'] },] },
    ];
    /** @nocollapse */
    DuetRangeSlider.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetRangeSlider = tslib_1.__decorate([
        ProxyCmp({ inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleOwns', 'debounce', 'disabled', 'expand', 'identifier', 'label', 'labelHidden', 'locale', 'margin', 'max', 'min', 'name', 'required', 'step', 'theme', 'unit', 'value'], 'methods': ['setFocus'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetRangeSlider);
    return DuetRangeSlider;
}());
var DuetRangeStepper = /** @class */ (function () {
    function DuetRangeStepper(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetRangeStepUpdate']);
    }
    DuetRangeStepper.decorators = [
        { type: Component, args: [{ selector: 'duet-range-stepper', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['ariaControls', 'ariaLabels', 'ariaLabelsDefaults', 'stepIndex', 'stepSize', 'theme', 'total'] },] },
    ];
    /** @nocollapse */
    DuetRangeStepper.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetRangeStepper = tslib_1.__decorate([
        ProxyCmp({ inputs: ['ariaControls', 'ariaLabels', 'ariaLabelsDefaults', 'stepIndex', 'stepSize', 'theme', 'total'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetRangeStepper);
    return DuetRangeStepper;
}());
var DuetScrollable = /** @class */ (function () {
    function DuetScrollable(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    DuetScrollable.decorators = [
        { type: Component, args: [{ selector: 'duet-scrollable', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['identifier', 'selected', 'theme'] },] },
    ];
    /** @nocollapse */
    DuetScrollable.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetScrollable = tslib_1.__decorate([
        ProxyCmp({ inputs: ['identifier', 'selected', 'theme'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetScrollable);
    return DuetScrollable;
}());
var DuetSelect = /** @class */ (function () {
    function DuetSelect(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetChange', 'duetFocus', 'duetBlur']);
    }
    DuetSelect.decorators = [
        { type: Component, args: [{ selector: 'duet-select', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleOwns', 'caption', 'disabled', 'echoPlaceholder', 'error', 'expand', 'identifier', 'items', 'label', 'labelHidden', 'margin', 'name', 'placeholder', 'required', 'role', 'theme', 'tooltip', 'tooltipDirection', 'value', 'variation'] },] },
    ];
    /** @nocollapse */
    DuetSelect.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetSelect = tslib_1.__decorate([
        ProxyCmp({ inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleOwns', 'caption', 'disabled', 'echoPlaceholder', 'error', 'expand', 'identifier', 'items', 'label', 'labelHidden', 'margin', 'name', 'placeholder', 'required', 'role', 'theme', 'tooltip', 'tooltipDirection', 'value', 'variation'], 'methods': ['setFocus'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetSelect);
    return DuetSelect;
}());
var DuetSpacer = /** @class */ (function () {
    function DuetSpacer(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    DuetSpacer.decorators = [
        { type: Component, args: [{ selector: 'duet-spacer', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['breakpoint', 'direction', 'size'] },] },
    ];
    /** @nocollapse */
    DuetSpacer.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetSpacer = tslib_1.__decorate([
        ProxyCmp({ inputs: ['breakpoint', 'direction', 'size'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetSpacer);
    return DuetSpacer;
}());
var DuetSpinner = /** @class */ (function () {
    function DuetSpinner(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    DuetSpinner.decorators = [
        { type: Component, args: [{ selector: 'duet-spinner', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleLabel', 'color', 'size', 'theme'] },] },
    ];
    /** @nocollapse */
    DuetSpinner.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetSpinner = tslib_1.__decorate([
        ProxyCmp({ inputs: ['accessibleLabel', 'color', 'size', 'theme'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetSpinner);
    return DuetSpinner;
}());
var DuetStep = /** @class */ (function () {
    function DuetStep(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetStepClick']);
    }
    DuetStep.decorators = [
        { type: Component, args: [{ selector: 'duet-step', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['heading', 'headingLevel', 'theme'] },] },
    ];
    /** @nocollapse */
    DuetStep.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetStep = tslib_1.__decorate([
        ProxyCmp({ inputs: ['heading', 'headingLevel', 'theme'], 'methods': ['setFocus'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetStep);
    return DuetStep;
}());
var DuetStepper = /** @class */ (function () {
    function DuetStepper(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetStepChange']);
    }
    DuetStepper.decorators = [
        { type: Component, args: [{ selector: 'duet-stepper', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleLive', 'backDisabled', 'margin', 'selected', 'theme'] },] },
    ];
    /** @nocollapse */
    DuetStepper.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetStepper = tslib_1.__decorate([
        ProxyCmp({ inputs: ['accessibleLive', 'backDisabled', 'margin', 'selected', 'theme'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetStepper);
    return DuetStepper;
}());
var DuetTab = /** @class */ (function () {
    function DuetTab(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    DuetTab.decorators = [
        { type: Component, args: [{ selector: 'duet-tab', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleDescription', 'accessibleDescriptionDefault', 'label', 'selected'] },] },
    ];
    /** @nocollapse */
    DuetTab.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetTab = tslib_1.__decorate([
        ProxyCmp({ inputs: ['accessibleDescription', 'accessibleDescriptionDefault', 'label', 'selected'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetTab);
    return DuetTab;
}());
var DuetTabGroup = /** @class */ (function () {
    function DuetTabGroup(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetChange', 'duetTabChange']);
    }
    DuetTabGroup.decorators = [
        { type: Component, args: [{ selector: 'duet-tab-group', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleLabel', 'collapses', 'identifier', 'label', 'labelDefaults', 'labelHidden', 'language', 'margin', 'padding', 'scrolls', 'theme', 'variation'] },] },
    ];
    /** @nocollapse */
    DuetTabGroup.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetTabGroup = tslib_1.__decorate([
        ProxyCmp({ inputs: ['accessibleLabel', 'collapses', 'identifier', 'label', 'labelDefaults', 'labelHidden', 'language', 'margin', 'padding', 'scrolls', 'theme', 'variation'], 'methods': ['openTab', 'refresh'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetTabGroup);
    return DuetTabGroup;
}());
var DuetTable = /** @class */ (function () {
    function DuetTable(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    DuetTable.decorators = [
        { type: Component, args: [{ selector: 'duet-table', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['breakpoint', 'margin', 'sticky', 'stickyDistance', 'theme', 'variation'] },] },
    ];
    /** @nocollapse */
    DuetTable.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetTable = tslib_1.__decorate([
        ProxyCmp({ inputs: ['breakpoint', 'margin', 'sticky', 'stickyDistance', 'theme', 'variation'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetTable);
    return DuetTable;
}());
var DuetTextarea = /** @class */ (function () {
    function DuetTextarea(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetInput', 'duetChange', 'duetBlur', 'duetFocus']);
    }
    DuetTextarea.decorators = [
        { type: Component, args: [{ selector: 'duet-textarea', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleActiveDescendant', 'accessibleAutocomplete', 'accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleLabelledBy', 'accessibleOwns', 'caption', 'counter', 'counterLabel', 'disabled', 'disallowPattern', 'echoPlaceholder', 'error', 'expand', 'identifier', 'label', 'labelHidden', 'margin', 'maxlength', 'minlength', 'name', 'placeholder', 'required', 'role', 'theme', 'tooltip', 'tooltipDirection', 'value'] },] },
    ];
    /** @nocollapse */
    DuetTextarea.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetTextarea = tslib_1.__decorate([
        ProxyCmp({ inputs: ['accessibleActiveDescendant', 'accessibleAutocomplete', 'accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleLabelledBy', 'accessibleOwns', 'caption', 'counter', 'counterLabel', 'disabled', 'disallowPattern', 'echoPlaceholder', 'error', 'expand', 'identifier', 'label', 'labelHidden', 'margin', 'maxlength', 'minlength', 'name', 'placeholder', 'required', 'role', 'theme', 'tooltip', 'tooltipDirection', 'value'], 'methods': ['setFocus'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetTextarea);
    return DuetTextarea;
}());
var DuetToggle = /** @class */ (function () {
    function DuetToggle(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetChange']);
    }
    DuetToggle.decorators = [
        { type: Component, args: [{ selector: 'duet-toggle', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleLabelledBy', 'accessibleOwns', 'checked', 'disabled', 'identifier', 'label', 'margin', 'name', 'required', 'role', 'theme', 'value'] },] },
    ];
    /** @nocollapse */
    DuetToggle.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetToggle = tslib_1.__decorate([
        ProxyCmp({ inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleLabelledBy', 'accessibleOwns', 'checked', 'disabled', 'identifier', 'label', 'margin', 'name', 'required', 'role', 'theme', 'value'], 'methods': ['setFocus'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetToggle);
    return DuetToggle;
}());
var DuetTooltip = /** @class */ (function () {
    function DuetTooltip(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    DuetTooltip.decorators = [
        { type: Component, args: [{ selector: 'duet-tooltip', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleCloseLabel', 'accessibleCloseLabelDefault', 'accessibleLabel', 'accessibleLabelDefault', 'active', 'breakpoint', 'direction', 'label', 'language', 'positionHorizontal', 'positionVertical', 'theme'] },] },
    ];
    /** @nocollapse */
    DuetTooltip.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetTooltip = tslib_1.__decorate([
        ProxyCmp({ inputs: ['accessibleCloseLabel', 'accessibleCloseLabelDefault', 'accessibleLabel', 'accessibleLabelDefault', 'active', 'breakpoint', 'direction', 'label', 'language', 'positionHorizontal', 'positionVertical', 'theme'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetTooltip);
    return DuetTooltip;
}());
var DuetTray = /** @class */ (function () {
    function DuetTray(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    DuetTray.decorators = [
        { type: Component, args: [{ selector: 'duet-tray', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleCloseLabel', 'accessibleCloseLabelDefaults', 'accessibleOpenLabel', 'accessibleOpenLabelDefaults', 'active', 'autoHide', 'language', 'responsive', 'theme'] },] },
    ];
    /** @nocollapse */
    DuetTray.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetTray = tslib_1.__decorate([
        ProxyCmp({ inputs: ['accessibleCloseLabel', 'accessibleCloseLabelDefaults', 'accessibleOpenLabel', 'accessibleOpenLabelDefaults', 'active', 'autoHide', 'language', 'responsive', 'theme'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetTray);
    return DuetTray;
}());
var DuetUpload = /** @class */ (function () {
    function DuetUpload(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetChange', 'duetBlur', 'duetFocus', 'duetReady', 'duetDone', 'duetState', 'duetDelete', 'duetCancel', 'duetProgress', 'duetUpload']);
    }
    DuetUpload.decorators = [
        { type: Component, args: [{ selector: 'duet-upload', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleActiveDescendant', 'accessibleButtonLabel', 'accessibleControls', 'accessibleDescribedBy', 'accessibleOwns', 'actions', 'alignment', 'allowedExtensions', 'allowedMimetypes', 'buttonLabel', 'buttonLabelDefaults', 'caption', 'deferUpload', 'description', 'descriptionDefaults', 'disabled', 'error', 'errorCodes', 'external', 'fileListEmpty', 'fileListEmptyDefaults', 'files', 'groups', 'hideButton', 'hideGroups', 'identifier', 'label', 'labelDefaults', 'limitSelection', 'margin', 'maxBytes', 'maxBytesTotal', 'maxFiles', 'middleware', 'multiple', 'name', 'required', 'showLinks', 'statusLabelDefaults', 'statusMessageLabel', 'theme', 'uri', 'valid', 'value'] },] },
    ];
    /** @nocollapse */
    DuetUpload.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetUpload = tslib_1.__decorate([
        ProxyCmp({ inputs: ['accessibleActiveDescendant', 'accessibleButtonLabel', 'accessibleControls', 'accessibleDescribedBy', 'accessibleOwns', 'actions', 'alignment', 'allowedExtensions', 'allowedMimetypes', 'buttonLabel', 'buttonLabelDefaults', 'caption', 'deferUpload', 'description', 'descriptionDefaults', 'disabled', 'error', 'errorCodes', 'external', 'fileListEmpty', 'fileListEmptyDefaults', 'files', 'groups', 'hideButton', 'hideGroups', 'identifier', 'label', 'labelDefaults', 'limitSelection', 'margin', 'maxBytes', 'maxBytesTotal', 'maxFiles', 'middleware', 'multiple', 'name', 'required', 'showLinks', 'statusLabelDefaults', 'statusMessageLabel', 'theme', 'uri', 'valid', 'value'], 'methods': ['setFocus', 'upload', 'uploadPending', 'refresh', 'getFiles', 'updateValue'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetUpload);
    return DuetUpload;
}());
var DuetUploadAriaStatus = /** @class */ (function () {
    function DuetUploadAriaStatus(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    DuetUploadAriaStatus.decorators = [
        { type: Component, args: [{ selector: 'duet-upload-aria-status', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleAriaLive', 'inprogress', 'invalid', 'statusMessageLabel', 'total', 'valid'] },] },
    ];
    /** @nocollapse */
    DuetUploadAriaStatus.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    DuetUploadAriaStatus = tslib_1.__decorate([
        ProxyCmp({ inputs: ['accessibleAriaLive', 'inprogress', 'invalid', 'statusMessageLabel', 'total', 'valid'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], DuetUploadAriaStatus);
    return DuetUploadAriaStatus;
}());
var DuetVisuallyHidden = /** @class */ (function () {
    function DuetVisuallyHidden(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    DuetVisuallyHidden.decorators = [
        { type: Component, args: [{ selector: 'duet-visually-hidden', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>' },] },
    ];
    /** @nocollapse */
    DuetVisuallyHidden.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    return DuetVisuallyHidden;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ValueAccessor = /** @class */ (function () {
    function ValueAccessor(el) {
        this.el = el;
        this.onChange = (/**
         * @return {?}
         */
        function () { });
        this.onTouched = (/**
         * @return {?}
         */
        function () { });
    }
    /**
     * @param {?} value
     * @return {?}
     */
    ValueAccessor.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.el.nativeElement.value = this.lastValue = value == null ? '' : value;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ValueAccessor.prototype.handleChangeEvent = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value !== this.lastValue) {
            this.lastValue = value;
            this.onChange(value);
        }
    };
    /**
     * @return {?}
     */
    ValueAccessor.prototype._handleBlurEvent = /**
     * @return {?}
     */
    function () {
        this.onTouched();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ValueAccessor.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ValueAccessor.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} disabled
     * @return {?}
     */
    ValueAccessor.prototype.setDisabledState = /**
     * @param {?} disabled
     * @return {?}
     */
    function (disabled) {
        this.el.nativeElement.disabled = disabled;
    };
    ValueAccessor.propDecorators = {
        _handleBlurEvent: [{ type: HostListener, args: ['focusout',] }]
    };
    return ValueAccessor;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NumericValueAccessor = /** @class */ (function (_super) {
    tslib_1.__extends(NumericValueAccessor, _super);
    function NumericValueAccessor(el) {
        return _super.call(this, el) || this;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    NumericValueAccessor.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        _super.prototype.registerOnChange.call(this, (/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            fn(value === '' ? null : parseFloat(value));
        }));
    };
    NumericValueAccessor.decorators = [
        { type: Directive, args: [{
                    /* tslint:disable-next-line:directive-selector */
                    selector: 'duet-input[type=number], duet-number-input',
                    host: {
                        '(duetChange)': 'handleChangeEvent($event.target.value)'
                    },
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: NumericValueAccessor,
                            multi: true
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    NumericValueAccessor.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return NumericValueAccessor;
}(ValueAccessor));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var BooleanValueAccessor = /** @class */ (function (_super) {
    tslib_1.__extends(BooleanValueAccessor, _super);
    function BooleanValueAccessor(el) {
        return _super.call(this, el) || this;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    BooleanValueAccessor.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.el.nativeElement.checked = this.lastValue = value == null ? false : value;
    };
    BooleanValueAccessor.decorators = [
        { type: Directive, args: [{
                    /* tslint:disable-next-line:directive-selector */
                    selector: 'duet-checkbox, duet-toggle, duet-choice[type=checkbox]',
                    host: {
                        '(duetChange)': 'handleChangeEvent($event.target.checked)'
                    },
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: BooleanValueAccessor,
                            multi: true
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    BooleanValueAccessor.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return BooleanValueAccessor;
}(ValueAccessor));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TextValueAccessor = /** @class */ (function (_super) {
    tslib_1.__extends(TextValueAccessor, _super);
    function TextValueAccessor(el) {
        return _super.call(this, el) || this;
    }
    TextValueAccessor.decorators = [
        { type: Directive, args: [{
                    /* tslint:disable-next-line:directive-selector */
                    selector: 'duet-input:not([type=number]), duet-textarea, duet-date-picker',
                    host: {
                        '(duetChange)': 'handleChangeEvent($event.target.value)'
                    },
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: TextValueAccessor,
                            multi: true
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    TextValueAccessor.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return TextValueAccessor;
}(ValueAccessor));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SelectValueAccessor = /** @class */ (function (_super) {
    tslib_1.__extends(SelectValueAccessor, _super);
    function SelectValueAccessor(el) {
        return _super.call(this, el) || this;
    }
    SelectValueAccessor.decorators = [
        { type: Directive, args: [{
                    /* tslint:disable-next-line:directive-selector */
                    selector: 'duet-range-slider, duet-select, duet-radio-group, duet-choice-group',
                    host: {
                        '(duetChange)': 'handleChangeEvent($event.target.value)'
                    },
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: SelectValueAccessor,
                            multi: true
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    SelectValueAccessor.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return SelectValueAccessor;
}(ValueAccessor));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var RadioValueAccessor = /** @class */ (function (_super) {
    tslib_1.__extends(RadioValueAccessor, _super);
    function RadioValueAccessor(el) {
        return _super.call(this, el) || this;
    }
    RadioValueAccessor.decorators = [
        { type: Directive, args: [{
                    /* tslint:disable-next-line:directive-selector */
                    selector: 'duet-radio, duet-choice[type=radio]',
                    host: {
                        '(duetSelect)': 'handleChangeEvent($event.target.checked)'
                    },
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: RadioValueAccessor,
                            multi: true
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    RadioValueAccessor.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return RadioValueAccessor;
}(ValueAccessor));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
defineCustomElements(window);
/** @type {?} */
var DECLARATIONS = [
    // proxies
    DuetActionButton,
    DuetAlert,
    DuetBadge,
    DuetBreadcrumb,
    DuetBreadcrumbs,
    DuetButton,
    DuetCaption,
    DuetCard,
    DuetCheckbox,
    DuetChoice,
    DuetChoiceGroup,
    DuetCollapsible,
    DuetCombobox,
    DuetCookieConsent,
    DuetDatePicker,
    DuetDivider,
    DuetEditableTable,
    DuetEmptyState,
    DuetFieldset,
    DuetFooter,
    DuetGrid,
    DuetGridItem,
    DuetHeader,
    DuetHeading,
    DuetHero,
    DuetIcon,
    DuetInput,
    DuetLabel,
    DuetLayout,
    DuetLink,
    DuetList,
    DuetListItem,
    DuetLogo,
    DuetModal,
    DuetMultiselect,
    DuetNotification,
    DuetNotificationDrawer,
    DuetNumberInput,
    DuetPagination,
    DuetParagraph,
    DuetProgress,
    DuetRadio,
    DuetRadioGroup,
    DuetRangeSlider,
    DuetRangeStepper,
    DuetScrollable,
    DuetSelect,
    DuetSpacer,
    DuetSpinner,
    DuetStep,
    DuetStepper,
    DuetTab,
    DuetTabGroup,
    DuetTable,
    DuetTextarea,
    DuetToggle,
    DuetTooltip,
    DuetTray,
    DuetUpload,
    DuetUploadAriaStatus,
    DuetVisuallyHidden,
    // Value Accessors
    NumericValueAccessor,
    BooleanValueAccessor,
    RadioValueAccessor,
    TextValueAccessor,
    SelectValueAccessor,
];
var DuetComponents = /** @class */ (function () {
    function DuetComponents() {
    }
    DuetComponents.decorators = [
        { type: NgModule, args: [{
                    declarations: DECLARATIONS,
                    exports: DECLARATIONS,
                    imports: [],
                    providers: [],
                },] },
    ];
    return DuetComponents;
}());

export { DuetActionButton, DuetAlert, DuetBadge, DuetBreadcrumb, DuetBreadcrumbs, DuetButton, DuetCaption, DuetCard, DuetCheckbox, DuetChoice, DuetChoiceGroup, DuetCollapsible, DuetCombobox, DuetComponents, DuetCookieConsent, DuetDatePicker, DuetDivider, DuetEditableTable, DuetEmptyState, DuetFieldset, DuetFooter, DuetGrid, DuetGridItem, DuetHeader, DuetHeading, DuetHero, DuetIcon, DuetInput, DuetLabel, DuetLayout, DuetLink, DuetList, DuetListItem, DuetLogo, DuetModal, DuetMultiselect, DuetNotification, DuetNotificationDrawer, DuetNumberInput, DuetPagination, DuetParagraph, DuetProgress, DuetRadio, DuetRadioGroup, DuetRangeSlider, DuetRangeStepper, DuetScrollable, DuetSelect, DuetSpacer, DuetSpinner, DuetStep, DuetStepper, DuetTab, DuetTabGroup, DuetTable, DuetTextarea, DuetToggle, DuetTooltip, DuetTray, DuetUpload, DuetUploadAriaStatus, DuetVisuallyHidden, ProxyCmp, proxyInputs, proxyMethods, proxyOutputs, NumericValueAccessor as ɵa, ValueAccessor as ɵb, BooleanValueAccessor as ɵc, RadioValueAccessor as ɵd, TextValueAccessor as ɵe, SelectValueAccessor as ɵf };
