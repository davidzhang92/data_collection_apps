import * as tslib_1 from 'tslib';
import { Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, NgZone, HostListener, Directive, NgModule } from '@angular/core';
import { fromEvent } from 'rxjs';
import { defineCustomElements } from '@duetds/components/lib/loader';
import { NG_VALUE_ACCESSOR } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const proxyInputs = (/**
 * @param {?} Cmp
 * @param {?} inputs
 * @return {?}
 */
(Cmp, inputs) => {
    /** @type {?} */
    const Prototype = Cmp.prototype;
    inputs.forEach((/**
     * @param {?} item
     * @return {?}
     */
    item => {
        Object.defineProperty(Prototype, item, {
            /**
             * @return {?}
             */
            get() { return this.el[item]; },
            /**
             * @param {?} val
             * @return {?}
             */
            set(val) { this.z.runOutsideAngular((/**
             * @return {?}
             */
            () => (this.el[item] = val))); }
        });
    }));
});
/** @type {?} */
const proxyMethods = (/**
 * @param {?} Cmp
 * @param {?} methods
 * @return {?}
 */
(Cmp, methods) => {
    /** @type {?} */
    const Prototype = Cmp.prototype;
    methods.forEach((/**
     * @param {?} methodName
     * @return {?}
     */
    methodName => {
        Prototype[methodName] = (/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            const args = arguments;
            return this.z.runOutsideAngular((/**
             * @return {?}
             */
            () => this.el[methodName].apply(this.el, args)));
        });
    }));
});
/** @type {?} */
const proxyOutputs = (/**
 * @param {?} instance
 * @param {?} el
 * @param {?} events
 * @return {?}
 */
(instance, el, events) => {
    events.forEach((/**
     * @param {?} eventName
     * @return {?}
     */
    eventName => instance[eventName] = fromEvent(el, eventName)));
})
// tslint:disable-next-line: only-arrow-functions
;
// tslint:disable-next-line: only-arrow-functions
/**
 * @param {?} opts
 * @return {?}
 */
function ProxyCmp(opts) {
    /** @type {?} */
    const decorator = (/**
     * @param {?} cls
     * @return {?}
     */
    function (cls) {
        if (opts.inputs) {
            proxyInputs(cls, opts.inputs);
        }
        if (opts.methods) {
            proxyMethods(cls, opts.methods);
        }
        return cls;
    });
    return decorator;
}
let DuetActionButton = class DuetActionButton {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetActionEvent']);
    }
};
DuetActionButton.decorators = [
    { type: Component, args: [{ selector: 'duet-action-button', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleLabelledBy', 'accessibleLabels', 'accessibleLabelsDefaults', 'accessibleTitle', 'actionId', 'actionMeta', 'actionName', 'background', 'color', 'disabled', 'iconColor', 'iconName', 'iconSize', 'theme'] },] },
];
/** @nocollapse */
DuetActionButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetActionButton = tslib_1.__decorate([
    ProxyCmp({ inputs: ['accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleLabelledBy', 'accessibleLabels', 'accessibleLabelsDefaults', 'accessibleTitle', 'actionId', 'actionMeta', 'actionName', 'background', 'color', 'disabled', 'iconColor', 'iconName', 'iconSize', 'theme'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetActionButton);
let DuetAlert = class DuetAlert {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetDismiss']);
    }
};
DuetAlert.decorators = [
    { type: Component, args: [{ selector: 'duet-alert', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleLabel', 'accessibleLabelDefaults', 'announcements', 'autoDismiss', 'dismissible', 'icon', 'margin', 'padding', 'theme', 'variation'] },] },
];
/** @nocollapse */
DuetAlert.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetAlert = tslib_1.__decorate([
    ProxyCmp({ inputs: ['accessibleLabel', 'accessibleLabelDefaults', 'announcements', 'autoDismiss', 'dismissible', 'icon', 'margin', 'padding', 'theme', 'variation'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetAlert);
let DuetBadge = class DuetBadge {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DuetBadge.decorators = [
    { type: Component, args: [{ selector: 'duet-badge', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['margin', 'theme', 'variation'] },] },
];
/** @nocollapse */
DuetBadge.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetBadge = tslib_1.__decorate([
    ProxyCmp({ inputs: ['margin', 'theme', 'variation'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetBadge);
let DuetBreadcrumb = class DuetBreadcrumb {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DuetBreadcrumb.decorators = [
    { type: Component, args: [{ selector: 'duet-breadcrumb', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleLabel', 'href', 'icon', 'theme'] },] },
];
/** @nocollapse */
DuetBreadcrumb.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetBreadcrumb = tslib_1.__decorate([
    ProxyCmp({ inputs: ['accessibleLabel', 'href', 'icon', 'theme'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetBreadcrumb);
let DuetBreadcrumbs = class DuetBreadcrumbs {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DuetBreadcrumbs.decorators = [
    { type: Component, args: [{ selector: 'duet-breadcrumbs', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['theme'] },] },
];
/** @nocollapse */
DuetBreadcrumbs.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetBreadcrumbs = tslib_1.__decorate([
    ProxyCmp({ inputs: ['theme'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetBreadcrumbs);
let DuetButton = class DuetButton {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetFocus', 'duetBlur']);
    }
};
DuetButton.decorators = [
    { type: Component, args: [{ selector: 'duet-button', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleExpanded', 'accessibleLabel', 'accessibleLabelExternal', 'accessibleLabelExternalDefaults', 'accessibleLabelledBy', 'accessibleOwns', 'accessiblePopup', 'accessiblePressed', 'centerText', 'color', 'disabled', 'expand', 'external', 'fixed', 'icon', 'iconOnly', 'iconRight', 'iconSize', 'identifier', 'language', 'loading', 'margin', 'name', 'negative', 'padding', 'size', 'submit', 'theme', 'url', 'value', 'variation', 'wrapping'] },] },
];
/** @nocollapse */
DuetButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetButton = tslib_1.__decorate([
    ProxyCmp({ inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleExpanded', 'accessibleLabel', 'accessibleLabelExternal', 'accessibleLabelExternalDefaults', 'accessibleLabelledBy', 'accessibleOwns', 'accessiblePopup', 'accessiblePressed', 'centerText', 'color', 'disabled', 'expand', 'external', 'fixed', 'icon', 'iconOnly', 'iconRight', 'iconSize', 'identifier', 'language', 'loading', 'margin', 'name', 'negative', 'padding', 'size', 'submit', 'theme', 'url', 'value', 'variation', 'wrapping'], 'methods': ['setFocus'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetButton);
let DuetCaption = class DuetCaption {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DuetCaption.decorators = [
    { type: Component, args: [{ selector: 'duet-caption', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['margin', 'selected', 'size', 'theme'] },] },
];
/** @nocollapse */
DuetCaption.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetCaption = tslib_1.__decorate([
    ProxyCmp({ inputs: ['margin', 'selected', 'size', 'theme'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetCaption);
let DuetCard = class DuetCard {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetToggle']);
    }
};
DuetCard.decorators = [
    { type: Component, args: [{ selector: 'duet-card', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleLabel', 'background', 'collapsible', 'heading', 'headingLevel', 'icon', 'image', 'margin', 'open', 'padding', 'secondaryHeading', 'theme', 'url', 'variation'] },] },
];
/** @nocollapse */
DuetCard.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetCard = tslib_1.__decorate([
    ProxyCmp({ inputs: ['accessibleLabel', 'background', 'collapsible', 'heading', 'headingLevel', 'icon', 'image', 'margin', 'open', 'padding', 'secondaryHeading', 'theme', 'url', 'variation'], 'methods': ['setFocus'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetCard);
let DuetCheckbox = class DuetCheckbox {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetChange', 'duetFocus', 'duetBlur']);
    }
};
DuetCheckbox.decorators = [
    { type: Component, args: [{ selector: 'duet-checkbox', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleIndex', 'accessibleLabelledBy', 'accessibleOwns', 'accessibleSelected', 'checked', 'disabled', 'identifier', 'label', 'labelHidden', 'margin', 'name', 'required', 'role', 'theme', 'value'] },] },
];
/** @nocollapse */
DuetCheckbox.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetCheckbox = tslib_1.__decorate([
    ProxyCmp({ inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleIndex', 'accessibleLabelledBy', 'accessibleOwns', 'accessibleSelected', 'checked', 'disabled', 'identifier', 'label', 'labelHidden', 'margin', 'name', 'required', 'role', 'theme', 'value'], 'methods': ['setFocus'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetCheckbox);
let DuetChoice = class DuetChoice {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetChange', 'duetFocus', 'duetBlur']);
    }
};
DuetChoice.decorators = [
    { type: Component, args: [{ selector: 'duet-choice', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleLabelInfoButton', 'accessibleLabelInfoButtonDefaults', 'accessibleLabelledBy', 'accessibleOwns', 'caption', 'checked', 'collapsible', 'disabled', 'expand', 'icon', 'identifier', 'infoLabel', 'infoLabelDefaults', 'label', 'margin', 'name', 'padding', 'required', 'theme', 'type', 'value'] },] },
];
/** @nocollapse */
DuetChoice.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetChoice = tslib_1.__decorate([
    ProxyCmp({ inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleLabelInfoButton', 'accessibleLabelInfoButtonDefaults', 'accessibleLabelledBy', 'accessibleOwns', 'caption', 'checked', 'collapsible', 'disabled', 'expand', 'icon', 'identifier', 'infoLabel', 'infoLabelDefaults', 'label', 'margin', 'name', 'padding', 'required', 'theme', 'type', 'value'], 'methods': ['setFocus'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetChoice);
let DuetChoiceGroup = class DuetChoiceGroup {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DuetChoiceGroup.decorators = [
    { type: Component, args: [{ selector: 'duet-choice-group', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['caption', 'direction', 'disabled', 'error', 'label', 'labelHidden', 'margin', 'name', 'responsive', 'theme', 'tooltip', 'tooltipDirection', 'value'] },] },
];
/** @nocollapse */
DuetChoiceGroup.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetChoiceGroup = tslib_1.__decorate([
    ProxyCmp({ inputs: ['caption', 'direction', 'disabled', 'error', 'label', 'labelHidden', 'margin', 'name', 'responsive', 'theme', 'tooltip', 'tooltipDirection', 'value'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetChoiceGroup);
let DuetCollapsible = class DuetCollapsible {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetToggle']);
    }
};
DuetCollapsible.decorators = [
    { type: Component, args: [{ selector: 'duet-collapsible', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['heading', 'headingLevel', 'headingSize', 'headingWeight', 'margin', 'open', 'theme'] },] },
];
/** @nocollapse */
DuetCollapsible.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetCollapsible = tslib_1.__decorate([
    ProxyCmp({ inputs: ['heading', 'headingLevel', 'headingSize', 'headingWeight', 'margin', 'open', 'theme'], 'methods': ['setFocus'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetCollapsible);
let DuetCombobox = class DuetCombobox {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetChange']);
    }
};
DuetCombobox.decorators = [
    { type: Component, args: [{ selector: 'duet-combobox', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleLabelDefaults', 'accessibleLabels', 'force', 'formatter', 'items', 'theme', 'value'] },] },
];
/** @nocollapse */
DuetCombobox.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetCombobox = tslib_1.__decorate([
    ProxyCmp({ inputs: ['accessibleLabelDefaults', 'accessibleLabels', 'force', 'formatter', 'items', 'theme', 'value'], 'methods': ['formatItem'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetCombobox);
let DuetCookieConsent = class DuetCookieConsent {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetCookieConsent']);
    }
};
DuetCookieConsent.decorators = [
    { type: Component, args: [{ selector: 'duet-cookie-consent', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleLabel', 'theme'] },] },
];
/** @nocollapse */
DuetCookieConsent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetCookieConsent = tslib_1.__decorate([
    ProxyCmp({ inputs: ['accessibleLabel', 'theme'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetCookieConsent);
let DuetDatePicker = class DuetDatePicker {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetChange', 'duetBlur', 'duetFocus']);
    }
};
DuetDatePicker.decorators = [
    { type: Component, args: [{ selector: 'duet-date-picker', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleOwns', 'caption', 'direction', 'disabled', 'echoPlaceholder', 'error', 'expand', 'identifier', 'incrementYears', 'label', 'labelHidden', 'language', 'margin', 'max', 'min', 'name', 'placeholder', 'placeholderDefaults', 'required', 'role', 'theme', 'tooltip', 'tooltipDirection', 'validity', 'value'] },] },
];
/** @nocollapse */
DuetDatePicker.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetDatePicker = tslib_1.__decorate([
    ProxyCmp({ inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleOwns', 'caption', 'direction', 'disabled', 'echoPlaceholder', 'error', 'expand', 'identifier', 'incrementYears', 'label', 'labelHidden', 'language', 'margin', 'max', 'min', 'name', 'placeholder', 'placeholderDefaults', 'required', 'role', 'theme', 'tooltip', 'tooltipDirection', 'validity', 'value'], 'methods': ['setFocus', 'show', 'hide'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetDatePicker);
let DuetDivider = class DuetDivider {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DuetDivider.decorators = [
    { type: Component, args: [{ selector: 'duet-divider', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['margin', 'theme'] },] },
];
/** @nocollapse */
DuetDivider.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetDivider = tslib_1.__decorate([
    ProxyCmp({ inputs: ['margin', 'theme'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetDivider);
let DuetEditableTable = class DuetEditableTable {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetTableToggle', 'duetMenuClick']);
    }
};
DuetEditableTable.decorators = [
    { type: Component, args: [{ selector: 'duet-editable-table', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleRole', 'actions', 'breakpoint', 'columns', 'groupId', 'margin', 'rows', 'sortable', 'sticky', 'stickyDistance', 'theme', 'variation'] },] },
];
/** @nocollapse */
DuetEditableTable.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetEditableTable = tslib_1.__decorate([
    ProxyCmp({ inputs: ['accessibleRole', 'actions', 'breakpoint', 'columns', 'groupId', 'margin', 'rows', 'sortable', 'sticky', 'stickyDistance', 'theme', 'variation'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetEditableTable);
let DuetEmptyState = class DuetEmptyState {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DuetEmptyState.decorators = [
    { type: Component, args: [{ selector: 'duet-empty-state', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['icon', 'size', 'theme'] },] },
];
/** @nocollapse */
DuetEmptyState.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetEmptyState = tslib_1.__decorate([
    ProxyCmp({ inputs: ['icon', 'size', 'theme'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetEmptyState);
let DuetFieldset = class DuetFieldset {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DuetFieldset.decorators = [
    { type: Component, args: [{ selector: 'duet-fieldset', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['caption', 'error', 'label', 'labelHidden', 'margin', 'theme'] },] },
];
/** @nocollapse */
DuetFieldset.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetFieldset = tslib_1.__decorate([
    ProxyCmp({ inputs: ['caption', 'error', 'label', 'labelHidden', 'margin', 'theme'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetFieldset);
let DuetFooter = class DuetFooter {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetChange', 'duetLogoClick', 'duetMenuClick', 'duetItemClick', 'duetAnalytics', 'duetEvent']);
    }
};
DuetFooter.decorators = [
    { type: Component, args: [{ selector: 'duet-footer', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleLabelExternal', 'accessibleLabelExternalDefaults', 'items', 'language', 'logoHref', 'margin', 'menu', 'theme', 'variation'] },] },
];
/** @nocollapse */
DuetFooter.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetFooter = tslib_1.__decorate([
    ProxyCmp({ inputs: ['accessibleLabelExternal', 'accessibleLabelExternalDefaults', 'items', 'language', 'logoHref', 'margin', 'menu', 'theme', 'variation'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetFooter);
let DuetGrid = class DuetGrid {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DuetGrid.decorators = [
    { type: Component, args: [{ selector: 'duet-grid', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['alignment', 'breakpoint', 'direction', 'distribution', 'mobile', 'responsive'] },] },
];
/** @nocollapse */
DuetGrid.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetGrid = tslib_1.__decorate([
    ProxyCmp({ inputs: ['alignment', 'breakpoint', 'direction', 'distribution', 'mobile', 'responsive'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetGrid);
let DuetGridItem = class DuetGridItem {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DuetGridItem.decorators = [
    { type: Component, args: [{ selector: 'duet-grid-item', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['fill', 'margin', 'maxWidth', 'minWidth', 'theme'] },] },
];
/** @nocollapse */
DuetGridItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetGridItem = tslib_1.__decorate([
    ProxyCmp({ inputs: ['fill', 'margin', 'maxWidth', 'minWidth', 'theme'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetGridItem);
let DuetHeader = class DuetHeader {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetChange', 'duetSessionClick', 'duetSearchClick', 'duetUserClick', 'duetLanguageSelect', 'duetLogoClick', 'duetBackClick', 'duetContactClick', 'duetItemClick', 'duetSkipClick', 'duetAnalytics', 'duetMobileNavToggle', 'duetEvent']);
    }
};
DuetHeader.decorators = [
    { type: Component, args: [{ selector: 'duet-header', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleI18nLabels', 'accessibleI18nLabelsDefaults', 'accessibleLabel', 'accessibleLabelDefaults', 'accessibleLabelExternal', 'accessibleLabelExternalDefaults', 'back', 'contact', 'contactItems', 'currentHref', 'items', 'language', 'languageItems', 'logoHref', 'region', 'search', 'session', 'skipToId', 'theme', 'user'] },] },
];
/** @nocollapse */
DuetHeader.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetHeader = tslib_1.__decorate([
    ProxyCmp({ inputs: ['accessibleI18nLabels', 'accessibleI18nLabelsDefaults', 'accessibleLabel', 'accessibleLabelDefaults', 'accessibleLabelExternal', 'accessibleLabelExternalDefaults', 'back', 'contact', 'contactItems', 'currentHref', 'items', 'language', 'languageItems', 'logoHref', 'region', 'search', 'session', 'skipToId', 'theme', 'user'], 'methods': ['closeMenus', 'setFocus'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetHeader);
let DuetHeading = class DuetHeading {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DuetHeading.decorators = [
    { type: Component, args: [{ selector: 'duet-heading', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['border', 'color', 'hyphenate', 'level', 'margin', 'theme', 'visualLevel', 'weight'] },] },
];
/** @nocollapse */
DuetHeading.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetHeading = tslib_1.__decorate([
    ProxyCmp({ inputs: ['border', 'color', 'hyphenate', 'level', 'margin', 'theme', 'visualLevel', 'weight'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetHeading);
let DuetHero = class DuetHero {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetClick', 'duetAnalytics']);
    }
};
DuetHero.decorators = [
    { type: Component, args: [{ selector: 'duet-hero', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleLabelExternal', 'accessibleLabelExternalDefaults', 'actions', 'back', 'buttonData', 'buttonId', 'buttonLabel', 'buttonUrl', 'categoryIcon', 'categoryIconColor', 'description', 'heading', 'icon', 'iconRight', 'iconSize', 'image', 'language', 'leftAlign', 'level', 'listItems', 'preHeading', 'textCenter', 'theme', 'variation'] },] },
];
/** @nocollapse */
DuetHero.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetHero = tslib_1.__decorate([
    ProxyCmp({ inputs: ['accessibleLabelExternal', 'accessibleLabelExternalDefaults', 'actions', 'back', 'buttonData', 'buttonId', 'buttonLabel', 'buttonUrl', 'categoryIcon', 'categoryIconColor', 'description', 'heading', 'icon', 'iconRight', 'iconSize', 'image', 'language', 'leftAlign', 'level', 'listItems', 'preHeading', 'textCenter', 'theme', 'variation'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetHero);
let DuetIcon = class DuetIcon {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DuetIcon.decorators = [
    { type: Component, args: [{ selector: 'duet-icon', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['background', 'color', 'icon', 'margin', 'name', 'outline', 'responsive', 'size', 'src', 'theme'] },] },
];
/** @nocollapse */
DuetIcon.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetIcon = tslib_1.__decorate([
    ProxyCmp({ inputs: ['background', 'color', 'icon', 'margin', 'name', 'outline', 'responsive', 'size', 'src', 'theme'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetIcon);
let DuetInput = class DuetInput {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetInput', 'duetChange', 'duetBlur', 'duetClear', 'duetFocus']);
    }
};
DuetInput.decorators = [
    { type: Component, args: [{ selector: 'duet-input', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleActiveDescendant', 'accessibleAutocomplete', 'accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleExpanded', 'accessibleHasPopup', 'accessibleLabelledBy', 'accessibleOwns', 'autoComplete', 'caption', 'clear', 'component', 'debounce', 'disabled', 'disallowPattern', 'echoPlaceholder', 'error', 'expand', 'icon', 'identifier', 'label', 'labelHidden', 'margin', 'maxlength', 'minlength', 'name', 'numericKeyboard', 'pattern', 'placeholder', 'required', 'role', 'theme', 'tooltip', 'tooltipDirection', 'type', 'value', 'variation'] },] },
];
/** @nocollapse */
DuetInput.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetInput = tslib_1.__decorate([
    ProxyCmp({ inputs: ['accessibleActiveDescendant', 'accessibleAutocomplete', 'accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleExpanded', 'accessibleHasPopup', 'accessibleLabelledBy', 'accessibleOwns', 'autoComplete', 'caption', 'clear', 'component', 'debounce', 'disabled', 'disallowPattern', 'echoPlaceholder', 'error', 'expand', 'icon', 'identifier', 'label', 'labelHidden', 'margin', 'maxlength', 'minlength', 'name', 'numericKeyboard', 'pattern', 'placeholder', 'required', 'role', 'theme', 'tooltip', 'tooltipDirection', 'type', 'value', 'variation'], 'methods': ['setFocus', 'resetCursor', 'clearInput'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetInput);
let DuetLabel = class DuetLabel {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DuetLabel.decorators = [
    { type: Component, args: [{ selector: 'duet-label', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['for', 'margin', 'size', 'theme'] },] },
];
/** @nocollapse */
DuetLabel.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetLabel = tslib_1.__decorate([
    ProxyCmp({ inputs: ['for', 'margin', 'size', 'theme'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetLabel);
let DuetLayout = class DuetLayout {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DuetLayout.decorators = [
    { type: Component, args: [{ selector: 'duet-layout', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['center', 'margin', 'middle', 'sticky', 'stickyDistance', 'tabs'] },] },
];
/** @nocollapse */
DuetLayout.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetLayout = tslib_1.__decorate([
    ProxyCmp({ inputs: ['center', 'margin', 'middle', 'sticky', 'stickyDistance', 'tabs'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetLayout);
let DuetLink = class DuetLink {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DuetLink.decorators = [
    { type: Component, args: [{ selector: 'duet-link', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleLabel', 'accessibleLabelExternal', 'accessibleLabelExternalDefaults', 'external', 'identifier', 'language', 'theme', 'url'] },] },
];
/** @nocollapse */
DuetLink.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetLink = tslib_1.__decorate([
    ProxyCmp({ inputs: ['accessibleLabel', 'accessibleLabelExternal', 'accessibleLabelExternalDefaults', 'external', 'identifier', 'language', 'theme', 'url'], 'methods': ['setFocus'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetLink);
let DuetList = class DuetList {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DuetList.decorators = [
    { type: Component, args: [{ selector: 'duet-list', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['breakpoint', 'labelWidth', 'margin', 'mobile', 'padding', 'theme', 'variation'] },] },
];
/** @nocollapse */
DuetList.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetList = tslib_1.__decorate([
    ProxyCmp({ inputs: ['breakpoint', 'labelWidth', 'margin', 'mobile', 'padding', 'theme', 'variation'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetList);
class DuetListItem {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DuetListItem.decorators = [
    { type: Component, args: [{ selector: 'duet-list-item', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>' },] },
];
/** @nocollapse */
DuetListItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DuetLogo = class DuetLogo {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DuetLogo.decorators = [
    { type: Component, args: [{ selector: 'duet-logo', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['href', 'inverse', 'language', 'margin', 'size', 'theme'] },] },
];
/** @nocollapse */
DuetLogo.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetLogo = tslib_1.__decorate([
    ProxyCmp({ inputs: ['href', 'inverse', 'language', 'margin', 'size', 'theme'], 'methods': ['setFocus'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetLogo);
let DuetModal = class DuetModal {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetOpen', 'duetClose', 'duetBeforeClose']);
    }
};
DuetModal.decorators = [
    { type: Component, args: [{ selector: 'duet-modal', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleCloseLabel', 'accessibleCloseLabelDefaults', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleLabelledBy', 'active', 'closeOnBlur', 'color', 'gutterSize', 'heading', 'headingLevel', 'icon', 'language', 'size', 'theme'] },] },
];
/** @nocollapse */
DuetModal.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetModal = tslib_1.__decorate([
    ProxyCmp({ inputs: ['accessibleCloseLabel', 'accessibleCloseLabelDefaults', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleLabelledBy', 'active', 'closeOnBlur', 'color', 'gutterSize', 'heading', 'headingLevel', 'icon', 'language', 'size', 'theme'], 'methods': ['show', 'hide'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetModal);
let DuetMultiselect = class DuetMultiselect {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetChange', 'duetFocus', 'duetBlur']);
    }
};
DuetMultiselect.decorators = [
    { type: Component, args: [{ selector: 'duet-multiselect', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['caption', 'disabled', 'error', 'expand', 'identifier', 'items', 'label', 'labelHidden', 'margin', 'placeholder', 'theme', 'tooltip', 'tooltipDirection', 'value'] },] },
];
/** @nocollapse */
DuetMultiselect.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetMultiselect = tslib_1.__decorate([
    ProxyCmp({ inputs: ['caption', 'disabled', 'error', 'expand', 'identifier', 'items', 'label', 'labelHidden', 'margin', 'placeholder', 'theme', 'tooltip', 'tooltipDirection', 'value'], 'methods': ['setFocus'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetMultiselect);
let DuetNotification = class DuetNotification {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DuetNotification.decorators = [
    { type: Component, args: [{ selector: 'duet-notification', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleLabelUnread', 'accessibleLabelUnreadDefaults', 'date', 'external', 'highlight', 'language', 'theme', 'url'] },] },
];
/** @nocollapse */
DuetNotification.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetNotification = tslib_1.__decorate([
    ProxyCmp({ inputs: ['accessibleLabelUnread', 'accessibleLabelUnreadDefaults', 'date', 'external', 'highlight', 'language', 'theme', 'url'], 'methods': ['setFocus'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetNotification);
let DuetNotificationDrawer = class DuetNotificationDrawer {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DuetNotificationDrawer.decorators = [
    { type: Component, args: [{ selector: 'duet-notification-drawer', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleLabelNotifications', 'accessibleLabelNotificationsDefaults', 'badge', 'direction', 'icon', 'label', 'language', 'theme'] },] },
];
/** @nocollapse */
DuetNotificationDrawer.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetNotificationDrawer = tslib_1.__decorate([
    ProxyCmp({ inputs: ['accessibleLabelNotifications', 'accessibleLabelNotificationsDefaults', 'badge', 'direction', 'icon', 'label', 'language', 'theme'], 'methods': ['setFocus', 'open', 'close'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetNotificationDrawer);
let DuetNumberInput = class DuetNumberInput {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetChange', 'duetInput', 'duetBlur', 'duetFocus']);
    }
};
DuetNumberInput.decorators = [
    { type: Component, args: [{ selector: 'duet-number-input', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleActiveDescendant', 'accessibleAdd', 'accessibleAddDefaults', 'accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleLabelledBy', 'accessibleLive', 'accessibleLiveDefaults', 'accessibleLiveEnabled', 'accessibleOwns', 'accessibleSubtract', 'accessibleSubtractDefaults', 'disabled', 'error', 'expand', 'identifier', 'label', 'labelDefaults', 'labelHidden', 'language', 'locale', 'margin', 'max', 'min', 'name', 'required', 'role', 'rounding', 'step', 'theme', 'tooltip', 'unit', 'value'] },] },
];
/** @nocollapse */
DuetNumberInput.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetNumberInput = tslib_1.__decorate([
    ProxyCmp({ inputs: ['accessibleActiveDescendant', 'accessibleAdd', 'accessibleAddDefaults', 'accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleLabelledBy', 'accessibleLive', 'accessibleLiveDefaults', 'accessibleLiveEnabled', 'accessibleOwns', 'accessibleSubtract', 'accessibleSubtractDefaults', 'disabled', 'error', 'expand', 'identifier', 'label', 'labelDefaults', 'labelHidden', 'language', 'locale', 'margin', 'max', 'min', 'name', 'required', 'role', 'rounding', 'step', 'theme', 'tooltip', 'unit', 'value'], 'methods': ['setFocus'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetNumberInput);
let DuetPagination = class DuetPagination {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetPageChange']);
    }
};
DuetPagination.decorators = [
    { type: Component, args: [{ selector: 'duet-pagination', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleLabelledBy', 'accessibleLabels', 'accessibleLabelsDefaults', 'ariaControls', 'current', 'jumpString', 'take', 'theme', 'total', 'variation', 'visibleItems'] },] },
];
/** @nocollapse */
DuetPagination.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetPagination = tslib_1.__decorate([
    ProxyCmp({ inputs: ['accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleLabelledBy', 'accessibleLabels', 'accessibleLabelsDefaults', 'ariaControls', 'current', 'jumpString', 'take', 'theme', 'total', 'variation', 'visibleItems'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetPagination);
let DuetParagraph = class DuetParagraph {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DuetParagraph.decorators = [
    { type: Component, args: [{ selector: 'duet-paragraph', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['color', 'margin', 'size', 'theme', 'variation', 'weight'] },] },
];
/** @nocollapse */
DuetParagraph.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetParagraph = tslib_1.__decorate([
    ProxyCmp({ inputs: ['color', 'margin', 'size', 'theme', 'variation', 'weight'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetParagraph);
let DuetProgress = class DuetProgress {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DuetProgress.decorators = [
    { type: Component, args: [{ selector: 'duet-progress', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleLabel', 'accessibleLabelUpload', 'accessibleLabelUploadDefaults', 'accessibleLabelledBy', 'caption', 'height', 'progress', 'theme'] },] },
];
/** @nocollapse */
DuetProgress.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetProgress = tslib_1.__decorate([
    ProxyCmp({ inputs: ['accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleLabel', 'accessibleLabelUpload', 'accessibleLabelUploadDefaults', 'accessibleLabelledBy', 'caption', 'height', 'progress', 'theme'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetProgress);
let DuetRadio = class DuetRadio {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetChange', 'duetFocus', 'duetBlur']);
    }
};
DuetRadio.decorators = [
    { type: Component, args: [{ selector: 'duet-radio', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleIndex', 'accessibleLabelledBy', 'accessibleOwns', 'blockEvents', 'checked', 'disabled', 'identifier', 'label', 'margin', 'name', 'required', 'role', 'theme', 'value'] },] },
];
/** @nocollapse */
DuetRadio.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetRadio = tslib_1.__decorate([
    ProxyCmp({ inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleIndex', 'accessibleLabelledBy', 'accessibleOwns', 'blockEvents', 'checked', 'disabled', 'identifier', 'label', 'margin', 'name', 'required', 'role', 'theme', 'value'], 'methods': ['setFocus'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetRadio);
let DuetRadioGroup = class DuetRadioGroup {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DuetRadioGroup.decorators = [
    { type: Component, args: [{ selector: 'duet-radio-group', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['caption', 'direction', 'disabled', 'error', 'label', 'labelHidden', 'margin', 'name', 'responsive', 'theme', 'tooltip', 'tooltipDirection', 'value'] },] },
];
/** @nocollapse */
DuetRadioGroup.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetRadioGroup = tslib_1.__decorate([
    ProxyCmp({ inputs: ['caption', 'direction', 'disabled', 'error', 'label', 'labelHidden', 'margin', 'name', 'responsive', 'theme', 'tooltip', 'tooltipDirection', 'value'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetRadioGroup);
let DuetRangeSlider = class DuetRangeSlider {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetChange', 'duetInput']);
    }
};
DuetRangeSlider.decorators = [
    { type: Component, args: [{ selector: 'duet-range-slider', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleOwns', 'debounce', 'disabled', 'expand', 'identifier', 'label', 'labelHidden', 'locale', 'margin', 'max', 'min', 'name', 'required', 'step', 'theme', 'unit', 'value'] },] },
];
/** @nocollapse */
DuetRangeSlider.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetRangeSlider = tslib_1.__decorate([
    ProxyCmp({ inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleOwns', 'debounce', 'disabled', 'expand', 'identifier', 'label', 'labelHidden', 'locale', 'margin', 'max', 'min', 'name', 'required', 'step', 'theme', 'unit', 'value'], 'methods': ['setFocus'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetRangeSlider);
let DuetRangeStepper = class DuetRangeStepper {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetRangeStepUpdate']);
    }
};
DuetRangeStepper.decorators = [
    { type: Component, args: [{ selector: 'duet-range-stepper', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['ariaControls', 'ariaLabels', 'ariaLabelsDefaults', 'stepIndex', 'stepSize', 'theme', 'total'] },] },
];
/** @nocollapse */
DuetRangeStepper.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetRangeStepper = tslib_1.__decorate([
    ProxyCmp({ inputs: ['ariaControls', 'ariaLabels', 'ariaLabelsDefaults', 'stepIndex', 'stepSize', 'theme', 'total'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetRangeStepper);
let DuetScrollable = class DuetScrollable {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DuetScrollable.decorators = [
    { type: Component, args: [{ selector: 'duet-scrollable', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['identifier', 'selected', 'theme'] },] },
];
/** @nocollapse */
DuetScrollable.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetScrollable = tslib_1.__decorate([
    ProxyCmp({ inputs: ['identifier', 'selected', 'theme'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetScrollable);
let DuetSelect = class DuetSelect {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetChange', 'duetFocus', 'duetBlur']);
    }
};
DuetSelect.decorators = [
    { type: Component, args: [{ selector: 'duet-select', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleOwns', 'caption', 'disabled', 'echoPlaceholder', 'error', 'expand', 'identifier', 'items', 'label', 'labelHidden', 'margin', 'name', 'placeholder', 'required', 'role', 'theme', 'tooltip', 'tooltipDirection', 'value', 'variation'] },] },
];
/** @nocollapse */
DuetSelect.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetSelect = tslib_1.__decorate([
    ProxyCmp({ inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleOwns', 'caption', 'disabled', 'echoPlaceholder', 'error', 'expand', 'identifier', 'items', 'label', 'labelHidden', 'margin', 'name', 'placeholder', 'required', 'role', 'theme', 'tooltip', 'tooltipDirection', 'value', 'variation'], 'methods': ['setFocus'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetSelect);
let DuetSpacer = class DuetSpacer {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DuetSpacer.decorators = [
    { type: Component, args: [{ selector: 'duet-spacer', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['breakpoint', 'direction', 'size'] },] },
];
/** @nocollapse */
DuetSpacer.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetSpacer = tslib_1.__decorate([
    ProxyCmp({ inputs: ['breakpoint', 'direction', 'size'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetSpacer);
let DuetSpinner = class DuetSpinner {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DuetSpinner.decorators = [
    { type: Component, args: [{ selector: 'duet-spinner', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleLabel', 'color', 'size', 'theme'] },] },
];
/** @nocollapse */
DuetSpinner.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetSpinner = tslib_1.__decorate([
    ProxyCmp({ inputs: ['accessibleLabel', 'color', 'size', 'theme'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetSpinner);
let DuetStep = class DuetStep {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetStepClick']);
    }
};
DuetStep.decorators = [
    { type: Component, args: [{ selector: 'duet-step', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['heading', 'headingLevel', 'theme'] },] },
];
/** @nocollapse */
DuetStep.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetStep = tslib_1.__decorate([
    ProxyCmp({ inputs: ['heading', 'headingLevel', 'theme'], 'methods': ['setFocus'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetStep);
let DuetStepper = class DuetStepper {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetStepChange']);
    }
};
DuetStepper.decorators = [
    { type: Component, args: [{ selector: 'duet-stepper', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleLive', 'backDisabled', 'margin', 'selected', 'theme'] },] },
];
/** @nocollapse */
DuetStepper.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetStepper = tslib_1.__decorate([
    ProxyCmp({ inputs: ['accessibleLive', 'backDisabled', 'margin', 'selected', 'theme'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetStepper);
let DuetTab = class DuetTab {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DuetTab.decorators = [
    { type: Component, args: [{ selector: 'duet-tab', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleDescription', 'accessibleDescriptionDefault', 'label', 'selected'] },] },
];
/** @nocollapse */
DuetTab.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetTab = tslib_1.__decorate([
    ProxyCmp({ inputs: ['accessibleDescription', 'accessibleDescriptionDefault', 'label', 'selected'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetTab);
let DuetTabGroup = class DuetTabGroup {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetChange', 'duetTabChange']);
    }
};
DuetTabGroup.decorators = [
    { type: Component, args: [{ selector: 'duet-tab-group', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleLabel', 'collapses', 'identifier', 'label', 'labelDefaults', 'labelHidden', 'language', 'margin', 'padding', 'scrolls', 'theme', 'variation'] },] },
];
/** @nocollapse */
DuetTabGroup.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetTabGroup = tslib_1.__decorate([
    ProxyCmp({ inputs: ['accessibleLabel', 'collapses', 'identifier', 'label', 'labelDefaults', 'labelHidden', 'language', 'margin', 'padding', 'scrolls', 'theme', 'variation'], 'methods': ['openTab', 'refresh'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetTabGroup);
let DuetTable = class DuetTable {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DuetTable.decorators = [
    { type: Component, args: [{ selector: 'duet-table', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['breakpoint', 'margin', 'sticky', 'stickyDistance', 'theme', 'variation'] },] },
];
/** @nocollapse */
DuetTable.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetTable = tslib_1.__decorate([
    ProxyCmp({ inputs: ['breakpoint', 'margin', 'sticky', 'stickyDistance', 'theme', 'variation'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetTable);
let DuetTextarea = class DuetTextarea {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetInput', 'duetChange', 'duetBlur', 'duetFocus']);
    }
};
DuetTextarea.decorators = [
    { type: Component, args: [{ selector: 'duet-textarea', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleActiveDescendant', 'accessibleAutocomplete', 'accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleLabelledBy', 'accessibleOwns', 'caption', 'counter', 'counterLabel', 'disabled', 'disallowPattern', 'echoPlaceholder', 'error', 'expand', 'identifier', 'label', 'labelHidden', 'margin', 'maxlength', 'minlength', 'name', 'placeholder', 'required', 'role', 'theme', 'tooltip', 'tooltipDirection', 'value'] },] },
];
/** @nocollapse */
DuetTextarea.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetTextarea = tslib_1.__decorate([
    ProxyCmp({ inputs: ['accessibleActiveDescendant', 'accessibleAutocomplete', 'accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleLabelledBy', 'accessibleOwns', 'caption', 'counter', 'counterLabel', 'disabled', 'disallowPattern', 'echoPlaceholder', 'error', 'expand', 'identifier', 'label', 'labelHidden', 'margin', 'maxlength', 'minlength', 'name', 'placeholder', 'required', 'role', 'theme', 'tooltip', 'tooltipDirection', 'value'], 'methods': ['setFocus'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetTextarea);
let DuetToggle = class DuetToggle {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetChange']);
    }
};
DuetToggle.decorators = [
    { type: Component, args: [{ selector: 'duet-toggle', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleLabelledBy', 'accessibleOwns', 'checked', 'disabled', 'identifier', 'label', 'margin', 'name', 'required', 'role', 'theme', 'value'] },] },
];
/** @nocollapse */
DuetToggle.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetToggle = tslib_1.__decorate([
    ProxyCmp({ inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleDescription', 'accessibleDetails', 'accessibleLabelledBy', 'accessibleOwns', 'checked', 'disabled', 'identifier', 'label', 'margin', 'name', 'required', 'role', 'theme', 'value'], 'methods': ['setFocus'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetToggle);
let DuetTooltip = class DuetTooltip {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DuetTooltip.decorators = [
    { type: Component, args: [{ selector: 'duet-tooltip', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleCloseLabel', 'accessibleCloseLabelDefault', 'accessibleLabel', 'accessibleLabelDefault', 'active', 'breakpoint', 'direction', 'label', 'language', 'positionHorizontal', 'positionVertical', 'theme'] },] },
];
/** @nocollapse */
DuetTooltip.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetTooltip = tslib_1.__decorate([
    ProxyCmp({ inputs: ['accessibleCloseLabel', 'accessibleCloseLabelDefault', 'accessibleLabel', 'accessibleLabelDefault', 'active', 'breakpoint', 'direction', 'label', 'language', 'positionHorizontal', 'positionVertical', 'theme'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetTooltip);
let DuetTray = class DuetTray {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DuetTray.decorators = [
    { type: Component, args: [{ selector: 'duet-tray', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleCloseLabel', 'accessibleCloseLabelDefaults', 'accessibleOpenLabel', 'accessibleOpenLabelDefaults', 'active', 'autoHide', 'language', 'responsive', 'theme'] },] },
];
/** @nocollapse */
DuetTray.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetTray = tslib_1.__decorate([
    ProxyCmp({ inputs: ['accessibleCloseLabel', 'accessibleCloseLabelDefaults', 'accessibleOpenLabel', 'accessibleOpenLabelDefaults', 'active', 'autoHide', 'language', 'responsive', 'theme'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetTray);
let DuetUpload = class DuetUpload {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['duetChange', 'duetBlur', 'duetFocus', 'duetReady', 'duetDone', 'duetState', 'duetDelete', 'duetCancel', 'duetProgress', 'duetUpload']);
    }
};
DuetUpload.decorators = [
    { type: Component, args: [{ selector: 'duet-upload', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleActiveDescendant', 'accessibleButtonLabel', 'accessibleControls', 'accessibleDescribedBy', 'accessibleOwns', 'actions', 'alignment', 'allowedExtensions', 'allowedMimetypes', 'buttonLabel', 'buttonLabelDefaults', 'caption', 'deferUpload', 'description', 'descriptionDefaults', 'disabled', 'error', 'errorCodes', 'external', 'fileListEmpty', 'fileListEmptyDefaults', 'files', 'groups', 'hideButton', 'hideGroups', 'identifier', 'label', 'labelDefaults', 'limitSelection', 'margin', 'maxBytes', 'maxBytesTotal', 'maxFiles', 'middleware', 'multiple', 'name', 'required', 'showLinks', 'statusLabelDefaults', 'statusMessageLabel', 'theme', 'uri', 'valid', 'value'] },] },
];
/** @nocollapse */
DuetUpload.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetUpload = tslib_1.__decorate([
    ProxyCmp({ inputs: ['accessibleActiveDescendant', 'accessibleButtonLabel', 'accessibleControls', 'accessibleDescribedBy', 'accessibleOwns', 'actions', 'alignment', 'allowedExtensions', 'allowedMimetypes', 'buttonLabel', 'buttonLabelDefaults', 'caption', 'deferUpload', 'description', 'descriptionDefaults', 'disabled', 'error', 'errorCodes', 'external', 'fileListEmpty', 'fileListEmptyDefaults', 'files', 'groups', 'hideButton', 'hideGroups', 'identifier', 'label', 'labelDefaults', 'limitSelection', 'margin', 'maxBytes', 'maxBytesTotal', 'maxFiles', 'middleware', 'multiple', 'name', 'required', 'showLinks', 'statusLabelDefaults', 'statusMessageLabel', 'theme', 'uri', 'valid', 'value'], 'methods': ['setFocus', 'upload', 'uploadPending', 'refresh', 'getFiles', 'updateValue'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetUpload);
let DuetUploadAriaStatus = class DuetUploadAriaStatus {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DuetUploadAriaStatus.decorators = [
    { type: Component, args: [{ selector: 'duet-upload-aria-status', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['accessibleAriaLive', 'inprogress', 'invalid', 'statusMessageLabel', 'total', 'valid'] },] },
];
/** @nocollapse */
DuetUploadAriaStatus.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DuetUploadAriaStatus = tslib_1.__decorate([
    ProxyCmp({ inputs: ['accessibleAriaLive', 'inprogress', 'invalid', 'statusMessageLabel', 'total', 'valid'] }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], DuetUploadAriaStatus);
class DuetVisuallyHidden {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DuetVisuallyHidden.decorators = [
    { type: Component, args: [{ selector: 'duet-visually-hidden', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>' },] },
];
/** @nocollapse */
DuetVisuallyHidden.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ValueAccessor {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        this.onChange = (/**
         * @return {?}
         */
        () => { });
        this.onTouched = (/**
         * @return {?}
         */
        () => { });
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.el.nativeElement.value = this.lastValue = value == null ? '' : value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    handleChangeEvent(value) {
        if (value !== this.lastValue) {
            this.lastValue = value;
            this.onChange(value);
        }
    }
    /**
     * @return {?}
     */
    _handleBlurEvent() {
        this.onTouched();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} disabled
     * @return {?}
     */
    setDisabledState(disabled) {
        this.el.nativeElement.disabled = disabled;
    }
}
ValueAccessor.propDecorators = {
    _handleBlurEvent: [{ type: HostListener, args: ['focusout',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NumericValueAccessor extends ValueAccessor {
    /**
     * @param {?} el
     */
    constructor(el) {
        super(el);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        super.registerOnChange((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            fn(value === '' ? null : parseFloat(value));
        }));
    }
}
NumericValueAccessor.decorators = [
    { type: Directive, args: [{
                /* tslint:disable-next-line:directive-selector */
                selector: 'duet-input[type=number], duet-number-input',
                host: {
                    '(duetChange)': 'handleChangeEvent($event.target.value)'
                },
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: NumericValueAccessor,
                        multi: true
                    }
                ]
            },] },
];
/** @nocollapse */
NumericValueAccessor.ctorParameters = () => [
    { type: ElementRef }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BooleanValueAccessor extends ValueAccessor {
    /**
     * @param {?} el
     */
    constructor(el) {
        super(el);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.el.nativeElement.checked = this.lastValue = value == null ? false : value;
    }
}
BooleanValueAccessor.decorators = [
    { type: Directive, args: [{
                /* tslint:disable-next-line:directive-selector */
                selector: 'duet-checkbox, duet-toggle, duet-choice[type=checkbox]',
                host: {
                    '(duetChange)': 'handleChangeEvent($event.target.checked)'
                },
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: BooleanValueAccessor,
                        multi: true
                    }
                ]
            },] },
];
/** @nocollapse */
BooleanValueAccessor.ctorParameters = () => [
    { type: ElementRef }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TextValueAccessor extends ValueAccessor {
    /**
     * @param {?} el
     */
    constructor(el) {
        super(el);
    }
}
TextValueAccessor.decorators = [
    { type: Directive, args: [{
                /* tslint:disable-next-line:directive-selector */
                selector: 'duet-input:not([type=number]), duet-textarea, duet-date-picker',
                host: {
                    '(duetChange)': 'handleChangeEvent($event.target.value)'
                },
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: TextValueAccessor,
                        multi: true
                    }
                ]
            },] },
];
/** @nocollapse */
TextValueAccessor.ctorParameters = () => [
    { type: ElementRef }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SelectValueAccessor extends ValueAccessor {
    /**
     * @param {?} el
     */
    constructor(el) {
        super(el);
    }
}
SelectValueAccessor.decorators = [
    { type: Directive, args: [{
                /* tslint:disable-next-line:directive-selector */
                selector: 'duet-range-slider, duet-select, duet-radio-group, duet-choice-group',
                host: {
                    '(duetChange)': 'handleChangeEvent($event.target.value)'
                },
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: SelectValueAccessor,
                        multi: true
                    }
                ]
            },] },
];
/** @nocollapse */
SelectValueAccessor.ctorParameters = () => [
    { type: ElementRef }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RadioValueAccessor extends ValueAccessor {
    /**
     * @param {?} el
     */
    constructor(el) {
        super(el);
    }
}
RadioValueAccessor.decorators = [
    { type: Directive, args: [{
                /* tslint:disable-next-line:directive-selector */
                selector: 'duet-radio, duet-choice[type=radio]',
                host: {
                    '(duetSelect)': 'handleChangeEvent($event.target.checked)'
                },
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: RadioValueAccessor,
                        multi: true
                    }
                ]
            },] },
];
/** @nocollapse */
RadioValueAccessor.ctorParameters = () => [
    { type: ElementRef }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
defineCustomElements(window);
/** @type {?} */
const DECLARATIONS = [
    // proxies
    DuetActionButton,
    DuetAlert,
    DuetBadge,
    DuetBreadcrumb,
    DuetBreadcrumbs,
    DuetButton,
    DuetCaption,
    DuetCard,
    DuetCheckbox,
    DuetChoice,
    DuetChoiceGroup,
    DuetCollapsible,
    DuetCombobox,
    DuetCookieConsent,
    DuetDatePicker,
    DuetDivider,
    DuetEditableTable,
    DuetEmptyState,
    DuetFieldset,
    DuetFooter,
    DuetGrid,
    DuetGridItem,
    DuetHeader,
    DuetHeading,
    DuetHero,
    DuetIcon,
    DuetInput,
    DuetLabel,
    DuetLayout,
    DuetLink,
    DuetList,
    DuetListItem,
    DuetLogo,
    DuetModal,
    DuetMultiselect,
    DuetNotification,
    DuetNotificationDrawer,
    DuetNumberInput,
    DuetPagination,
    DuetParagraph,
    DuetProgress,
    DuetRadio,
    DuetRadioGroup,
    DuetRangeSlider,
    DuetRangeStepper,
    DuetScrollable,
    DuetSelect,
    DuetSpacer,
    DuetSpinner,
    DuetStep,
    DuetStepper,
    DuetTab,
    DuetTabGroup,
    DuetTable,
    DuetTextarea,
    DuetToggle,
    DuetTooltip,
    DuetTray,
    DuetUpload,
    DuetUploadAriaStatus,
    DuetVisuallyHidden,
    // Value Accessors
    NumericValueAccessor,
    BooleanValueAccessor,
    RadioValueAccessor,
    TextValueAccessor,
    SelectValueAccessor,
];
class DuetComponents {
}
DuetComponents.decorators = [
    { type: NgModule, args: [{
                declarations: DECLARATIONS,
                exports: DECLARATIONS,
                imports: [],
                providers: [],
            },] },
];

export { DuetActionButton, DuetAlert, DuetBadge, DuetBreadcrumb, DuetBreadcrumbs, DuetButton, DuetCaption, DuetCard, DuetCheckbox, DuetChoice, DuetChoiceGroup, DuetCollapsible, DuetCombobox, DuetComponents, DuetCookieConsent, DuetDatePicker, DuetDivider, DuetEditableTable, DuetEmptyState, DuetFieldset, DuetFooter, DuetGrid, DuetGridItem, DuetHeader, DuetHeading, DuetHero, DuetIcon, DuetInput, DuetLabel, DuetLayout, DuetLink, DuetList, DuetListItem, DuetLogo, DuetModal, DuetMultiselect, DuetNotification, DuetNotificationDrawer, DuetNumberInput, DuetPagination, DuetParagraph, DuetProgress, DuetRadio, DuetRadioGroup, DuetRangeSlider, DuetRangeStepper, DuetScrollable, DuetSelect, DuetSpacer, DuetSpinner, DuetStep, DuetStepper, DuetTab, DuetTabGroup, DuetTable, DuetTextarea, DuetToggle, DuetTooltip, DuetTray, DuetUpload, DuetUploadAriaStatus, DuetVisuallyHidden, ProxyCmp, proxyInputs, proxyMethods, proxyOutputs, NumericValueAccessor as ɵa, ValueAccessor as ɵb, BooleanValueAccessor as ɵc, RadioValueAccessor as ɵd, TextValueAccessor as ɵe, SelectValueAccessor as ɵf };
