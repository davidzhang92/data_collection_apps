#!/usr/bin/env node
/**
 * @fileoverview
 * Compiles our icons into static .js files that can be imported in the browser
 * and are tree-shakeable.
 */

const fs = require("fs")
const path = require("path")
const { titleToFilename } = require("./utils")
const data = require("../_data/duet-icons.json")

const indexFile = path.join(__dirname, "../icons.js")
const iconsDir = path.join(__dirname, "../assets")

const icons = {}
data.icons.forEach(icon => {
  const filename = titleToFilename(icon.title)
  icon.svg = fs.readFileSync(path.join(iconsDir, `${filename}.svg`), "utf8")
  icons[icon.title] = icon

  // write the static .js file for the icon
  fs.writeFileSync(path.join(iconsDir, `${filename}.js`), `module.exports=${JSON.stringify(icon)};`)
})

// write our generic icons.js
fs.writeFileSync(indexFile, `module.exports=${JSON.stringify(icons)};`)

// write types for icon names
function generateTypescriptDefinition(icons) {
  const wrapWith = char => str => char + str + char
  const iconNames = Object.values(icons)
    .map(icon => icon.title)
    .map(wrapWith('"'))

  return `export declare type DuetIcon = {
  title: DuetIconName;
  tags: string;
  svg: string;
};

export type DuetIconName = ${iconNames.join(" | ")};
export declare type DuetIcons = Record<DuetIconName, DuetIcon>;
declare const icons: DuetIcons;
export default icons;
`
}

fs.writeFileSync(indexFile.replace(/\.js$/, ".d.ts"), generateTypescriptDefinition(icons))
